<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>wordporess美化</title>
    <link href="/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/wordpress%E7%BE%8E%E5%8C%96/"/>
    <url>/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/wordpress%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="主题资源">主题资源</h1><p>链接：<ahref="https://github.com/solstice23/argon-theme">solstice23/argon-theme:📖 Argon - 一个轻盈、简洁的 WordPress 主题 (github.com)</a></p><p>将主题压缩包下载下来，在wordpress后台上传进行安装即可。</p><p>虽然Argon主题已经停止更新了，但对我来说已经够用了。</p><figure><img src="http://imgbed.leiting2020.top//img/202305302054646.png"alt="image-20230530205437120" /><figcaption aria-hidden="true">image-20230530205437120</figcaption></figure><h1 id="argon主题选项">Argon主题选项</h1><p>在主题选项界面里，可以通过一些设置和脚本对博客界面进行美化。</p><p>Argon文档链接：<a href="https://argon-docs.solstice23.top/#/">ArgonTheme Docs (solstice23.top)</a></p><figure><img src="http://imgbed.leiting2020.top//img/202305302022364.png"alt="image-20230530202252155" /><figcaption aria-hidden="true">image-20230530202252155</figcaption></figure><h2 id="网站底部信息">网站底部信息</h2><p>网站的页脚信息，如备案、运行时间等内容可在页脚内容里进行配置，使用HTML语言，也支持script标签，我的页脚内容配置如下：</p><blockquote><p>HTML(底部信息)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github-badge-big&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-subject&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-id-card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 备案号 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-value bg-orange&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 备案链接 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://beian.miit.gov.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">one-link-mark</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>湘ICP备2021004011号-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github-badge-big&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-subject&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-copyright&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>Copyright <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-value bg-red&quot;</span>&gt;</span>2022-2023<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://blog.leiting2020.top&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">one-link-mark</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>@ Lei<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 运行时间 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github-badge-big&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-subject&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-clock-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Running Time<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge-value bg-green&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog_running_days&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;odometer odometer-auto-theme&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            天<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog_running_hours&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;odometer odometer-auto-theme&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            小时<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog_running_mins&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;odometer odometer-auto-theme&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            分钟<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blog_running_secs&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;odometer odometer-auto-theme&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>             秒<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <br></code></pre></td></tr></table></figure><blockquote><p>CSS（样式表）</p></blockquote><p>也可以通过CSS对底部信息进行美化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-comment">/* 核心样式 */</span><br><span class="hljs-selector-class">.github-badge</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">text-shadow</span>: none;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13.1px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">15px</span>;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Open Sans&quot;</span>, sans-serif;<br>&#125;<br><span class="hljs-selector-class">.github-badge</span> <span class="hljs-selector-class">.badge-subject</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4d4d4d</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span>;<br><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Open Sans&quot;</span>, sans-serif;<br>&#125;<br><span class="hljs-selector-class">.github-badge</span> <span class="hljs-selector-class">.badge-value</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Open Sans&quot;</span>, sans-serif;<br>&#125;<br><span class="hljs-selector-class">.github-badge-big</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br><span class="hljs-attribute">text-shadow</span>: none;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">14.1px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">7px</span>;<br>&#125;<br><span class="hljs-selector-class">.github-badge-big</span> <span class="hljs-selector-class">.badge-subject</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4d4d4d</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span>;<br><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-selector-class">.github-badge-big</span> <span class="hljs-selector-class">.badge-value</span> &#123;<br><span class="hljs-attribute">display</span>: inline-block;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-orange</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ec8a64</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-red</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cb7574</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-apricots</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7c280</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-casein</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#dfe291</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-shallots</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#97c3c6</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-ogling</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#95c7e0</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-haze</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9aaec7</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.bg-mountain-terrier</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#99a5cd</span> <span class="hljs-meta">!important</span>;<br>&#125;<br>&lt;/style&gt;<br> <br></code></pre></td></tr></table></figure><p>实际效果如图</p><figure><img src="http://imgbed.leiting2020.top//img/202305302054344.png"alt="image-20230530205403215" /><figcaption aria-hidden="true">image-20230530205403215</figcaption></figure><h2 id="小工具">小工具</h2><blockquote><p>年度倒计时显示（左侧栏）</p></blockquote><figure><img src="http://imgbed.leiting2020.top//img/202305302056826.png"alt="image-20230530205634781" /><figcaption aria-hidden="true">image-20230530205634781</figcaption></figure><p>打开主题自定义，在左侧栏里添加工具-简码，将以下代码复制粘贴进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-info&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-label&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yearprogress_yearname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yearprogress_text_container&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-percentage&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yearprogress_progresstext&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yearprogress_progresstext_full&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yearprogress_progressbar&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar bg-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">no-pjax</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">yearprogress_refresh</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> year = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#yearprogress_yearname&quot;</span>).<span class="hljs-title function_">text</span>(year);</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> <span class="hljs-keyword">from</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> to = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, <span class="hljs-number">11</span>, <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> progress = (((now - <span class="hljs-keyword">from</span>) / (to - <span class="hljs-keyword">from</span> + <span class="hljs-number">1</span>)) * <span class="hljs-number">100</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">7</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> progressshort = (((now - <span class="hljs-keyword">from</span>) / (to - <span class="hljs-keyword">from</span> + <span class="hljs-number">1</span>)) * <span class="hljs-number">100</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>);</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#yearprogress_progresstext&quot;</span>).<span class="hljs-title function_">text</span>(progressshort + <span class="hljs-string">&quot;%&quot;</span>);</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#yearprogress_progresstext_full&quot;</span>).<span class="hljs-title function_">text</span>(progress + <span class="hljs-string">&quot;%&quot;</span>);</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#yearprogress_progressbar&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;width&quot;</span>, progress + <span class="hljs-string">&quot;%&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title function_">yearprogress_refresh</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> yearProgressIntervalHasSet == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> yearProgressIntervalHasSet = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">yearprogress_refresh</span>();</span><br><span class="language-javascript">&#125;, <span class="hljs-number">500</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#yearprogress_text_container</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">22px</span>;</span><br><span class="language-css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">user-select: none;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#yearprogress_text_container</span> &gt; <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#yearprogress_text_container</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">20px</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>网站访问数据</p></blockquote><ol type="1"><li><strong>进入 Wordpress，点击插件，搜索并且下载 WpStatistics</strong></li><li><strong>外观 —— 小工具 —— 站点额外内容 —— 旧版小工具 ——统计</strong></li></ol><figure><img src="http://imgbed.leiting2020.top//img/202305302058995.png"alt="image-20230530205833944" /><figcaption aria-hidden="true">image-20230530205833944</figcaption></figure><h2 id="音乐播放功能">音乐播放功能</h2><p>在主题的脚本设置里，可以使用以下代码，设置音乐播放器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 音乐播放器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meting-js</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">server</span>=<span class="hljs-string">&quot;netease&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;playlist&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;8440101601&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">fixed</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">mini</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;random&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;all&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">list-folded</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">meting-js</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>上面的调用链接可能会突然失效，如有需要可参考官方文档</p><p><ahref="https://ace520.github.io/blog/post/2020/05/26/aplayer/">APlayerHTML5 音乐播放器 | ACE-BLOG (ace520.github.io)</a></p></blockquote><p><strong><code>server="netease"</code>指定音乐平台为网易云，<code>type="song"</code>指单曲类型，<code>id="8440101601"</code> 为音乐的 id（这里的 id为打开音乐歌单，网址显示的 id）</strong></p><p><strong>开启吸底模式 <code>fixed="true"</code>, 开启迷你模式</strong><code>mini="true"</code>, 随机播放 <code>order="random"</code>,关闭底部歌词 <code>lrc-type="0"</code></p><p><strong><code>注意</code></strong>：id需要为自己创建的歌单，不能为我喜欢的音乐；server可以改自己用的音乐平台，如 netease (网易云)、tencent (QQ 音乐)</p><p>具体参数设置点击此链接：<ahref="https://yy.liveout.cn/article/Learn/front-end/aplayer参数.png">https://yy.liveout.cn/article/Learn/front-end/aplayer%E5%8F%82%E6%95%B0.png</a></p><p>Aplayer 播放器官网文档：<ahref="https://ace520.github.io/blog/post/2020/05/26/aplayer/">APlayerHTML5 音乐播放器 | ACE-BLOG (ace520.github.io)</a></p><p>添加以上代码后，在博客首页左下方会出现一个音乐播放器，如图所示，因为浏览器原因可能无法自动播放。</p><figure><img src="http://imgbed.leiting2020.top//img/202305302102184.png"alt="image-20230530210233103" /><figcaption aria-hidden="true">image-20230530210233103</figcaption></figure><h2 id="动态背景">动态背景</h2><p><strong>背景可以通过更改 url链接设置为自己的动态视频</strong>，<em>尽量不要太大，否则别人访问时会刷新许久</em></p><p>上传视频到云平台或媒体库，复制资源链接。我一开始也使用了动态背景，放在腾讯云cos里，结果一天就跑了1g多流量，后面还是取消了动态背景。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span></span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot; &quot;</span> /*<span class="hljs-attr">白天动态视频链接</span>*/</span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-video bg-video-day&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;loop&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">muted</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span></span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot; &quot;</span> /*<span class="hljs-attr">夜间动态视频链接</span>*/</span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-video bg-video-night&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;loop&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">muted</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.bg-video</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css"><span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span><br><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css"><span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css"><span class="hljs-attribute">pointer-events</span>: none;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.bg-video</span><span class="hljs-selector-class">.bg-video-day</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.bg-video</span><span class="hljs-selector-class">.bg-video-night</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.bg-video</span><span class="hljs-selector-class">.bg-video-day</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.bg-video</span><span class="hljs-selector-class">.bg-video-night</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#banner</span>,</span><br><span class="language-css"><span class="hljs-selector-id">#banner</span> <span class="hljs-selector-class">.shape</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">* &#123;</span><br><span class="language-css"><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Comfortaa&quot;</span>, <span class="hljs-string">&quot;Open Sans&quot;</span>, -apple-system, system-ui,</span><br><span class="language-css">BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, Roboto, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial,</span><br><span class="language-css"><span class="hljs-string">&quot;PingFang SC&quot;</span>, <span class="hljs-string">&quot;Hiragino Sans GB&quot;</span>, <span class="hljs-string">&quot;Microsoft YaHei&quot;</span>, SimSun, sans-serif;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.gcxstudio.cn/odometer/odometer.min.js&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-65R1G5irU1VT+k8L4coqgd3saSvO/Wufson/w+v2Idw=&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br> <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;aplayer&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="看板娘">看板娘</h2><p>在主题脚本中，添加以下代码，在博客右下角添加一个看板娘。</p><figure><img src="http://imgbed.leiting2020.top//img/202305302109153.png"alt="image-20230530210929093" /><figcaption aria-hidden="true">image-20230530210929093</figcaption></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    L2Dwidget.<span class="hljs-title function_">init</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;model&quot;</span>: &#123;</span><br><span class="language-javascript">　　　　　　　<span class="hljs-comment">//jsonpath控制显示那个小萝莉模型，</span></span><br><span class="language-javascript">            <span class="hljs-comment">//(切换模型需要改动)</span></span><br><span class="language-javascript"><span class="hljs-comment">//              &quot;https://unpkg.com/(live2d-widget-model-koharu)@1.0.5/assets/(koharu).model.json&quot;</span></span><br><span class="language-javascript">            <span class="hljs-attr">jsonPath</span>: <span class="hljs-string">&quot;https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;display&quot;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-comment">//看板娘的表现位置</span></span><br><span class="language-javascript">            <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">75</span>,  <span class="hljs-comment">//小萝莉的宽度</span></span><br><span class="language-javascript">            <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">150</span>, <span class="hljs-comment">//小萝莉的高度</span></span><br><span class="language-javascript">            <span class="hljs-string">&quot;hOffset&quot;</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;vOffset&quot;</span>: -<span class="hljs-number">20</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;mobile&quot;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;show&quot;</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;scale&quot;</span>: <span class="hljs-number">0.5</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;react&quot;</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;opacityDefault&quot;</span>: <span class="hljs-number">0.7</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;opacityOnHover&quot;</span>: <span class="hljs-number">0.2</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br>   /*   小帅哥： https://unpkg.com/live2d-widget-model-chitose@1.0.5/assets/chitose.model.json<br>      萌娘：https://unpkg.com/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json<br>      白猫：https://unpkg.com/live2d-widget-model-tororo@1.0.5/assets/tororo.model.json<br>      黑猫： https://unpkg.com/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json<br>      小可爱（女）：https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json<br>      小可爱（男）：https://unpkg.com/live2d-widget-model-haruto@1.0.5/assets/haruto.model.json<br>      初音：https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json<br>      圣职者妹妹：https://unpkg.com/live2d-widget-model-z16@1.0.5/assets/z16.model.json<br>      茶杯犬：https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json<br>      绿毛妹妹：https://unpkg.com/live2d-widget-model-tsumiki@1.0.5/assets/tsumiki.model.json<br>      金龟子妹妹：https://unpkg.com/live2d-widget-model-unitychan@1.0.5/assets/unitychan.model.json<br>      https://unpkg.com/live2d-widget-model-nito@1.0.5/assets/nito.model.json<br>      https://unpkg.com/live2d-widget-model-ni-j@1.0.5/assets/ni-j.model.json<br>      小阿狸： https://unpkg.com/live2d-widget-model-nico@1.0.5/assets/nico.model.json<br>      https://unpkg.com/live2d-widget-model-nietzche@1.0.5/assets/nietzche.model.json<br>      https://unpkg.com/live2d-widget-model-nipsilon@1.0.5/assets/nipsilon.model.json<br>      女学生： https://unpkg.com/live2d-widget-model-hibiki@1.0.5/assets/hibiki.model.json */<br></code></pre></td></tr></table></figure><h2 id="博客透明">博客透明</h2><p>添加到 <code>页尾脚本</code> 里，根据主题色自动透明，透明度可以在op1、op2、op3….. 那里设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">hexToRgb</span>(<span class="hljs-params">hex,op</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> str = hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> arr;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span> === <span class="hljs-number">3</span>) arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-built_in">parseInt</span>(d.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>));</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span> arr = [<span class="hljs-built_in">parseInt</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>), <span class="hljs-number">16</span>)];</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span>  <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;arr.join(<span class="hljs-string">&#x27;, &#x27;</span>)&#125;</span>, <span class="hljs-subst">$&#123;op&#125;</span>)`</span>;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"> </span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> themeColorHex = <span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--themecolor&#x27;</span>).<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> op1 = <span class="hljs-number">0.6</span></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> themeColorRgb = <span class="hljs-title function_">hexToRgb</span>(themeColorHex,op1);</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> themecolorGradient = <span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--themecolor-gradient&#x27;</span>)*</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--themecolor-gradient&#x27;</span>,themeColorRgb)</span><br><span class="language-javascript"> </span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> op2 = <span class="hljs-number">0.8</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 方法一：</span></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> colorTint92 = <span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color-tint-92&#x27;</span>).<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">  colorTint92 += <span class="hljs-string">&#x27;, &#x27;</span>+op2;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color-tint-92&#x27;</span>,colorTint92)</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法二：（无效）</span></span><br><span class="language-javascript">  <span class="hljs-comment">// let colorForegroundHex = getComputedStyle(document.documentElement).getPropertyValue(&#x27;--color-foreground&#x27;).trim();</span></span><br><span class="language-javascript">  <span class="hljs-comment">// let colorForeground = hexToRgb(colorForegroundHex,op2)</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 无效的原因是博客里的--color-fpreground是局部变量，不是:root里的全局变量，所以最好的办法是修改--color-tint-92，这个是全局的</span></span><br><span class="language-javascript">  <span class="hljs-comment">// document.documentElement.style.setPrope。rty(&#x27;--color-fpreground&#x27;,colorForeground)</span></span><br><span class="language-javascript">   <span class="hljs-comment">// 不要用下面这种cssText这种写法，会导致上面--themecolor-gradient的样式修改失效！</span></span><br><span class="language-javascript">   <span class="hljs-comment">// document.documentElement.style.cssText = &#x27;--color-tint-92:&#x27;+colorTint92</span></span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> op3 = <span class="hljs-number">0.65</span></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> colorShade90 = <span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color-shade-90&#x27;</span>).<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">  colorShade90 += <span class="hljs-string">&#x27;, &#x27;</span> + op3;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color-shade-90&#x27;</span>,colorShade90)</span><br><span class="language-javascript"> </span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> op4 = <span class="hljs-number">0.8</span></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> colorShade86 = <span class="hljs-title function_">getComputedStyle</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color-shade-86&#x27;</span>).<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">  colorShade86 += <span class="hljs-string">&#x27;, &#x27;</span> + op4;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color-shade-86&#x27;</span>,colorShade86)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="字体">字体</h2><p><ahref="https://blognas.hwb0307.com/linux/docker/744#comment-918">Docker系列 WordPress 系列 特效 – Bensz (hwb0307.com)</a></p><p><code>鼠标、输入特效</code>：<strong>这些特效可以访问以上友情链接</strong></p><blockquote><p>以下为Echo的额外 CSS，涉及字体、透明等博客样式</p></blockquote><p>ps: 字体链接需要上传到云端调用才能生效（下面字体链接已失效）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*=========字体设置============*/</span><br> <br><span class="hljs-comment">/*网站字体*/</span><br><span class="hljs-comment">/*原则上你可以设置多个字体，然后在不同的部位使用不同的字体。*/</span><br><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-attribute">font-family</span>:echo;<br>    <span class="hljs-attribute">src</span>:<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">https://fastly.jsdelivr.net/gh/huangwb8/bloghelper@latest/fonts/13.woff2</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>)<br>&#125;<br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;aLei&quot;</span> <span class="hljs-meta">!important</span><br>&#125;<br> <br><span class="hljs-comment">/*横幅字体大小*/</span><br><span class="hljs-selector-class">.banner-title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.5em</span>;<br>&#125;<br><span class="hljs-selector-class">.banner-subtitle</span>&#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">27px</span>;<br>&#125;<br> <br><span class="hljs-comment">/*文章标题字体大小*/</span><br><span class="hljs-selector-class">.post-title</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span><br>&#125;<br> <br><span class="hljs-comment">/*正文字体大小（不包含代码）*/</span><br><span class="hljs-selector-class">.post-content</span> <span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.25rem</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br><br>&#125;<br> <br><span class="hljs-comment">/*评论区字体大小*/</span><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span><br><br>&#125;<br> <br><span class="hljs-comment">/*评论发送区字体大小*/</span><br><span class="hljs-selector-class">.form-control</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span><br>&#125;<br> <br><span class="hljs-comment">/*评论勾选项目字体大小*/</span><br><span class="hljs-selector-class">.custom-checkbox</span> <span class="hljs-selector-class">.custom-control-input</span>~<span class="hljs-selector-class">.custom-control-label</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span><br>&#125;<br><span class="hljs-comment">/*评论区代码的强调色*/</span><br><span class="hljs-selector-tag">code</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--themecolor-rgbstr));<br>&#125;<br> <br><span class="hljs-comment">/*说说字体大小和颜色设置*/</span><br><span class="hljs-selector-class">.shuoshuo-title</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-comment">/*  color: rgba(var(--themecolor-rgbstr)); */</span><br>&#125;<br> <br><span class="hljs-comment">/*尾注字体大小*/</span><br><span class="hljs-selector-class">.additional-content-after-post</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span><br>&#125;<br> <br><span class="hljs-comment">/* 公告居中 */</span><br><span class="hljs-selector-class">.leftbar-announcement-title</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-selector-class">.leftbar-announcement-content</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.8</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.9</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/* 一言居中 */</span><br><span class="hljs-selector-class">.leftbar-banner-title</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/* 个性签名居中 */</span><br><span class="hljs-selector-class">.leftbar-banner-subtitle</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/*========颜色设置===========*/</span><br> <br><span class="hljs-comment">/*文章或页面的正文颜色*/</span><br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#364863</span><br>&#125;<br> <br><span class="hljs-comment">/*引文属性设置*/</span><br><span class="hljs-selector-tag">blockquote</span> &#123;<br>    <span class="hljs-comment">/*添加弱主题色为背景色*/</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--themecolor-rgbstr), <span class="hljs-number">0.1</span>) <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span><br>&#125;<br> <br><span class="hljs-comment">/*引文颜色 建议用主题色*/</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>    <span class="hljs-comment">/*也可以用类似于--color-border-on-foreground-deeper: #009688;这样的命令*/</span><br>    <span class="hljs-attr">--color-border-on-foreground-deeper</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--themecolor-rgbstr));<br>&#125;<br> <br><span class="hljs-comment">/*左侧菜单栏突出颜色修改*/</span><br><span class="hljs-selector-class">.leftbar-menu-item</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-class">.leftbar-menu-item</span><span class="hljs-selector-class">.current</span> &gt; <span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f9f9f980</span>;<br>&#125;<br> <br><span class="hljs-comment">/*站点概览分隔线颜色修改*/</span><br><span class="hljs-selector-class">.site-state-item</span>&#123;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>;<br>&#125;<br><span class="hljs-selector-class">.site-friend-links-title</span> &#123;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#aaa</span>;<br>&#125;<br><span class="hljs-selector-id">#leftbar_tab_tools</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">border-bottom</span>:none;<br>&#125;<br><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-id">#leftbar_tab_tools</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>:none;<br>&#125;<br> <br><span class="hljs-comment">/*左侧栏搜索框的颜色*/</span><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#leftbar_search_container</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br> <br><span class="hljs-comment">/*========透明设置===========*/</span><br> <br><span class="hljs-comment">/*白天卡片背景透明*/</span><br><span class="hljs-selector-class">.card</span>&#123;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>) <span class="hljs-meta">!important</span>;<br>    <span class="hljs-comment">/*backdrop-filter:blur(6px);*/</span><span class="hljs-comment">/*毛玻璃效果主要属性*/</span><br>    -webkit-backdrop-<span class="hljs-attribute">filter</span>:<span class="hljs-built_in">blur</span>(<span class="hljs-number">6px</span>);<br>&#125;<br> <br><span class="hljs-comment">/*小工具栏背景完全透明*/</span><br><span class="hljs-comment">/*小工具栏是card的子元素，如果用同一个透明度会叠加变色，故改为完全透明*/</span><br><span class="hljs-selector-class">.card</span> <span class="hljs-selector-class">.widget</span>,<span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-class">.card</span> <span class="hljs-selector-class">.widget</span>,<span class="hljs-selector-id">#post_content</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.argon-timeline-card</span><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.bg-gradient-secondary</span><span class="hljs-selector-class">.archive-timeline-title</span>&#123;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ffffff00</span> <span class="hljs-meta">!important</span>;<br>    backdrop-<span class="hljs-attribute">filter</span>:none;<br>    -webkit-backdrop-<span class="hljs-attribute">filter</span>:none;<br>&#125;<br><span class="hljs-selector-class">.emotion-keyboard</span>,<span class="hljs-selector-id">#fabtn_blog_settings_popup</span>&#123;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.95</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br> <br><span class="hljs-comment">/*分类卡片透明*/</span><br><span class="hljs-selector-class">.bg-gradient-secondary</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>) <span class="hljs-meta">!important</span>;<br>    backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>);<br>    -webkit-backdrop-<span class="hljs-attribute">filter</span>:<span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>);<br>&#125;<br> <br><span class="hljs-comment">/*夜间透明*/</span><br><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span><span class="hljs-selector-class">.bg-white</span>,<span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-class">.card</span>,<span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-id">#footer</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">0.9</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.darkmode</span> <span class="hljs-selector-id">#fabtn_blog_settings_popup</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">66</span>, <span class="hljs-number">0.95</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br> <br><span class="hljs-comment">/*标签背景</span><br><span class="hljs-comment">.post-meta-detail-tag &#123;</span><br><span class="hljs-comment">    background:rgba(255, 255, 255, 0.5)!important;</span><br><span class="hljs-comment">&#125;*/</span><br> <br> <br><span class="hljs-comment">/*========排版设置===========*/</span><br> <br><span class="hljs-comment">/*左侧栏层级置于上层*/</span><br><span class="hljs-selector-id">#leftbar_part1</span> &#123;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-comment">/*分类卡片文本居中*/</span><br><span class="hljs-selector-id">#content</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.page-information-card-container</span> &gt; <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br> <br><span class="hljs-comment">/*子菜单对齐及样式调整*/</span><br><span class="hljs-selector-class">.dropdown-menu</span> <span class="hljs-selector-class">.dropdown-item</span>&gt;<span class="hljs-selector-tag">i</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.dropdown-menu</span>&gt;<span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-built_in">var</span>(--themecolor);<br>&#125;<br><span class="hljs-selector-class">.dropdown-menu</span>&#123;<br>    <span class="hljs-attribute">min-width</span>:max-content;<br>&#125;<br><span class="hljs-selector-class">.dropdown-menu</span> <span class="hljs-selector-class">.dropdown-item</span> &#123;<br>    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5rem</span> <span class="hljs-number">1.5rem</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">1rem</span>;<br>&#125;<br><span class="hljs-selector-class">.leftbar-menu-subitem</span>&#123;<br>    <span class="hljs-attribute">min-width</span>:max-content;<br>&#125;<br><span class="hljs-selector-class">.leftbar-menu-subitem</span> <span class="hljs-selector-class">.leftbar-menu-item</span>&gt;<span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0rem</span> <span class="hljs-number">1.5rem</span> <span class="hljs-number">0rem</span> <span class="hljs-number">1rem</span>;<br>&#125;<br> <br><span class="hljs-comment">/*左侧栏边距修改*/</span><br><span class="hljs-selector-class">.tab-content</span>&#123;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.site-author-links</span>&#123;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> ;<br>&#125;<br><span class="hljs-comment">/*目录位置偏移修改*/</span><br><span class="hljs-selector-id">#leftbar_catalog</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><span class="hljs-comment">/*目录条目边距修改*/</span><br><span class="hljs-selector-id">#leftbar_catalog</span> <span class="hljs-selector-class">.index-link</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-comment">/*左侧栏小工具栏字体缩小*/</span><br><span class="hljs-selector-id">#leftbar_tab_tools</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br> <br><span class="hljs-comment">/*正文图片边距修改*/</span><br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">figure</span> &#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;&#125;<br><span class="hljs-comment">/*正文图片居中显示*/</span><br><span class="hljs-selector-class">.fancybox-wrapper</span> &#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><span class="hljs-comment">/*正文表格样式修改*/</span><br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">tbody</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">tbody</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">tfoot</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">tfoot</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">thead</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">table</span> &gt; <span class="hljs-selector-tag">thead</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">th</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>&#125;<br><span class="hljs-comment">/*表格居中样式*/</span><br><span class="hljs-selector-class">.wp-block-table</span><span class="hljs-selector-class">.aligncenter</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> auto;&#125;<br> <br><span class="hljs-comment">/*回顶图标放大*/</span><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#fabtn_back_to_top</span>, <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#fabtn_go_to_comment</span>, <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#fabtn_toggle_blog_settings_popup</span>, <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#fabtn_toggle_sides</span>, <span class="hljs-selector-tag">button</span><span class="hljs-selector-id">#fabtn_open_sidebar</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br> <br><span class="hljs-comment">/*顶栏菜单放大*/</span><br> <br> <br><span class="hljs-selector-class">.navbar-nav</span> <span class="hljs-selector-class">.nav-link</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;echo&#x27;</span>;<br><br>&#125;<br><span class="hljs-selector-class">.navbar-brand</span> &#123;<br><span class="hljs-attribute">color</span>: white<span class="hljs-meta">!important</span>;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;echo&#x27;</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: .<span class="hljs-number">2rem</span>;<br>&#125;<br><span class="hljs-comment">/*菜单大小*/</span><br><span class="hljs-selector-class">.nav-link-inner--text</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;<br>&#125;<br><span class="hljs-selector-class">.navbar-nav</span> <span class="hljs-selector-class">.nav-item</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.mr-lg-5</span>, <span class="hljs-selector-class">.mx-lg-5</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.navbar-toggler-icon</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1.8rem</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1.8rem</span>;<br>&#125;<br><span class="hljs-comment">/*菜单间距*/</span><br><span class="hljs-selector-class">.navbar-expand-lg</span> <span class="hljs-selector-class">.navbar-nav</span> <span class="hljs-selector-class">.nav-link</span> &#123;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">2.1em</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1</span>.em;<br>&#125;<br> <br><span class="hljs-comment">/*隐藏wp-SEO插件带来的线条阴影（不一定要装）*/</span><br>*<span class="hljs-selector-attr">[style=<span class="hljs-string">&#x27;position: relative; z-index: 99998;&#x27;</span>]</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br> <br><span class="hljs-comment">/* Github卡片样式*/</span><br><span class="hljs-selector-class">.github-info-card-header</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-comment">/*Github卡片抬头颜色*/</span><br>    <span class="hljs-attribute">color</span>: black <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>&#125;<br><span class="hljs-selector-class">.github-info-card</span> &#123;<br>    <span class="hljs-comment">/*Github卡片文字（非链接）*/</span><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">color</span>: black <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.github-info-card</span><span class="hljs-selector-class">.github-info-card-full</span><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.shadow-sm</span> &#123;<br>    <span class="hljs-comment">/*Github卡片背景色*/</span><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--themecolor-rgbstr), <span class="hljs-number">0.1</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="美化json">美化JSON</h2><p>懒得自己配置的，也可以直接导入美化配置JSON一键配置。</p><h1 id="相关链接">相关链接</h1><p><a href="https://www.liveout.cn/25/">Argon主题博客美化 – Echo小窝(liveout.cn)</a></p><p><ahref="https://ace520.github.io/blog/post/2020/05/26/aplayer/">APlayerHTML5 音乐播放器 | ACE-BLOG (ace520.github.io)</a></p><p><ahref="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang/live2d-widget:把萌萌哒的看板娘抱回家 (ノ≧∇≦) ノ | Live2D widget for web platform(github.com)</a></p><p><ahref="https://blognas.hwb0307.com/linux/docker/744#comment-918">Docker系列 WordPress 系列 特效 – Bensz (hwb0307.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cloudflare自建github代理</title>
    <link href="/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/cloudflare%E8%87%AA%E5%BB%BAgithub%E4%BB%A3%E7%90%86/"/>
    <url>/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/cloudflare%E8%87%AA%E5%BB%BAgithub%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>通过cloudflare进行自建代理，部署简单并且可以完全白嫖，但是缺点就是Workers子域名已经被国内墙了，需要绑定自定义域名才可以实现国内访问。</p><p>域名购买可以在腾讯云、阿里云等厂商购买，像是.top等后缀的域名价格十分便宜，一年在30块左右。如果不想花钱也可以去<ahref="www.freenom.com/">freenom</a>白嫖域名，freenom提供了一些冷门国家的域名给用户免费使用一年，但是可以不断续约下去。</p><p>可以在freenom白嫖域名后，可以挂在cloudflare进行DNS解析，还免费提供cdn服务，后续部署代理也更加方便。</p><h3 id="注册-cloudflare">注册 Cloudflare</h3><p>https://dash.cloudflare.com/sign-up</p><p>如果已有账号则忽略该步骤，直接进行下一步（可能部分地区官网访问较慢，注册账号需要邮件验证）</p><h3 id="创建workers">创建Workers</h3><p>1、进入cloudflare面板，点击Worker概述进入图示界面，选择创建应用程序</p><figure><img src="http://imgbed.leiting2020.top//img/202306011352039.png"alt="image-20230601135253949" /><figcaption aria-hidden="true">image-20230601135253949</figcaption></figure><p>2、将名称改为git或者github等自己容易辨别的名字，点击部署即可。</p><figure><img src="http://imgbed.leiting2020.top//img/202306011359990.png"alt="image-20230601135931865" /><figcaption aria-hidden="true">image-20230601135931865</figcaption></figure><p>3、创建应用程序后，进入快速编辑</p><figure><img src="http://imgbed.leiting2020.top//img/202306011401727.png"alt="image-20230601140146588" /><figcaption aria-hidden="true">image-20230601140146588</figcaption></figure><p>4、复制以下代码，覆盖掉上图中1所示的默认内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static files (404.html, sw.js, conf.js)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ASSET_URL</span> = <span class="hljs-string">&#x27;https://github.com/&#x27;</span><br><span class="hljs-comment">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFIX</span> = <span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Config</span> = &#123;<br>    <span class="hljs-attr">jsdelivr</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">cnpmjs</span>: <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">204</span>,<br>    <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>        <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>,<br>    &#125;),<br>&#125;<br><br><span class="hljs-keyword">const</span> exp1 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp2 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob|raw)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp3 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-).*$/i</span><br><span class="hljs-keyword">const</span> exp4 = <span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+?\/.+$/i</span><br><span class="hljs-keyword">const</span> exp5 = <span class="hljs-regexp">/^(?:https?:\/\/)?gist\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+$/i</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; <span class="hljs-variable">body</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">status</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object&lt;string, string&gt;</span>&#125; <span class="hljs-variable">headers</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) &#123;<br>    headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123;status, headers&#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">urlStr</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">newUrl</span>(<span class="hljs-params">urlStr</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_">fetchHandler</span>(e)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-string">&#x27;cfworker error:\n&#x27;</span> + err.<span class="hljs-property">stack</span>, <span class="hljs-number">502</span>))<br>    e.<span class="hljs-title function_">respondWith</span>(ret)<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUrl</span>(<span class="hljs-params">u</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> [exp1, exp2, exp3, exp4, exp5, ]) &#123;<br>        <span class="hljs-keyword">if</span> (u.<span class="hljs-title function_">search</span>(i) === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">FetchEvent</span>&#125; <span class="hljs-variable">e</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchHandler</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> req = e.<span class="hljs-property">request</span><br>    <span class="hljs-keyword">const</span> urlStr = req.<span class="hljs-property">url</span><br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    <span class="hljs-keyword">let</span> path = urlObj.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;https://&#x27;</span> + urlObj.<span class="hljs-property">host</span> + <span class="hljs-variable constant_">PREFIX</span> + path, <span class="hljs-number">301</span>)<br>    &#125;<br>    <span class="hljs-comment">// cfworker 会把路径中的 `//` 合并成 `/`</span><br>    path = urlObj.<span class="hljs-property">href</span>.<span class="hljs-title function_">substr</span>(urlObj.<span class="hljs-property">origin</span>.<span class="hljs-property">length</span> + <span class="hljs-variable constant_">PREFIX</span>.<span class="hljs-property">length</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^https?:\/+/</span>, <span class="hljs-string">&#x27;https://&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp1) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp5) === <span class="hljs-number">0</span> || !<span class="hljs-title class_">Config</span>.<span class="hljs-property">cnpmjs</span> &amp;&amp; (path.<span class="hljs-title function_">search</span>(exp3) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp2) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Config</span>.<span class="hljs-property">jsdelivr</span>) &#123;<br>            <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            path = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;/raw/&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp3) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="hljs-string">&#x27;https://github.com.cnpmjs.org&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span class="hljs-string">&#x27;@$1&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-variable constant_">ASSET_URL</span> + path)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Request</span>&#125; <span class="hljs-variable">req</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">pathname</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">httpHandler</span>(<span class="hljs-params">req, pathname</span>) &#123;<br>    <span class="hljs-keyword">const</span> reqHdrRaw = req.<span class="hljs-property">headers</span><br><br>    <span class="hljs-comment">// preflight</span><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>        reqHdrRaw.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable constant_">PREFLIGHT_INIT</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> reqHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br><br>    <span class="hljs-keyword">let</span> urlStr = pathname<br>    <span class="hljs-keyword">if</span> (urlStr.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;github&#x27;</span>)) &#123;<br>        urlStr = <span class="hljs-string">&#x27;https://&#x27;</span> + urlStr<br>    &#125;<br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-title function_">newUrl</span>(urlStr)<br><br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br>    <span class="hljs-keyword">const</span> reqInit = &#123;<br>        <span class="hljs-attr">method</span>: req.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">headers</span>: reqHdrNew,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;manual&#x27;</span>,<br>        <span class="hljs-attr">body</span>: req.<span class="hljs-property">body</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(urlObj, reqInit)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">URL</span>&#125; <span class="hljs-variable">urlObj</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">RequestInit</span>&#125; <span class="hljs-variable">reqInit</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">urlObj, reqInit</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(urlObj.<span class="hljs-property">href</span>, reqInit)<br>    <span class="hljs-keyword">const</span> resHdrOld = res.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">const</span> resHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>    <span class="hljs-keyword">const</span> status = res.<span class="hljs-property">status</span><br><br>    <span class="hljs-keyword">if</span> (resHdrNew.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;location&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">let</span> _location = resHdrNew.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;location&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkUrl</span>(_location))<br>            resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;location&#x27;</span>, <span class="hljs-variable constant_">PREFIX</span> + _location)<br>        <span class="hljs-keyword">else</span> &#123;<br>            reqInit.<span class="hljs-property">redirect</span> = <span class="hljs-string">&#x27;follow&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-title function_">newUrl</span>(_location), reqInit)<br>        &#125;<br>    &#125;<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.<span class="hljs-property">body</span>, &#123;<br>        status,<br>        <span class="hljs-attr">headers</span>: resHdrNew,<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>5、点击发送2所示按钮，测试反代是否成功，如果显示如图所示的<code>200 OK</code>,表示反代成功，点击保存并部署，退出界面。</p><p>6、由于Cloudflare默认的Workers子域名已经被墙了，导致无法访问。因此可以通过添加自定义域名，来实现国内的访问。</p><p>我添加了托管在Cloudflare上的域名，系统会自动申请ssl证书，帮我省下了一点功夫。</p><figure><img src="http://imgbed.leiting2020.top//img/202306011407529.png"alt="image-20230601140717301" /><figcaption aria-hidden="true">image-20230601140717301</figcaption></figure><p>7、到这里就搭建完成了，搭建的代理链接就是自己设置的子域名，我设置代理链接的为：https://github.leitingtool.cf/</p><h3 id="使用方法">使用方法</h3><p>以fatedier大佬的frp仓库为例，原本的仓库地址为：https://github.com/fatedier/frp.git</p><p>在原来的仓库连接前加上自己的代理地址，你的代理链接就是：https://github.leitingtool.cf/https://github.com/fatedier/frp.git</p><h3 id="参考链接">参考链接</h3><p>freenom：www.freenom.com</p><p>cloudflare：www.cloudflare.com</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>github</tag>
      
      <tag>cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导航页</title>
    <link href="/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AF%BC%E8%88%AA%E9%A1%B5/"/>
    <url>/2023/07/08/note/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AF%BC%E8%88%AA%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>这两天一直在折腾个人主页，在GitHub上找了不少的开源项目，最后选择了<ahref="https://github.com/imsyy">imsyy</a>大佬的项目，大佬的界面非常简约和美观，非常适合做个人导航页。我也是化成CV工程师直接照搬了，hhh</p><h3 id="主页搭建">主页搭建</h3><p>我是在宝塔上进行搭建的，对于我这种不怎么懂代码的人来说，宝塔提供了不少自动化工具，省去了不少环境配置的功夫。</p><blockquote><p>环境配置起来是真的折磨，还是别人的一键脚本香。</p></blockquote><p>项目地址：<a href="https://github.com/imsyy/home">imsyy/home:个人主页，我的个人主页，个人主页源码，主页模板，homepage(github.com)</a></p><p>搭建后的整体效果大概是这样</p><figure><img src="http://imgbed.leiting2020.top//img/202306011705834.png"alt="image-20230601170508138" /><figcaption aria-hidden="true">image-20230601170508138</figcaption></figure><h4 id="部署环境">1、部署环境</h4><p>在安装宝塔的时候，一般都会自动安装好<code>LNMP(Linux+NGINX+MySQL+PHP)</code>环境，如果版本不同，也可以在宝塔的应用商店里进行安装。</p><p><img src="http://imgbed.leiting2020.top//img/202306011805949.png" alt="image-20230601180528769" style="zoom:50%;" /></p><p>接下来就是安装node环境，这一步可以使用宝塔上的<code>node.js版本管理器</code>应用进行安装，</p><blockquote><p>node &gt; 16.16.0</p><p>npm &gt; 8.15.0</p></blockquote><blockquote><p>最好安装最新的稳定版</p><p>如果在列表中没有看到最近的版本，可以更新一下版本列表。</p><p>有时候命令行的node不是所需的版本，记得在箭头所指的命令行版本处进行选择。</p></blockquote><p>在安装node的时候，会一起把<code>yarn</code>、<code>npm</code>、<code>pm2</code>等模块也一起安装好</p><p><img src="http://imgbed.leiting2020.top//img/202306011809185.png" alt="image-20230601180900976" style="zoom:50%;" /></p><h4 id="创建网页">2、创建网页</h4><p>在宝塔左侧边栏的<code>网页</code>应用中，点击<code>添加站点</code>创建网页应用。需要一个域名指向服务器的<code>ip地址</code>，<code>备注</code>可以随便填，根目录表示网页文件存储的位置，到时候我们的导航页文件就要放在这个文件夹中。后面的<code>PHP、数据库</code>等选项可以保持默认，但是版本最好不要太低。</p><p><img src="http://imgbed.leiting2020.top//img/202306011848922.png" alt="image-20230601184842793" style="zoom:50%;" /></p><h4 id="下载导航页安装包">3、下载导航页安装包</h4><p>下载安装包有两种选择，一种是利用ssh进行操作，另一种是下载安装包通过宝塔面板进行上传。</p><ul><li><p>接下来，我通过ssh进行安装，首先复制仓库地址</p><p><img src="http://imgbed.leiting2020.top//img/202306011905501.png" alt="image-20230601190506440" style="zoom:50%;" /></p></li><li><p>切换目录到上面创建的网页文件夹中,使用<code>git clone</code>指令下载安装包</p><blockquote><p>现在国内的服务器连接github都很不稳定，可以通过使用代理来加速下载，使用上一篇博客中搭建的代理进行加速</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /www/wwwroot/test</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/imsyy/home.git  <span class="hljs-comment">#不使用代理</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.leitingtool.cf/https://github.com/imsyy/home.git <span class="hljs-comment">#使用自建代理</span></span><br></code></pre></td></tr></table></figure></li></ul><p><img src="http://imgbed.leiting2020.top//img/202306011920315.png" alt="image-20230601192021269" style="zoom:80%;" /></p><h4 id="安装导航页">4、安装导航页</h4><p>将下载的<code>home文件夹</code>中的文件复制到网站根目录下（即<code>test文件夹</code>）</p><ul><li><p>在<code>网站根目录</code>下安装依赖 <code>yarn install</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yarn install</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果未安装yarn，需要先执行 npm install yarn -g</span><br></code></pre></td></tr></table></figure><figure><img src="http://imgbed.leiting2020.top//img/202306011939546.png"alt="image-20230601193937469" /><figcaption aria-hidden="true">image-20230601193937469</figcaption></figure></li><li><p>执行<code>yarn build</code>，将网站文件进行打包，打包后的文件默认在<code>dist</code>目录中,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yarn build</span><br></code></pre></td></tr></table></figure><figure><img src="http://imgbed.leiting2020.top//img/202306011940260.png"alt="image-20230601194036193" /><figcaption aria-hidden="true">image-20230601194036193</figcaption></figure><blockquote><p>这一步容易因为服务器内存不足而报错，请保证服务器内存充足时重试或者在本地计算机进行打包后再上传至服务器</p></blockquote></li><li><p>构建完成后，就可以前往宝塔的网站设置页面，将网站目录设置到<code>dist</code>文件夹，即可访问站点了</p><p><img src="http://imgbed.leiting2020.top//img/202306011944850.png" alt="image-20230601194420718" style="zoom:67%;" /></p></li></ul><h4 id="更新">5、更新</h4><p>后续如果对网站文件进行改动，只需<code>yarn build</code>重新对网站文件进行打包，即可实现更新。</p><h3 id="主页文件修改">主页文件修改</h3><p>在网页根目录下的<code>.env</code>文件中进行修改，即可对网站进行调整。</p><h4id="自定义站点名称对界面进行调整">1、自定义站点名称对界面进行调整</h4><p><img src="http://imgbed.leiting2020.top//img/202306011955574.png" alt="image-20230601195545446" style="zoom:50%;" /></p><h4 id="设置天气api">2、设置天气API</h4><p>天气及地区获取需要 <code>高德开放平台</code> 相关 API</p><ul><li><p>前往 <ahref="https://console.amap.com/dev/index">高德开放平台控制台</a>创建一个 <code>Web 服务</code> 类型的 <code>Key</code>，并将<code>Key</code> 填入 <code>.env</code> 中的<code>VITE_WEATHER_KEY</code> 中。</p></li><li><p>高德开放平台 - 应用管理 - 我的应用 - 创建新应用 - web服务</p><blockquote><p>记得是web服务，不是web端，我当时就搞错了</p></blockquote><p><img src="http://imgbed.leiting2020.top//img/202306012003371.png" alt="image-20230601200304229" style="zoom: 50%;" /></p></li></ul><h4 id="歌曲api">3、歌曲API</h4><p>参照 https://github.com/xizeyoupan/Meting-API#deno-deploy 进行 API服务部署</p><p>我使用的方法是部署到<code>Vercel</code>,<code>Vercel</code>是一个免费的代码托管网站，还能与<code>github</code>进行协同，大佬们的开源项目直接<code>fork</code>过来，可以直接一键部署到<code>Vercel</code>，而且每次对仓库的修改都会实时重新部署到<code>Vercel</code>，实在是懒人的福音。</p><ul><li><p>首先将<code>Vercel</code>和<code>github</code>进行绑定</p></li><li><p>将<ahref="https://github.com/xizeyoupan/Meting-API#deno-deploy">Meting-API</a>仓库fork到自己仓库</p></li><li><p>到<code>Vercel</code>界面，Add New -Project，选择import自己相应的仓库</p><figure><img src="http://imgbed.leiting2020.top//img/202306012016025.png"alt="image-20230601201608507" /><figcaption aria-hidden="true">image-20230601201608507</figcaption></figure></li><li><p>修改<code>Project Name</code>后就可以点击<code>Deploy</code>进行部署</p></li></ul><figure><img src="http://imgbed.leiting2020.top//img/202306012018173.png"alt="image-20230601201802072" /><figcaption aria-hidden="true">image-20230601201802072</figcaption></figure><ul><li><p><code>Vercel</code>官方提供的域名被阻断，可以绑定自定义域名，即可实现国内访问。</p><p>在需要绑定的域名解析中添加Vercel所需的CNAME记录，便可将子域名和Vercel绑定，而且还可以自动帮你申请域名的ssl证书</p><figure><img src="http://imgbed.leiting2020.top//img/202306012023305.png"alt="image-20230601202321205" /><figcaption aria-hidden="true">image-20230601202321205</figcaption></figure></li><li><p>通过定义的子域名即可实现国内访问，访问网页显示如图所示就表示部署成功。</p></li><li><p>将<code>https://域名/api</code>填入<code>.env</code>的<code>VITE_SONG_API</code>中即可。</p><figure><img src="http://imgbed.leiting2020.top//img/202306012025104.png"alt="image-20230601202549070" /><figcaption aria-hidden="true">image-20230601202549070</figcaption></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">站点名称</span><br>VITE_SITE_NAME = &quot;阿雷の主页&quot;<br>VITE_SITE_ANTHOR = &quot;阿雷&quot;<br>VITE_SITE_KEYWORDS = &quot;阿雷,个人主页&quot;<br>VITE_SITE_DES = &quot;一个默默无闻的主页&quot;<br>VITE_SITE_URL = &quot;leiting2020.top&quot;<br>VITE_SITE_LOGO = &quot;/images/icon/logo.png&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">百度统计（若不需要可不填）</span><br>VITE_SITE_BAIDUTONGJI = &quot;14e9f35ff8bc67fd4bcb5f07a6e6655a&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">简介文本</span><br>VITE_DESC_HELLO = &quot;Hello World !&quot;<br>VITE_DESC_TEXT = &quot;一个建立于 21 世纪的小站，存活于互联网的边缘&quot;<br>VITE_DESC_HELLO_OTHER = &quot;Oops !&quot;<br>VITE_DESC_TEXT_OTHER = &quot;哎呀，这都被你发现了（ 再点击一次可关闭 ）&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">社交链接</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请在 public 目录下的 socialLinks.json 文件中配置</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">网站链接</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请在 src/components/Links/index.vue 文件中配置</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">天气 Key</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请前往高德开放平台注册 Web服务 Key（免费的）</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请各位大佬行行好，别再让我超量了</span></span><br>VITE_WEATHER_KEY = &quot;0d8df746afc98c95ec709073c69dc22e&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">建站日期</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请按照 YYYY-MM-DD 格式填写</span></span><br>VITE_SITE_START = &quot;2023-5-28&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">歌曲 API 地址</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 请参照 https://github.com/xizeyoupan/Meting-API#deno-deploy 进行 API 服务部署</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 此处提供的服务可能会超量从而无法访问，请自行部署</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 若使用QQ音乐歌单，歌曲数量最好不要超出50首</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 备用：https://api.wuenci.com/meting/api/</span></span><br>VITE_SONG_API = &quot;https://api-meting.leitingtool.cf/api&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">歌曲服务器 ( netease-网易云, tencent-qq音乐 )</span><br>VITE_SONG_SERVER = &quot;netease&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">播放类型 ( song-歌曲, playlist-播放列表, album-专辑, search-搜索, artist-艺术家 )</span><br>VITE_SONG_TYPE = &quot;playlist&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">播放 ID</span><br>VITE_SONG_ID = &quot;8440101601&quot;<br></code></pre></td></tr></table></figure><h4 id="页脚信息">4、页脚信息</h4><p>页脚的网站和备案信息在网站根目录下的<code>./src/components/Footer/index.vue</code>中进行修改</p><h4 id="导航网站链接">5、导航网站链接</h4><p>导航的网站列表在网站根目录下的<code>./src/components/Links/index.vue</code>中进行修改</p><h4 id="社交链接">6、社交链接</h4><p>社交链接的配置文件在网站根目录下<code>./public/socialLinks.json</code>中。</p><h3 id="splayer音乐播放器">SPlayer音乐播放器</h3><h4 id="splayer搭建">1、SPlayer搭建</h4><blockquote><p>Vercel 等托管平台可在 Fork后一键导入并自动部署，并绑定好自己的域名</p></blockquote><p>Vercel部署地址：<a href="https://music.leitingtool.cf/">SPlayer(leitingtool.cf)</a></p><p>也可以通过node进行安装</p><p>SPlayer项目地址：<ahref="https://github.com/imsyy/SPlayer">imsyy/SPlayer: 🎉一个简约的在线音乐播放器，支持网易云音乐账号登录，逐字歌词，下载歌曲，展示评论区，音乐频谱，音乐云盘及歌单管理，移动端基础适配(github.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn install<br>yarn build<br></code></pre></td></tr></table></figure><p>构建完成后可将生成的 <code>dist</code> 文件夹内的文件上传至服务器</p><figure><img src="http://imgbed.leiting2020.top//img/202306012056341.png"alt="image-20230601205147355" /><figcaption aria-hidden="true">image-20230601205147355</figcaption></figure><h4 id="api-服务必需">2、API 服务（必需）</h4><blockquote><p>SPlayer依赖 <ahref="https://github.com/Binaryify/NeteaseCloudMusicApi">NeteaseCloudMusicApi</a>运行，请确保您已成功部署该项目</p></blockquote><p>NeteaseCloudMusicApi项目地址：<ahref="https://github.com/Binaryify/NeteaseCloudMusicApi">Binaryify/NeteaseCloudMusicApi:网易云音乐 Node.js API service (github.com)</a></p><p>Vercel 部署地址：<ahref="https://music-api.leitingtool.cf/">网易云音乐 API(leitingtool.cf)</a></p><h5 id="vercel-部署">Vercel 部署</h5><ol type="1"><li>fork 此项目</li><li>在 Vercel 官网点击 <code>New Project</code></li><li>点击 <code>Import Git Repository</code> 并选择你 fork的此项目并点击<code>import</code></li><li>点击 <code>PERSONAL ACCOUNT</code> 的 <code>select</code></li><li>直接点<code>Continue</code></li><li><code>PROJECT NAME</code>自己填,<code>FRAMEWORK PRESET</code> 选<code>Other</code> 然后直接点 <code>Deploy</code> 接着等部署完成</li><li>绑定自定义域名即可</li></ol><p>部署成功后，网站如图所示</p><figure><img src="http://imgbed.leiting2020.top//img/202306012105609.png"alt="image-20230601210542549" /><figcaption aria-hidden="true">image-20230601210542549</figcaption></figure><h4 id="配置">3、配置</h4><p>在根目录下的 <code>.env</code> 文件中的 <code>VITE_MUSIC_API</code>中填入 API 地址（必需）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局 API 地址</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 需部署 API，详见 https://github.com/Binaryify/NeteaseCloudMusicApi</span></span><br>VITE_MUSIC_API = &quot;https://music-api.leitingtool.cf&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">网易云解灰 API 地址（可选功能）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 需部署 API，详见 https://github.com/imsyy/UNM-Server#%E8%BF%90%E8%A1%8C</span></span><br>VITE_UNM_API = &quot;https://api-unm.imsyy.top/&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">站点标题</span><br>VITE_SITE_TITLE = &quot;SPlayer&quot;<br>VITE_SITE_ANTHOR = &quot;阿雷&quot;<br>VITE_SITE_KEYWORDS = &quot;SPlayer,云音乐,播放器,在线音乐,在线播放器,音乐播放器,在线音乐播放器&quot;<br>VITE_SITE_DES = &quot;一个简约的在线音乐播放器，具有音乐搜索、播放、每日推荐、私人FM、歌词显示、歌曲评论、网易云登录与云盘等功能&quot;<br>VITE_SITE_URL = &quot;leiting2020.top&quot;<br>VITE_SITE_LOGO = &quot;/images/logo/favicon.svg&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">百度统计（若不需要，请设为空即可）</span><br>VITE_SITE_BAIDUTONGJI = &quot;c6579e9a33cbc5260fc90231678556ec&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ICP 备案号</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 若不需要，请设为空即可</span></span><br>VITE_ICP = &quot;湘ICP备2021004011号-1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">公告配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 若无需公告，请将任意一项设为空即可</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 公告标题</span></span><br>VITE_ANN_TITLE = &quot;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 公告内容</span></span><br>VITE_ANN_CONTENT = &quot;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 公告时长（毫秒）不可超过 999999</span></span><br>VITE_ANN_DURATION = 3000<br></code></pre></td></tr></table></figure><h3 id="起始页">起始页</h3><p>项目地址：<ahref="https://github.com/imsyy/Snavigation">imsyy/Snavigation:【待重构】Snavigation 一个简约的起始页 |支持自定义搜索引擎，自定义快捷方式，自定义壁纸以及数据备份(github.com)</a></p><p>直接在宝塔中创建网站，将项目文件git clone到网站根目录下即可。</p><blockquote><p>目前还未对界面配置进行修改</p></blockquote><p>起始页网址：<ahref="https://nav.leiting2020.top/">Snavigation</a></p><figure><img src="http://imgbed.leiting2020.top//img/202306012114208.png"alt="image-20230601211401563" /><figcaption aria-hidden="true">image-20230601211401563</figcaption></figure><h3 id="网址集">网址集</h3><p>项目地址：<a href="https://github.com/imsyy/OneNav">imsyy/OneNav:OneNav 一个网址导航 | 基于 WebStackPage (github.com)</a></p><p>直接在宝塔中创建网站，将项目文件git clone到网站根目录下即可。</p><blockquote><p>目前还未对界面配置进行修改</p></blockquote><p>起始页网址：<a href="https://nav.leiting2020.top/">[一个导航 -OneNav](https://web.leiting2020.top/)</a></p><figure><img src="http://imgbed.leiting2020.top//img/202306012117967.png"alt="image-20230601211720826" /><figcaption aria-hidden="true">image-20230601211720826</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>导航页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown公式</title>
    <link href="/2023/07/08/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/typora%E5%85%AC%E5%BC%8F/"/>
    <url>/2023/07/08/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/typora%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown公式">Markdown公式</h1><h2 id="公式块">1.公式块</h2><ul><li><strong>创建独立的一块公式区域</strong>。</li></ul><p><strong>方法一</strong>：左上角点击“段落”，再点击“公式块”</p><p><strong>方法二</strong>：在文中输入$$，再按下回车</p><h3 id="行内公式">2.行内公式</h3><ul><li><strong>将公式嵌入文字内</strong>。</li></ul><p><strong>方法一</strong>： 在$$的中间加入需要的公式</p><p><strong>简便的方法一</strong>：先按 $ ，再按 “esc”（键盘左上角）</p><p>（行内公式是需要先设置一下）</p><hr /><h2 id="基本格式">基本格式</h2><h3 id="上下标"><strong>1.上下标</strong></h3><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>A<span class="hljs-emphasis">_1^2</span><br><span class="hljs-emphasis">\\</span><br><span class="hljs-emphasis">B_</span>&#123;12&#125;<br>\\<br>2^&#123;x^2+y&#125;<br>$$<br></code></pre></td></tr></table></figure></blockquote><p><span class="math display">\[A_1^2\\B_{12}\\2^{x^2+y}\]</span></p><h3 id="分数"><strong>2.分数</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\frac&#123;x&#125;&#123;1+x^2&#125;<br>\\<br>\frac&#123;\frac&#123;1&#125;&#123;2&#125;+x&#125;&#123;y&#125;<br>\\<br>\tfrac&#123;a&#125;&#123;b&#125;<br>\frac&#123;a&#125;&#123;b&#125;<br>$$<br></code></pre></td></tr></table></figure><p><span class="math display">\[\frac{x}{1+x^2}\\\frac{\frac{1}{2}+x}{y}\\\tfrac{a}{b}\frac{a}{b}\]</span></p><h3 id="开根号取模">3.开根号，取模</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\sqrt&#123;x&#125;<br>\sqrt[3]&#123;x&#125;<br>\\<br>x \pmod a<br>\\<br>2\mod&#123;x&#125;<br>$$<br></code></pre></td></tr></table></figure><p><span class="math display">\[\sqrt{x}\sqrt[3]{x}\\x \pmod a\\2\mod{x}\]</span></p><h3 id="组合数">4<strong>.组合数</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\binom&#123;n&#125;&#123;k&#125;<br>\tbinom&#123;n&#125;&#123;k&#125;<br>$$<br></code></pre></td></tr></table></figure><p><span class="math display">\[\binom{n}{k}\tbinom{n}{k}\]</span></p><h3id="导数偏微分积分累加累乘极限"><strong>5.导数、偏微分、积分</strong>、累加/累乘/极限</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>$$ a' a'' a^{} \ \</p><p>\ <em>{1}^{2} </em>{2}^{1} \ </p><p>$$</p><h3 id="积分">7.积分</h3><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/10/202201102301306.png"alt="image-20220110224954602" /><figcaption aria-hidden="true">image-20220110224954602</figcaption></figure><h3 id="求导">8.求导</h3><h4 id="求导-1">(1）求导</h4><p><span class="math display">\[\frac{df(\theta)}{d\theta}\]</span></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br>\<span class="hljs-built_in">frac</span>&#123;df(\theta)&#125;&#123;d\theta&#125;<br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><h4 id="求偏导">(2) 求偏导</h4><p><span class="math display">\[\frac {\partial Loss } {\partial C }\]</span></p><hr /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br>\<span class="hljs-built_in">frac</span> &#123;\partial Loss &#125; &#123;\partial C &#125;<br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><h2 id="矩阵"><strong>矩阵</strong></h2><h3 id="简单矩阵"><strong>1.简单矩阵</strong></h3><p>使用<code>\begin&#123;matrix&#125;…\end&#123;matrix&#125;</code>生成，每一行以<code>\\</code>结尾表示换行，元素间以<code>&amp;</code>间隔，式子的表示序号<code>\tag&#123;1&#125;</code>（右边的序号）。</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\begin%7Bmatrix%7D++1+%26+2+%26+3+\++4+%26+5+%26+6+\++7+%26+8+%26+9++\end%7Bmatrix%7D+\tag%7B1%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text"> $$<br>\begin&#123;matrix&#125;<br> 1 &amp; 2 &amp; 3 \\<br> 4 &amp; 5 &amp; 6 \\<br> 7 &amp; 8 &amp; 9 <br>\end&#123;matrix&#125; \tag&#123;1&#125;<br>$$<br></code></pre></td></tr></table></figure><h3id="带左右括号的矩阵大中小括号"><strong>2.带左右括号的矩阵(大中小括号)</strong></h3><p><strong>方法一</strong>：在<code>\begin&#123;&#125;</code>之前和<code>\end&#123;&#125;</code>之后添加左右括号的代码。</p><p>大括号：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\left%7B++\begin%7Bmatrix%7D++++1+%26+2+%26+3+\++++4+%26+5+%26+6+\++++7+%26+8+%26+9+++\end%7Bmatrix%7D+++\right%7D+\tag%7B2%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \left\&#123;<br> \begin&#123;matrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;matrix&#125;<br>  \right\&#125; \tag&#123;2&#125;<br>$$<br></code></pre></td></tr></table></figure><p>中括号：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\left%5B++\begin%7Bmatrix%7D++++1+%26+2+%26+3+\++++4+%26+5+%26+6+\++++7+%26+8+%26+9+++\end%7Bmatrix%7D+++\right%5D+\tag%7B3%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \left[<br> \begin&#123;matrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;matrix&#125;<br>  \right] \tag&#123;3&#125;<br>$$<br></code></pre></td></tr></table></figure><p>小括号：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\left(++\begin%7Bmatrix%7D++++1+%26+2+%26+3+\++++4+%26+5+%26+6+\++++7+%26+8+%26+9+++\end%7Bmatrix%7D+++\right)+\tag%7B4%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \left(<br> \begin&#123;matrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;matrix&#125;<br>  \right) \tag&#123;4&#125;<br>$$<br></code></pre></td></tr></table></figure><p><strong>方法二</strong>：改变<code>\begin&#123;matrix&#125;</code>和<code>\end&#123;matrix&#125;</code>中<code>&#123;matrix&#125;</code></p><p>大括号：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\begin%7BBmatrix%7D++++1+%26+2+%26+3+\++++4+%26+5+%26+6+\++++7+%26+8+%26+9+++\end%7BBmatrix%7D+\tag%7B5%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \begin&#123;Bmatrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;Bmatrix&#125; \tag&#123;6&#125;<br>$$<br></code></pre></td></tr></table></figure><p>中括号：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\begin%7Bbmatrix%7D++++1+%26+2+%26+3+\++++4+%26+5+%26+6+\++++7+%26+8+%26+9+++\end%7Bbmatrix%7D+\tag%7B6%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \begin&#123;bmatrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;bmatrix&#125; \tag&#123;6&#125;<br>$$<br></code></pre></td></tr></table></figure><h3id="包含希腊字母与省略号"><strong>3.包含希腊字母与省略号</strong></h3><p>行省略号<code>\cdots</code>，列省略号<code>\vdots</code>，斜向省略号（左上至右下）<code>\ddots</code>。</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\left%7B++\begin%7Bmatrix%7D++1++++++%26+2++++++++%26+\cdots+%26+5++++++++\++6++++++%26+7++++++++%26+\cdots+%26+10+++++++\++\vdots+%26+\vdots+++%26+\ddots+%26+\vdots+++\++\alpha+%26+\alpha%2B1+%26+\cdots+%26+\alpha%2B4+++\end%7Bmatrix%7D++\right%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \left\&#123;<br> \begin&#123;matrix&#125;<br> 1      &amp; 2        &amp; \cdots &amp; 5        \\<br> 6      &amp; 7        &amp; \cdots &amp; 10       \\<br> \vdots &amp; \vdots   &amp; \ddots &amp; \vdots   \\<br> \alpha &amp; \alpha+1 &amp; \cdots &amp; \alpha+4 <br> \end&#123;matrix&#125;<br> \right\&#125;<br>$$<br></code></pre></td></tr></table></figure><hr /><h2 id="公式序号">公式序号</h2><p>见“矩阵”小节，代码最后的一行即表示右端序号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">......<br>\tag&#123;6&#125;<br></code></pre></td></tr></table></figure><h2 id="行列式">行列式</h2><p>行列式相关语法与矩阵类似 <span class="math display">\[\begin{vmatrix}   1 &amp; 2 &amp; 3 \\   4 &amp; 5 &amp; 6 \\   7 &amp; 8 &amp; 9  \end{vmatrix}\tag{7}\]</span></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br> \begin&#123;vmatrix&#125;<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>  \end&#123;vmatrix&#125;<br>\tag&#123;7&#125;<br>$$<br></code></pre></td></tr></table></figure><hr /><h2 id="表格">表格</h2><h3 id="简易表格"><strong>1.简易表格</strong></h3><figure><imgsrc="https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7B%7Cc%7Cc%7Cc%7C%7D+%09%5Chline+2%269%264%5C%5C+%09%5Chline+7%265%263%5C%5C+%09%5Chline+6%261%268%5C%5C+%09%5Chline+%5Cend%7Barray%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>\begin&#123;array&#125;&#123;|c|c|c|&#125;<br>\hline 2&amp;9&amp;4\\<br>\hline 7&amp;5&amp;3\\<br>\hline 6&amp;1&amp;8\\<br>\hline<br>\end&#123;array&#125;<br>$$<br></code></pre></td></tr></table></figure><p><strong>开头结尾</strong>： <code>\begin&#123;array&#125;</code> ，<code>\end&#123;array&#125;</code></p><p><strong>定义式</strong>：例：<code>&#123;|c|c|c|&#125;</code>，其中<code>c</code><code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐。</p><p><strong>分割线</strong>：①<strong>竖直分割线</strong>：在定义式中插入<code>|</code>， （<code>||</code>表示两条竖直分割线）。</p><p>②<strong>水平分割线</strong>：在下一行输入前插入<code>\hline</code>，以下图真值表为例。</p><p>其他：每行元素间均须要插入 <code>&amp;</code> ，每行元素以<code>\\</code> 结尾。</p><h3 id="真值表"><strong>2..真值表</strong></h3><figure><imgsrc="https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bcc%7Cc%7D+%09+++++++A%26B%26F%5C%5C+%09%5Chline+0%260%260%5C%5C+%09+++++++0%261%261%5C%5C+%09+++++++1%260%261%5C%5C+%09+++++++1%261%261%5C%5C+%5Cend%7Barray%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>\begin&#123;array&#125;&#123;cc|c&#125;<br>       A&amp;B&amp;F\\<br>\hline 0&amp;0&amp;0\\<br>       0&amp;1&amp;1\\<br>       1&amp;0&amp;1\\<br>       1&amp;1&amp;1\\<br>\end&#123;array&#125;<br>$$<br></code></pre></td></tr></table></figure><hr /><h2 id="多行等式对齐"><strong>多行等式对齐</strong></h2><figure><imgsrc="https://www.zhihu.com/equation?tex=\begin%7Baligned%7D+a+%26%3D+b+%2B+c+\+++%26%3D+d+%2B+e+%2B+f+\end%7Baligned%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>\begin&#123;aligned&#125;<br>a &amp;= b + c \\<br>  &amp;= d + e + f<br>\end&#123;aligned&#125;<br>$$<br></code></pre></td></tr></table></figure><h2 id="方程组条件表达式"><strong>方程组、条件表达式</strong></h2><p>方程组：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=\begin%7Bcases%7D+3x+%2B+5y+%2B++z+\+7x+-+2y+%2B+4z+\+-6x+%2B+3y+%2B+2z+\end%7Bcases%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>\begin&#123;cases&#125;<br>3x + 5y +  z \\<br>7x - 2y + 4z \\<br>-6x + 3y + 2z<br>\end&#123;cases&#125;<br>$$<br></code></pre></td></tr></table></figure><p>同理，条件表达式：</p><figure><imgsrc="https://www.zhihu.com/equation?tex=f(n)+%3D+\begin%7Bcases%7D++n%2F2%2C++%26+\text%7Bif+%7Dn\text%7B+is+even%7D+\+3n%2B1%2C+%26+\text%7Bif+%7Dn\text%7B+is+odd%7D+\end%7Bcases%7D"alt="[公式]" /><figcaption aria-hidden="true">[公式]</figcaption></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>f(n) =<br>\begin&#123;cases&#125; <br>n/2,  &amp; \text&#123;if &#125;n\text&#123; is even&#125; \\<br>3n+1, &amp; \text&#123;if &#125;n\text&#123; is odd&#125;<br>\end&#123;cases&#125;<br>$$<br></code></pre></td></tr></table></figure><hr /><h2 id="间隔-大小空格紧贴"><strong>间隔 (大小空格、紧贴)</strong></h2><p><strong>紧贴 + 无空格 + 小空格 + 中空格 + 大空格 + 真空格 +双真空格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">$$<br>a\!b + ab + a\,b + a\;b + a\ b + a\quad b + a\qquad b<br>$$<br></code></pre></td></tr></table></figure><p>紧贴<code>\!</code></p><p>无空格 小空格<code>\,</code> 中空格<code>\;</code>大空格<code>\</code></p><p>真空格<code>\quad</code> 双真空格<code>\qquad</code></p><hr /><h2 id="通过python生成latex表达式">通过Python生成LaTeX表达式</h2><h3id="step1安装latexify-py模块"><strong>step1：安装latexify-py模块</strong></h3><h3 id="step2编写代码"><strong>step2：编写代码</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python3">import math//引入数学模块(有些运算的函数需要)<br>import latexify//引入latexify模块<br><br>@latexify.with_latex//特定语法，表示之后定义的函数可以转化为LaTeX代码<br>def f(x,y,z):    //包含的参数<br>    pass   //此处填写可能需要的数学表达式<br>    return result//也可以直接体现数学关系<br><br>print(f)   //直接print(函数名)<br></code></pre></td></tr></table></figure><h3id="step3在输出区得到需要的latex数学表达式"><strong>step3：在输出区得到需要的LaTeX数学表达式</strong></h3><p><strong>特别说明</strong>，生成的表达式为<strong>定义式</strong>，即，如果只需要等式，可以把生成表达式中的<code>\triangleq</code>改成<code>=</code> ！</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>公式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人学</title>
    <link href="/2023/07/08/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"/>
    <url>/2023/07/08/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="一机器人学">一、机器人学</h1><h2 id="空间形位与齐次变换">1.1 空间形位与齐次变换</h2><p>机器人在空间的位姿通常有两种表达方式，一种是在笛卡尔空间表示，通过在世界坐标系和机器人末端上建立坐标系，使用笛卡尔坐标描述机器人的位姿；另一种是通过关节空间表示，使用机器人六个关节的角度来描述机器人的形位。</p><figure><img src="http://imgbed.leiting2020.top//img/202306021438479.png"alt="image-20230602143835217" /><figcaption aria-hidden="true">image-20230602143835217</figcaption></figure><p>KUKAKR60-3机器人的姿态通常使用笛卡尔坐标进行控制，机器人基坐标系为<em>XB-YB-ZB</em>，在机器人刀尖上建立工具坐标系<em>XT-YT-ZT</em>，则末端工具在基坐标系中的位姿就可以用<em>XT-YT-ZT</em>相对于<em>XB-YB-ZB</em>的位姿描述。工具坐标系在基坐标系的位姿关系可以用一个的齐次变换矩阵<strong><em>T</em></strong>表示: <spanclass="math display">\[\boldsymbol{T}=\left[\begin{matrix}    \boldsymbol{R}&amp;     \boldsymbol{P}\\    0&amp;      1\\\end{matrix}\right] =\left[\begin{matrix}  \begin{matrix}  r_{11}&amp;     r_{12}\\    r_{21}&amp;     r_{22}\\\end{matrix}&amp;       \begin{matrix}  r_{13}&amp;     p_x\\   r_{23}&amp;     p_y\\\end{matrix}\\\begin{matrix}  r_{31}&amp;     r_{32}\\    0&amp;      0\\\end{matrix}&amp;        \begin{matrix}  r_{33}&amp;     p_z\\   0&amp;      1\\\end{matrix}\\\end{matrix}\right]\]</span></p><h2 id="机器人运动学建模">1.2机器人运动学建模</h2><h3 id="基于旋量法的运动学建模">1.2.1 基于旋量法的运动学建模</h3><p>KUKAKR60-3结构简图如图所示，<em>XB-YB-ZB</em>为基坐标系，<em>XT-YT-ZT</em>为末端工具坐标系，<em>L</em>1~<em>L</em>6为机器人的结构参数，<spanclass="math inline">\(\boldsymbol{\xi }_1 - \boldsymbol{\xi }_6\)</span>分别为六个关节的旋量坐标，<em>r</em>1<em>~r</em>6分别为关节轴线上任意一点，其中<em>r</em>4<em>、r</em>5<em>、r</em>6为同一点，即后三关节轴线交点。</p><figure><img src="http://imgbed.leiting2020.top//img/202306021445104.png"alt="image-20230602144531023" /><figcaption aria-hidden="true">image-20230602144531023</figcaption></figure><p>在旋量理论中，刚体在笛卡尔空间中的运动速度由角速度<spanclass="math inline">\(\omega\)</span>和线速度<spanclass="math inline">\(v\)</span>组成，这个向量被称为运动旋量，把运动旋量写成螺旋轴S与绕该转轴速度的合成形式，即：<span class="math display">\[\boldsymbol{\xi }=\left[ \begin{array}{c}    \boldsymbol{\omega}\\  \boldsymbol{v}\\\end{array} \right] =\left[\begin{array}{c}  \boldsymbol{\omega }\\  -\boldsymbol{\omega }\times\boldsymbol{q}+h\boldsymbol{\omega }\\\end{array} \right]\]</span>对于纯转动关节，机器人上一点的形位的变换可以由指数坐标$$表示，也可以将其写为4×4的齐次变换矩阵形式：</p><p>​<br /><span class="math display">\[\boldsymbol{T}=e^{\left[ \boldsymbol{\xi } \right] \theta}=\left[\begin{matrix}    e^{\left[ \boldsymbol{\omega } \right]\theta}&amp;     \left( \boldsymbol{I}\theta +\left( 1-\cos \!\:\theta\right) \left[ \boldsymbol{\omega } \right] +(\theta -\sin \!\:\theta)\left[ \boldsymbol{\omega } \right] ^2 \right)\boldsymbol{v}\\    0&amp;      1\\\end{matrix} \right]\]</span></p><p><span class="math display">\[e^{\left[ \boldsymbol{\omega } \right] \theta}=\mathrm{R}\left(\boldsymbol{\omega },\mathrm{\theta} \right) =\mathrm{I}+\left[\boldsymbol{\omega } \right] \sin \!\:\mathrm{\theta}+\left[\boldsymbol{\omega } \right] ^2(1-\cos \!\:\theta )\]</span></p><p>由机器人的结构参数可以得到机器人的旋量参数，如表所示。</p><table><thead><tr class="header"><th style="text-align: center;"><spanclass="math inline">\(i\)</span></th><th style="text-align: center;"><spanclass="math inline">\(\omega_i\)</span></th><th style="text-align: center;"><spanclass="math inline">\(q_i\)</span></th><th style="text-align: center;"><spanclass="math inline">\(v_i\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">[0,0,-1]</td><td style="text-align: center;">[0,0,0]</td><td style="text-align: center;">[0,0,0]</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">[0,1,0]</td><td style="text-align: center;">[350,0,815]</td><td style="text-align: center;">[-815,0,350]</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">[0,1,0]</td><td style="text-align: center;">[1200,0,815]</td><td style="text-align: center;">[-815,0,1200]</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">[-1,0,0]</td><td style="text-align: center;">[2020,0,960]</td><td style="text-align: center;">[0,-960,0]</td></tr><tr class="odd"><td style="text-align: center;">5</td><td style="text-align: center;">[0,1,0]</td><td style="text-align: center;">[2020,0,960]</td><td style="text-align: center;">[-960,0,2020]</td></tr><tr class="even"><td style="text-align: center;">6</td><td style="text-align: center;">[-1,0,0]</td><td style="text-align: center;">[2020,0,960]</td><td style="text-align: center;">[0,-960,0]</td></tr></tbody></table><p>在KUKAKR60-3工业机器人中，每个连杆通过关节的螺旋运动施加运动给后面的连杆。末端坐标系经由6个关节串联的运动链，做多次螺旋运动，从初始位姿<strong><em>M</em></strong>变换到当前位姿<strong><em>T</em></strong>。在确定基坐标系和机器人初始位姿后，在完成指定的关节运动后，可以通过正向运动学表达式表示机械臂的末端坐标系：<span class="math display">\[\boldsymbol{T}=e^{\left[ \boldsymbol{\xi }_1 \right] \theta _1}e^{\left[\boldsymbol{\xi }_2 \right] \theta _2}\cdots e^{\left[ \boldsymbol{\xi}_6 \right] \theta _6}\boldsymbol{M}\]</span></p><h3 id="正运动学代码实现">1.2.2 正运动学代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Normalizes a vector</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Normalize</span>(<span class="hljs-params">V</span>):<br>    <span class="hljs-keyword">return</span> V / np.linalg.norm(V)<br><br><span class="hljs-comment">#Converts an so(3) representation to a 3-vector</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">so3ToVec</span>(<span class="hljs-params">so3mat</span>):<br>    <span class="hljs-keyword">return</span> np.array([so3mat[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], so3mat[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>], so3mat[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]])<br><br><span class="hljs-comment">#Converts a spatial velocity vector into a 4x4 matrix in se3</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">VecTose3</span>(<span class="hljs-params">V</span>):    <br>    <span class="hljs-keyword">return</span> np.r_[np.c_[VecToso3([V[<span class="hljs-number">0</span>], V[<span class="hljs-number">1</span>], V[<span class="hljs-number">2</span>]]), [V[<span class="hljs-number">3</span>], V[<span class="hljs-number">4</span>], V[<span class="hljs-number">5</span>]]],<br>                 np.zeros((<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))]<br>    <br><span class="hljs-comment">#Converts a 3-vector of exponential coordinates for rotation into axis-angle form</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AxisAng3</span>(<span class="hljs-params">expc3</span>):<br>    <span class="hljs-keyword">return</span> (Normalize(expc3), np.linalg.norm(expc3))<br><br><span class="hljs-comment">#Computes the matrix exponential of a matrix in so(3)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MatrixExp3</span>(<span class="hljs-params">so3mat</span>):   <br>    omgtheta = so3ToVec(so3mat)<br>    <span class="hljs-keyword">if</span> NearZero(np.linalg.norm(omgtheta)):<br>        <span class="hljs-keyword">return</span> np.eye(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">else</span>:<br>        theta = AxisAng3(omgtheta)[<span class="hljs-number">1</span>]<br>        omgmat = so3mat / theta<br>        <span class="hljs-keyword">return</span> np.eye(<span class="hljs-number">3</span>) + np.sin(theta) * omgmat \<br>               + (<span class="hljs-number">1</span> - np.cos(theta)) * np.dot(omgmat, omgmat)<br>    <br><span class="hljs-comment">#Computes the matrix exponential of an se3 representation of exponential coordinates</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MatrixExp6</span>(<span class="hljs-params">se3mat</span>):<br>    se3mat = np.array(se3mat)<br>    omgtheta = so3ToVec(se3mat[<span class="hljs-number">0</span>: <span class="hljs-number">3</span>, <span class="hljs-number">0</span>: <span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">if</span> NearZero(np.linalg.norm(omgtheta)):<br>        <span class="hljs-keyword">return</span> np.r_[np.c_[np.eye(<span class="hljs-number">3</span>), se3mat[<span class="hljs-number">0</span>: <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]], [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]]<br>    <span class="hljs-keyword">else</span>:<br>        theta = AxisAng3(omgtheta)[<span class="hljs-number">1</span>]<br>        omgmat = se3mat[<span class="hljs-number">0</span>: <span class="hljs-number">3</span>, <span class="hljs-number">0</span>: <span class="hljs-number">3</span>] / theta<br>        <span class="hljs-keyword">return</span> np.r_[np.c_[MatrixExp3(se3mat[<span class="hljs-number">0</span>: <span class="hljs-number">3</span>, <span class="hljs-number">0</span>: <span class="hljs-number">3</span>]),<br>                           np.dot(np.eye(<span class="hljs-number">3</span>) * theta \<br>                                  + (<span class="hljs-number">1</span> - np.cos(theta)) * omgmat \<br>                                  + (theta - np.sin(theta)) \<br>                                    * np.dot(omgmat,omgmat),<br>                                  se3mat[<span class="hljs-number">0</span>: <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]) / theta],<br>                     [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]]<br><span class="hljs-comment">#空间坐标系下位姿计算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FKinBody</span>(<span class="hljs-params">M, Blist, thetalist</span>):<br>    T = np.array(M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(thetalist)):<br>        T = np.dot(T, MatrixExp6(VecTose3(np.array(Blist)[:, i] \<br>                                          * thetalist[i])))<br>    <span class="hljs-keyword">return</span> T<br><span class="hljs-comment">#末端坐标系下位姿计算</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FKinSpace</span>(<span class="hljs-params">M, Slist, thetalist</span>):<br>    T = np.array(M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(thetalist) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        T = np.dot(MatrixExp6(VecTose3(np.array(Slist)[:, i] \<br>                                       * thetalist[i])), T)<br>    <span class="hljs-keyword">return</span> T<br><span class="hljs-comment">#旋量坐标</span><br>Slist=np.array([[   <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,   -<span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,   -<span class="hljs-number">1</span>],<br> [   <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">0</span>],<br>[  -<span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>],<br> [   <span class="hljs-number">0</span>, -<span class="hljs-number">815</span>, -<span class="hljs-number">815</span>,    <span class="hljs-number">0</span>, -<span class="hljs-number">960</span>,    <span class="hljs-number">0</span>],<br> [   <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>, -<span class="hljs-number">960</span>,    <span class="hljs-number">0</span>, -<span class="hljs-number">960</span>],<br> [   <span class="hljs-number">0</span>,  <span class="hljs-number">350</span>, <span class="hljs-number">1200</span>,    <span class="hljs-number">0</span>, <span class="hljs-number">2020</span>,    <span class="hljs-number">0</span>]])<br><span class="hljs-comment">#法兰相对于基座标系姿态</span><br>M=np.array([[ <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,  <span class="hljs-number">2190</span>],<br>            [ <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>],<br>            [-<span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,   <span class="hljs-number">960</span>],<br>            [ <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,     <span class="hljs-number">1</span>]])<br><span class="hljs-comment">#关节角</span><br>thetalist=np.array([<span class="hljs-number">0</span>,-<span class="hljs-number">90</span>/<span class="hljs-number">180</span>*pi,<span class="hljs-number">90</span>/<span class="hljs-number">180</span>*pi,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br><span class="hljs-comment">#末端位姿计算</span><br>T = FKinSpace(M,Slist,thetalist)<br></code></pre></td></tr></table></figure><h2 id="基于旋量法的逆运动学求解">1.3 基于旋量法的逆运动学求解</h2><h4 id="pk子问题">1.3.1 PK子问题</h4><p>对于六自由度串联机器人而言，逆运动学可以描述成：已知机器人末端工具坐标系位姿，求解满足当前位姿的一组或多组关节角。由KR60-3机器人后三轴相交与一点的特性，利用Paden-Kahan子问题推导机器人关节逆解解析式。Paden-Kahan子问题是基于旋量理论的指数积公式求解各关节旋转角度的几何方法。基于旋量理论的运动学逆解可以分为三个Paden-Kahan子问题，分别是绕单轴旋转、绕两个轴旋转和旋转到给定距离，目前KR60-3的逆运动学求解中只用到了两类子问题，所以本文只介绍子问题1和子问题2，如图所示。</p><figure><img src="http://imgbed.leiting2020.top//img/202306032017628.png"alt="image-20230603201716446" /><figcaption aria-hidden="true">image-20230603201716446</figcaption></figure><p><code>PK子问题1</code>为一个点绕定轴旋转。描述为空间中一点<strong><em>p</em></strong>绕给定的轴线<spanclass="math inline">\(\boldsymbol{\xi}\)</span>旋转到<strong><em>q</em></strong>点位置，求解旋转角度<spanclass="math inline">\(\theta\)</span>，可用旋量法表示为 <spanclass="math display">\[e^{\left[ \boldsymbol{\xi } \right] \theta}\boldsymbol{p}=\boldsymbol{q}\]</span> 通过向量之间的几何关系，旋转角<spanclass="math inline">\(\theta\)</span>可以由以下公式计算： <spanclass="math display">\[\theta =\mathrm{a}\tan 2(\boldsymbol{\omega }^T\left(\boldsymbol{u}^{\mathrm{&#39;}}\times \boldsymbol{v}^{\mathrm{&#39;}}\right)\text{，}\boldsymbol{u}^{\mathrm{&#39;}}\boldsymbol{v}^{\mathrm{&#39;}})\]</span><code>PK子问题2</code>为一个点绕两个相交轴连续旋转。描述为空间中一点<strong><em>p</em></strong>，绕两相交轴<spanclass="math inline">\(\boldsymbol{\xi }_1\)</span>和<spanclass="math inline">\(\boldsymbol{\xi }_2\)</span>进行旋转，先将<strong><em>p</em></strong>点绕旋转轴<spanclass="math inline">\(\boldsymbol{\xi }_2\)</span>旋转<spanclass="math inline">\(\theta_2\)</span>运动到<strong><em>s</em></strong>点，然后再绕旋转轴<spanclass="math inline">\(\boldsymbol{\xi }_1\)</span>旋转<spanclass="math inline">\(\theta_1\)</span>运动到<strong><em>q</em></strong>点，<spanclass="math inline">\(\omega_1\)</span>和 <spanclass="math inline">\(\omega_2\)</span>分别为轴线<spanclass="math inline">\(\boldsymbol{\xi }_1\)</span>和<spanclass="math inline">\(\boldsymbol{\xi }_2\)</span> 的方向向量。设<spanclass="math inline">\(\boldsymbol{u}=\boldsymbol{p}-\boldsymbol{r}\)</span>，<spanclass="math inline">\(\boldsymbol{v}=\boldsymbol{q}-\boldsymbol{r}\)</span>，<spanclass="math inline">\(\boldsymbol{z}=\boldsymbol{s}-\boldsymbol{r}\)</span>，用公式表示为：<span class="math display">\[e^{\left[ \boldsymbol{\xi }_1 \right] \theta_1}\boldsymbol{u}=\boldsymbol{z}=e^{-\left[ \boldsymbol{\xi }_2 \right]\theta _2}\boldsymbol{v}\]</span>若两个旋转轴重合，问题就变成了PK子问题1，若两个旋转轴不重合，可通过几何关系求解出中间点<strong><em>z</em></strong>，将子问题2分解为两个子问题1进行求解。<span class="math display">\[\begin{cases}   \boldsymbol{z}=a\boldsymbol{\omega}_1+b\boldsymbol{\omega }_2+c\left( \boldsymbol{\omega }_1\times\boldsymbol{\omega }_2 \right)\\    a=\frac{\left( \boldsymbol{\omega}_{1}^{T}\boldsymbol{\omega }_2 \right) \boldsymbol{\omega}_{2}^{T}\boldsymbol{u}-\boldsymbol{\omega}_{1}^{T}\boldsymbol{v}}{\left( \boldsymbol{\omega}_{1}^{T}\boldsymbol{\omega }_2 \right) ^2-1}\\  b=\frac{\left(\boldsymbol{\omega }_{1}^{T}\boldsymbol{\omega }_2 \right)\boldsymbol{\omega }_{1}^{T}\boldsymbol{v}-\boldsymbol{\omega}_{2}^{T}\boldsymbol{u}}{\left( \boldsymbol{\omega}_{1}^{T}\boldsymbol{\omega }_2 \right) ^2-1}\\  c=\frac{\left\|\boldsymbol{u} \right\| ^2-a^2-b^2-2ab\boldsymbol{\omega}_{1}^{T}\boldsymbol{\omega }_2}{\left\| \boldsymbol{\omega }_1\times\boldsymbol{\omega }_2 \right\| ^2}\\\end{cases}\]</span></p><h4 id="kuka-kr60-3逆运动学求解">1.3.2 KUKA KR60-3逆运动学求解</h4><p>由螺旋理论可知，位于螺旋轴上的点<spanclass="math inline">\(\boldsymbol{q}\)</span>不会受到螺旋运动的影响，即<spanclass="math inline">\(e^{[\boldsymbol{\xi}]\theta}\boldsymbol{q}=\boldsymbol{q}\)</span>。由KR60-3机器人结构简图可知，4、5、6关节轴线相交于同一点<spanclass="math inline">\(\boldsymbol{q}_4\)</span>，在正运动学公式中右乘<spanclass="math inline">\(\boldsymbol{q}_4\)</span>，就可以消除正运动学公式中4、5、6关节的影响，将6个关节的逆运动学求解分为两部分进行。<span class="math display">\[\boldsymbol{TM}^{-1}\boldsymbol{q}_6=e^{\left[ \boldsymbol{\xi }_1\right] \theta _1}e^{\left[ \boldsymbol{\xi }_2 \right] \theta _2}\cdotse^{\left[ \boldsymbol{\xi }_6 \right] \theta_6}\boldsymbol{q}_4=e^{\left[ \boldsymbol{\xi }_1 \right] \theta_1}e^{\left[ \boldsymbol{\xi }_2 \right] \theta _2}e^{\left[\boldsymbol{\xi }_3 \right] \theta _3}\boldsymbol{q}_4=[p_x,p_y,p_z,1]\]</span> 上式表示腕部中心点<spanclass="math inline">\(\boldsymbol{q}_4\)</span>在前三关节中螺旋运动，指<spanclass="math inline">\(\boldsymbol{q}_4\)</span>经过前三个关节的运动到达<spanclass="math inline">\(\boldsymbol{p}_1\)</span>。由此可使用Paden-Kahan子问题1，对前3个关节逐一进行求解。基于几何法，使用PK子问题1即可求解出前三个关节的关节角，得到：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072327294.png"alt="image-20230707232740162" /><figcaption aria-hidden="true">image-20230707232740162</figcaption></figure><p>其中，上述公式中<span class="math inline">\(y_2\)</span>、<spanclass="math inline">\(x_2\)</span>、<spanclass="math inline">\(y_{3}\)</span>和<spanclass="math inline">\(x_3\)</span>的表达式如下：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072329798.png"alt="image-20230707232906739" /><figcaption aria-hidden="true">image-20230707232906739</figcaption></figure><p>在得到前三个关节的关节角后，将上一步求取的前三个关节带入公式(2-10)中，然后在原公式中取在轴6上但不在4、5轴上一点进行解耦，即可消除第六轴的影响，将后三轴转换为一个子问题2和一个子问题1进行求解，在公式两边同乘以在轴6上但不在4、5轴上一点<spanclass="math inline">\(\boldsymbol{p}_6=[L_4+L_5,0,0]\)</span>。 <spanclass="math display">\[e^{-\left[ \boldsymbol{\xi }_3 \right] \theta _3}e^{-\left[\boldsymbol{\xi }_2 \right] \theta _2}e^{-\left[ \boldsymbol{\xi }_1\right] \theta _1}\boldsymbol{TM}^{-1}\boldsymbol{p}_6=e^{\left[\boldsymbol{\xi }_4 \right] \theta _4}e^{\left[ \boldsymbol{\xi }_5\right] \theta _5}\boldsymbol{p}_6=\left[ q_{6x},q_{6y},q_{6z},1 \right]=\boldsymbol{q}_6\]</span> 上式可以看成一个子问题2，<spanclass="math inline">\(\boldsymbol{p}_6\)</span>绕后4、5关节连续旋转，经过中间点<spanclass="math inline">\(\boldsymbol{p}_5\)</span>，移动到<spanclass="math inline">\(\boldsymbol{q}_6\)</span>位置，4、5关节轴线交点为<spanclass="math inline">\(\boldsymbol{q}_4\)</span>。使用子问题2求解出中间点<spanclass="math inline">\(\boldsymbol{p}_5\)</span>即可将问题转换为两个子问题1，对关节5、6进行求解。在求出关节角<spanclass="math inline">\(\theta _4\)</span>、<spanclass="math inline">\(\theta_5\)</span>后，代入公式，并取关节6轴线外一点<spanclass="math inline">\(\boldsymbol{p}_7=[L_4+L_5+1,0,0]\)</span>，计算得到绕关节6旋转后的$_7=<spanclass="math inline">\(，根据旋量理论将公式进行解耦，即可求出关节角\)</span>_6<spanclass="math inline">\(，关节角\)</span>_4<spanclass="math inline">\(、\)</span>_5<spanclass="math inline">\(、\)</span>_6$表达式如下： <spanclass="math display">\[\begin{cases}  \theta _4=\mathrm{a}\tan 2\left( \pm q_{6y},\pm \left(q_{6y}-L_1-L_2-L_3 \right) \right)\\  \theta _5=\mathrm{a}\tan 2\left(\pm \sqrt{\left( L_1+L_2+L_3 \right) ^2-\left( q_{6x}-L_4-L_5 \right)^2},q_{6x}-L_4-L_5 \right)\\ \theta _6=\mathrm{a}\tan 2\left(q_{7y},L_1+L_2+L_3-q_{7z} \right)\\\end{cases}\]</span></p><h4 id="基于旋量法的逆运动学数值求解">1.3.3基于旋量法的逆运动学数值求解</h4><p>如果逆运动学方程无解析解时，可采用迭代数值方法求解。即使存在解析解,数值算法也经常用于改善求解的精度。</p><p>许多迭代方法可用于非线性方程的求解，’而是将运动学逆解方程转换成现有数值方法可解的形式。为此，将多次使用求解非线性方程的基本方法:牛顿-拉夫森法。此外，也将引入其他一些优化方法，以应对精确解不存在的情况，并利用这些方法得到最接近真实值的解或者相反情况，存在无穷多个运动学逆解（例如，运动学冗余情况）。为此，需要找到相对某种指标的最优解。因此，下面首先讨论用于求解非线性方程的<code>牛顿-拉夫森法</code>，接下来讨论优化第一必要条件。</p><h5 id="牛顿-拉夫森法">（1）牛顿-拉夫森法</h5><p>对于给定的微分方程方程<spanclass="math inline">\(g\)</span>，数值求解方程<spanclass="math inline">\(g(\theta)=0\)</span>，假设<spanclass="math inline">\(\theta^0\)</span>为初值，利用泰勒级数在<spanclass="math inline">\(\theta^0\)</span>处展开，并截取到第一项，得：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072331684.png"alt="image-20230707233137635" /><figcaption aria-hidden="true">image-20230707233137635</figcaption></figure><p>若只保留到第—阶，令<spanclass="math inline">\(g(\theta)=0\)</span>，求解<spanclass="math inline">\(\theta\)</span>得到：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072330966.png"alt="image-20230707233036914" /><figcaption aria-hidden="true">image-20230707233036914</figcaption></figure><p>再将上式求得的值作为初值，代人上述方程中，重复求解，得到下述方程：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072333083.png"alt="image-20230707233310039" /><figcaption aria-hidden="true">image-20230707233310039</figcaption></figure><p>上述过程不断迭代，直到满足某个指标值。例如，给定预先设定好的阂值满足：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072332993.png"alt="image-20230707233225946" /><figcaption aria-hidden="true">image-20230707233225946</figcaption></figure><p>对于KUKA KR60-3六自由度串联机器人，假设我们用坐标向量<spanclass="math inline">\(x\)</span>及其正向运动学方程<spanclass="math inline">\(x =f(\theta)\)</span>表示末端坐标，自然会得到一个从<spanclass="math inline">\(6\)</span>个关节坐标到<spanclass="math inline">\(6\)</span>个末端坐标的非线性向量方程。令<spanclass="math inline">\(x_d\)</span>为预期的末端坐标，牛顿-拉夫森法中的<spanclass="math inline">\(g(\theta)\)</span>可以定义成<spanclass="math inline">\(g(\theta)=x_d - f(\theta)\)</span>, 目标是找到关节坐标<span class="math inline">\(\theta_d\)</span>且保证： <spanclass="math display">\[g(\theta)=x_d - f(\theta)=0\]</span> 已知初始估计值<spanclass="math inline">\(\theta^0\)</span>接近真实解<spanclass="math inline">\(\theta_d\)</span>，运动学可以写成泰勒展开的形式，即：<span class="math display">\[x_d=f(\theta^0)+J(\theta^0)\Delta(\theta) + \mathrm{h.o.t}\]</span> 截取泰勒展开第一项，假设<spanclass="math inline">\(J(\theta^0)\)</span>可逆，使用下式求解<spanclass="math inline">\(\Delta\theta\)</span>，即： <spanclass="math display">\[\Delta\theta=J^{-1}(\theta^{0})(x_{d}-f(\theta^{0}))\]</span> 若正向运动学是<spanclass="math inline">\(\theta\)</span>的线性函数，这时新的估计值 <spanclass="math inline">\(\theta^0 = theta^0 +\Delta\theta\)</span>精确满足<spanclass="math inline">\(x_d=f(\theta^1)\)</span>。相反，若正向运动学是<spanclass="math inline">\(\theta\)</span>的非线性函数，就如通常情况,这时新的估计值<spanclass="math inline">\(\theta^1\)</span>比<spanclass="math inline">\(\theta^0\)</span>更接近真实值，迭代过程不断重复，最终在<spanclass="math inline">\(\theta_d\)</span>处收敛。</p><figure><img src="http://imgbed.leiting2020.top//img/202306041514035.png"alt="image-20230604151422884" /><figcaption aria-hidden="true">image-20230604151422884</figcaption></figure><h5 id="逆运动学的数值算法">（2）逆运动学的数值算法</h5><p>实际上，由于计算效率等原因，经常不采用求逆<spanclass="math inline">\(J^{-1}(\theta^0)\)</span>的方式来求解。可以找到更高效的方法求解线性方程<spanclass="math inline">\(Ax＝b\)</span>中的<spanclass="math inline">\(x\)</span>。例如，对于可逆阵<spanclass="math inline">\(A\)</span>，基于<spanclass="math inline">\(A\)</span>的<spanclass="math inline">\(LU\)</span>分解可以用更少的运算得到<spanclass="math inline">\(x\)</span>。或者将<spanclass="math inline">\(J^{-1}\)</span>替换成<code>Moore-Penrose</code>伪逆形式<spanclass="math inline">\(J^+\)</span>。</p><p>修改上述算法，使之能应用在预期末端位形为<spanclass="math inline">\(T_{sd}\in SE(3)\)</span>而不是坐标向量<spanclass="math inline">\(x_d\)</span> 的情况。可将关节坐标雅可比<spanclass="math inline">\(J\)</span>替换成末端物体雅可比<spanclass="math inline">\(J_b\)</span>。注意，由于向量<spanclass="math inline">\(e=x_d-f(\theta^i)\)</span>表示的是从当前估计值（由正向运动学得到）到预期末端位形。不能简单地替换成<spanclass="math inline">\(T_{sd}-T_{sd}(\theta^i)\)</span>；<spanclass="math inline">\(J_s\)</span>的伪逆应该作为物体速度旋量<spanclass="math inline">\(V_b \in\R^6\)</span>。为找到一个合理的对比，我们可以想象<spanclass="math inline">\(e=x_d-f(\theta^i)\)</span>为一个速度向量，如果遵循单位时间，可使运动从<spanclass="math inline">\(f(\theta^i)\)</span> 到<spanclass="math inline">\(x_d\)</span>。类似的，我们应该能够找到—个速度旋量，如果遵循单位时间，可使运动从<spanclass="math inline">\(T_{sd}(\theta^i))\)</span>到预期行为<spanclass="math inline">\(T_{sd}\)</span>。</p><p>为找到这个<spanclass="math inline">\(V_b\)</span>，首先需计算相对物体坐标系的预期位形，即<span class="math display">\[T_{bd}(\theta^{i})=T_{s b}^{-1}(\theta^{i})T_{sd}=T_{bs}(\theta^{i})T_{s d}\]</span> 然后,利用矩阵对数确定<spanclass="math inline">\([V]\)</span>即: <span class="math display">\[[V_b]=logT_{bd}(\theta^i)\\[V_s] = [Ad_{T_{sb}}][V_b]\]</span> 由此可以给出逆运动学算法：</p><p>（a）初始化：已知<spanclass="math inline">\(T_{sd}\)</span>，初始估计值<spanclass="math inline">\(\theta_0\)</span>，设定<spanclass="math inline">\(i=0\)</span>;</p><p>（b）计算<span class="math inline">\([V]\)</span>，当<spanclass="math inline">\(||\omega|| &gt;\varepsilon_{\omega}\)</span>或者<span class="math inline">\(||V|| &gt;\varepsilon_{v}\)</span>时：</p><ul><li>计算<span class="math inline">\(\theta^{i+1} = \theta^{i} +J^+(\theta ^ i)V\)</span></li><li><span class="math inline">\(i = i+1\)</span></li></ul><p>完成一定次数的迭代后，就都能获得真实值<spanclass="math inline">\(\theta_d\)</span>的近似解<spanclass="math inline">\(\theta^k\)</span>。</p><h5 id="数值解代码实现">（3） 数值解代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">IKinBody</span>(<span class="hljs-params">Blist, M, T, thetalist0, eomg, ev</span>):<br>    <span class="hljs-comment">#Computes inverse kinematics in the body frame for an open chain robot</span><br>    <br>    thetalist = np.array(thetalist0).copy()<br>    i = <span class="hljs-number">0</span><br>    maxiterations = <span class="hljs-number">20</span><br>    Vb = se3ToVec(MatrixLog6(np.dot(TransInv(FKinBody(M, Blist, \<br>                                                      thetalist)), T)))<br>    err = np.linalg.norm([Vb[<span class="hljs-number">0</span>], Vb[<span class="hljs-number">1</span>], Vb[<span class="hljs-number">2</span>]]) &gt; eomg \<br>          <span class="hljs-keyword">or</span> np.linalg.norm([Vb[<span class="hljs-number">3</span>], Vb[<span class="hljs-number">4</span>], Vb[<span class="hljs-number">5</span>]]) &gt; ev<br>    <span class="hljs-keyword">while</span> err <span class="hljs-keyword">and</span> i &lt; maxiterations:<br>        thetalist = thetalist \<br>                    + np.dot(np.linalg.pinv(JacobianBody(Blist, \<br>                                                         thetalist)), Vb)<br>        i = i + <span class="hljs-number">1</span><br>        Vb \<br>        = se3ToVec(MatrixLog6(np.dot(TransInv(FKinBody(M, Blist, \<br>                                                       thetalist)), T)))<br>        err = np.linalg.norm([Vb[<span class="hljs-number">0</span>], Vb[<span class="hljs-number">1</span>], Vb[<span class="hljs-number">2</span>]]) &gt; eomg \<br>              <span class="hljs-keyword">or</span> np.linalg.norm([Vb[<span class="hljs-number">3</span>], Vb[<span class="hljs-number">4</span>], Vb[<span class="hljs-number">5</span>]]) &gt; ev<br>    <span class="hljs-keyword">return</span> (thetalist, <span class="hljs-keyword">not</span> err)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">IKinSpace</span>(<span class="hljs-params">Slist, M, T, thetalist0, eomg, ev</span>):<br>    <span class="hljs-comment">#Computes inverse kinematics in the space frame for an open chain robot</span><br>    thetalist = np.array(thetalist0).copy()<br>    i = <span class="hljs-number">0</span><br>    maxiterations = <span class="hljs-number">20</span><br>    Tsb = FKinSpace(M,Slist, thetalist)<br>    Vs = np.dot(Adjoint(Tsb), \<br>                se3ToVec(MatrixLog6(np.dot(TransInv(Tsb), T))))<br>    err = np.linalg.norm([Vs[<span class="hljs-number">0</span>], Vs[<span class="hljs-number">1</span>], Vs[<span class="hljs-number">2</span>]]) &gt; eomg \<br>          <span class="hljs-keyword">or</span> np.linalg.norm([Vs[<span class="hljs-number">3</span>], Vs[<span class="hljs-number">4</span>], Vs[<span class="hljs-number">5</span>]]) &gt; ev<br>    <span class="hljs-keyword">while</span> err <span class="hljs-keyword">and</span> i &lt; maxiterations:<br>        thetalist = thetalist \<br>                    + np.dot(np.linalg.pinv(JacobianSpace(Slist, \<br>                                                          thetalist)), Vs)<br>        i = i + <span class="hljs-number">1</span><br>        Tsb = FKinSpace(M, Slist, thetalist)<br>        Vs = np.dot(Adjoint(Tsb), \<br>                    se3ToVec(MatrixLog6(np.dot(TransInv(Tsb), T))))<br>        err = np.linalg.norm([Vs[<span class="hljs-number">0</span>], Vs[<span class="hljs-number">1</span>], Vs[<span class="hljs-number">2</span>]]) &gt; eomg \<br>              <span class="hljs-keyword">or</span> np.linalg.norm([Vs[<span class="hljs-number">3</span>], Vs[<span class="hljs-number">4</span>], Vs[<span class="hljs-number">5</span>]]) &gt; ev<br>    <span class="hljs-keyword">return</span> (thetalist, <span class="hljs-keyword">not</span> err)<br><br>eomg = <span class="hljs-number">0.01</span><br>ev = <span class="hljs-number">0.01</span><br>initial = np.array([<span class="hljs-number">40.050000</span>, -<span class="hljs-number">50.910000</span>, <span class="hljs-number">110.140000</span>, <span class="hljs-number">120.540000</span>, -<span class="hljs-number">11.390000</span>, <span class="hljs-number">97.930000</span>])/<span class="hljs-number">180</span>*math.pi<br>T = np.array([     [<span class="hljs-number">0.410150</span>,    -<span class="hljs-number">0.123729</span>,    -<span class="hljs-number">0.903586</span>,  <span class="hljs-number">1183.631143</span>] ,<br>                [-<span class="hljs-number">0.190306</span>,    -<span class="hljs-number">0.980556</span>,     <span class="hljs-number">0.047886</span>, -<span class="hljs-number">1137.765860</span>] ,<br>                 [-<span class="hljs-number">0.891942</span>,     <span class="hljs-number">0.152317</span>,    -<span class="hljs-number">0.425722</span>,   <span class="hljs-number">756.413634</span> ],<br>                [ <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span>] ])<br>[theta,success] = mr.IKinSpace(Slist,M,T,initial,eomg,ev)<br></code></pre></td></tr></table></figure><h2 id="机器人运动学">1.4 机器人运动学</h2><h3 id="雅可比矩阵">1.4.1 雅可比矩阵</h3><p>除了关节角度和机器人末端执行器位置之间的关系外，还需要研究关节和末端执行器速度之间的关系。在本节中，推导了这种关系的公式，并研究其结构和性质，还研究了连杆之间力传递的关系。由第2章的公式(2-5)，当给定一组关节角<spanclass="math inline">\(\boldsymbol{\theta }=\left[ \theta _1,\theta_2,\theta _3,\theta _4,\theta _5,\theta _6 \right]^{\mathrm{T}}\)</span>时，可以确定机器人末端的位置与姿态： <spanclass="math display">\[            \boldsymbol{X}=F\left( \boldsymbol{\theta } \right)\]</span> 其中，<span class="math inline">\(\boldsymbol{X}=\left[X,Y,Z,A,B,C \right]^{\mathrm{T}}\)</span>，将公式两边进行求导，可以得到： <spanclass="math display">\[\boldsymbol{V}=\dot{\boldsymbol{X}}=\boldsymbol{J}\left(\boldsymbol{\theta } \right) \dot{\boldsymbol{\theta}}\]</span> 式中，$( ) $为雅可比矩阵。</p><p>一般情况下，雅可比矩阵通过矢量差乘积法、微分变换法得到。而使用指数积公式表示正运动学，可以更加明确、优雅的推导出雅可比矩阵。在机器人正运动学的指数积公式下，末端的速度$$的表达式为：<span class="math display">\[\left[ \boldsymbol{V} \right]=\dot{\boldsymbol{T}}\boldsymbol{T}^{-1}=\sum_{i=1}^6{\left(\frac{\partial \boldsymbol{T}}{\partial \boldsymbol{\theta}_i}\dot{\boldsymbol{\theta}}_i\right)}\boldsymbol{T}^{-1}=\sum_{i=1}^6{\left( \frac{\partial\boldsymbol{T}}{\partial \boldsymbol{\theta }_i}\boldsymbol{T}^{-1}\right)}\dot{\boldsymbol{\theta}}_i\]</span>带入机器人正运动学公式，并使用伴随映射将上式写成向量形式，即：</p><figure><img src="http://imgbed.leiting2020.top//img/202307072335656.png"alt="image-20230707233546591" /><figcaption aria-hidden="true">image-20230707233546591</figcaption></figure><figure><img src="http://imgbed.leiting2020.top//img/202307072336041.png"alt="image-20230707233634974" /><figcaption aria-hidden="true">image-20230707233634974</figcaption></figure><p>式中，对于任意<span class="math inline">\(\boldsymbol{\xi }\in\boldsymbol{R}^6\)</span>，与$=( , ) ( 3 ) $相关联的伴随映射为: <spanclass="math display">\[\boldsymbol{\xi }^{\prime}=Ad_{\boldsymbol{T}}\left( \boldsymbol{\xi }\right) =\left[\begin{matrix}    \boldsymbol{R}&amp;                                                                   0\\\left[ \boldsymbol{P} \right]\boldsymbol{R}&amp;                   \boldsymbol{R}\\\end{matrix}\right] \boldsymbol{\xi }\]</span></p><h3 id="雅可比矩阵代码实现">1.4.2 雅可比矩阵代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">JacobianBody</span>(<span class="hljs-params">Blist, thetalist</span>):<br>    <span class="hljs-comment">#Computes the body Jacobian for an open chain robot</span><br>    Jb = np.array(Blist).copy().astype(np.<span class="hljs-built_in">float</span>)<br>    T = np.eye(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(thetalist) - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        T = np.dot(T,MatrixExp6(VecTose3(np.array(Blist)[:, i + <span class="hljs-number">1</span>] \<br>                                         * -thetalist[i + <span class="hljs-number">1</span>])))<br>        Jb[:, i] = np.dot(Adjoint(T), np.array(Blist)[:, i])<br>    <span class="hljs-keyword">return</span> Jb<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">JacobianSpace</span>(<span class="hljs-params">Slist, thetalist</span>):<br>   <span class="hljs-comment">#Computes the space Jacobian for an open chain robot</span><br>    Js = np.array(Slist).copy().astype(np.<span class="hljs-built_in">float</span>)<br>    T = np.eye(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(thetalist)):<br>        T = np.dot(T, MatrixExp6(VecTose3(np.array(Slist)[:, i - <span class="hljs-number">1</span>] \<br>                                * thetalist[i - <span class="hljs-number">1</span>])))<br>        Js[:, i] = np.dot(Adjoint(T), np.array(Slist)[:, i])<br>    <span class="hljs-keyword">return</span> Js<br></code></pre></td></tr></table></figure><h2 id="涉及的函数说明">1.5 涉及的函数说明</h2><h3 id="空间变换与齐次矩阵">1.5.1 空间变换与齐次矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>计算旋转矩阵的逆<br>invR = RotInv(R)<br><br><span class="hljs-number">2.</span>将三维向量转换为<span class="hljs-number">3</span>*<span class="hljs-number">3</span>反对称矩阵<br>so3mat = VecToso3(omg)<br><br><span class="hljs-number">3.</span>将<span class="hljs-number">3</span>*<span class="hljs-number">3</span>反对称矩阵转换为三维向量<br>omg = so3ToVec(so3mat)<br><br><span class="hljs-number">4.</span>从旋转的三维指数坐标中提取出轴线和角度<br>[omghat,theta] = AxisAng3(expc3)<br><br><span class="hljs-number">5.</span>计算矩阵指数对应的旋转矩阵<br>R = MatrixExp3(so3mat)<br><br><span class="hljs-number">6.</span>计算旋转矩阵对应的矩阵对数<br>so3mat = MatrixLog3(R)<br><br><span class="hljs-number">7.</span>M到SO（<span class="hljs-number">3</span>）旋转矩阵的空间距离的度量<br>d = DistanceToSO3(mat)<br><br><span class="hljs-number">8.</span>判断M是否为旋转矩阵<br>judge = TestIfSO3(mat)<br><br><span class="hljs-number">9.</span>返回与M最近的旋转矩阵<br>R = ProjectToSO3(mat)<br><br><span class="hljs-number">10.</span>将旋转矩阵和位置向量转换为变换矩阵<br>T = RpToTrans(R,p)<br><br><span class="hljs-number">11.</span>从变换矩阵中分离出旋转矩阵和位置向量<br>[R,p] = TransToRp(T)<br><br><span class="hljs-number">12.</span>变换矩阵求逆<br>invT = TransInv(T)<br><br><span class="hljs-number">13.</span>构造与六维向量形式的运动旋量V对应的<br>se3mat = VecTose3(V)<br><br><span class="hljs-number">14.</span>构造与se(<span class="hljs-number">3</span>)矩阵对应的六维向量形式的运动旋量V<br>V = se3ToVec(se3mat)<br><br><span class="hljs-number">15.</span>计算变换矩阵T的<span class="hljs-number">6</span>*<span class="hljs-number">6</span>的伴随矩阵<br>AdT = Adjoint(T)<br><br><span class="hljs-number">16.</span>返回正则化的螺旋轴表达式<br>S = ScrewToAxis(q,s,h)<br><br><span class="hljs-number">17.</span>从六位向量形式的指数坐标中提取出螺旋轴和沿轴线移动的距离<br>[S,theta] = AxisAng6(expc6)<br><br><span class="hljs-number">18.</span>计算矩阵指数对应的变换矩阵<br>T = MatrixExp6(se3mat)<br><br><span class="hljs-number">19.</span>计算变换矩阵对应的矩阵对数<br>se3mat = MatrixLog6(T)<br><br><span class="hljs-number">20.</span>M到变换矩阵的空间距离<br>d = DistanceToSE3(mat)<br><br><span class="hljs-number">21.</span>判断是否为SE3变换矩阵<br>judge = TestIfSE3(mat)<br><br><span class="hljs-number">22.</span>离M最近的变换矩阵<br>T = ProjectToSE3(mat)<br></code></pre></td></tr></table></figure><h3 id="运动学">1.5.2 运动学</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正运动学</span><br>末端坐标系下。给定初始形位，关节旋量以及关节值，计算末端坐标系<br>T = FKinBody(M,Blist,thetalist)<br>空间坐标系下。给定初始形位，关节旋量以及关节值，计算末端坐标系<br>T = FKinSpace(M,Slist,thetalist)<br><br><span class="hljs-comment">#雅可比矩阵</span><br>给定物体坐标系下描述的各关节旋量Blist及关节角，计算物体雅可比JB<br>Jb=JacobianBody(Blist,thetalist)<br>给定物体坐标系下描述的各关节旋量Slist及关节角，计算物体雅可比Js<br>J=JacobianSpace(Slist,thetalist)<br><br><span class="hljs-comment">#逆运动学</span><br>［theta11st,success］＝IKinBody（B1ist,M,T,theta1ist,eomg,ev）<br>［theta11st,success］＝IKinSpace（B1ist,M,T,theta1ist,eomg,ev）<br></code></pre></td></tr></table></figure><h2 id="参考链接">1.6 参考链接</h2><p>机器人POE运动学代码网址：<ahref="https://github.com/NxRLab/ModernRobotics">NxRLab/ModernRobotics:Modern Robotics: Mechanics, Planning, and Control Code Library --- Theprimary purpose of the provided software is to be easy to read andeducational, reinforcing the concepts in the book. The code is optimizedneither for efficiency nor robustness. (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
      <tag>运动学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习与神经网络学习笔记</title>
    <link href="/2023/06/30/note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/30/note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习与神经网络学习笔记">机器学习与神经网络学习笔记</h1><p>这几天在看吴恩达的深度学习视频，记不清已经是第几次捡起来了，之前每次都没看完，希望在正式上班之前把这部分看完吧</p><h3 id="神经网络基础">神经网络基础</h3><p>神经网络是深度学习的基本组成部分。它由多个神经元和层级组成，每个神经元通过激活函数对输入进行处理，并将输出传递给下一层。神经网络通过学习权重和偏置来逼近目标函数。</p><p>下图是一个简单的逻辑回归模型，首先需要输入特征<spanclass="math inline">\(x\)</span>，通过特征<spanclass="math inline">\(W\)</span>和<spanclass="math inline">\(b\)</span>计算出<spanclass="math inline">\(z\)</span>，接下来使用<spanclass="math inline">\(𝑧\)</span>就可以计算出<spanclass="math inline">\(𝑎\)</span>，然后可以计算 出 loss function 𝐿(𝑎,𝑦)</p><figure><img src="http://imgbed.leiting2020.top//img/202306301953647.png"alt="image-20230630195352602" /><figcaption aria-hidden="true">image-20230630195352602</figcaption></figure><p>神经网络看起来是如下这个样子。可以把许多 sigmoid单元堆叠起来形成一个神经网络。它包含了之前讲的计算的两个步骤：首先计算出值𝑧，然后通过𝜎(𝑧)计算值𝑎。</p><figure><img src="http://imgbed.leiting2020.top//img/202306301959456.png"alt="image-20230630195927387" /><figcaption aria-hidden="true">image-20230630195927387</figcaption></figure><p>在这个神经网络对应的 3个节点，首先计算第一层网络中的各个节点相关的数𝑧 [1]，接着计算𝛼[1]，在计算下一层网络同理； 我们会使用符号 [𝑚]表示第𝑚层网络中节点相关的数，这些节点的集合被称为第𝑚层网络。</p><p>我们有输入特征𝑥1、𝑥2、𝑥3，它们被竖直地堆叠起来，这叫做神经网络的<strong>输入层</strong>。它包含了神经网络的输入；然后这里有另外一层我们称之为<strong>隐藏层</strong>（图中的四个结点），最后一层只由一个结点构成，而这个只有一个结点的层被称为<strong>输出层</strong>，它负责产生预测值。解释隐藏层的含义：在一个神经网络中，当你使用监督学习训练它的时候，训练集包含了输入𝑥也包含了目标输出𝑦，所以术语隐藏层的含义是在训练集中，这些中间结点的准确值我们是不知道到的，也就是说你看不见它们在训练集中应具有的值。你能看见输入的值，你也能看见输出的值，但是隐藏层中的东西，在训练集中你是无法看到的。所以这也解释了词语隐藏层，只是表示你无法在训练集中看到他们。</p><figure><img src="http://imgbed.leiting2020.top//img/202306302001630.png"alt="image-20230630200137512" /><figcaption aria-hidden="true">image-20230630200137512</figcaption></figure><p>神经元模型是神经网络中的基本单元，它接收输入信号并通过激活函数进行非线性变换。</p><ul><li>输入<spanclass="math inline">\(A\)</span>：神经元接收来自上一层的输入信号。</li><li>权重<spanclass="math inline">\(W\)</span>：每个输入信号都与一个权重相关联，权重决定了输入对神经元的影响程度。</li><li>偏置<spanclass="math inline">\(b\)</span>：每个神经元还有一个偏置，它相当于一个常数项，可以调整神经元的输出。</li></ul><p>神经网络的训练通常涉及以下步骤：</p><ol type="1"><li><strong>数据准备</strong>：收集和准备用于训练神经网络的数据集。这包括对数据进行清洗、划分训练集和测试集，并进行必要的预处理步骤，例如标准化或归一化。</li><li><strong>定义网络结构</strong>：确定神经网络的结构，包括层数、每层的神经元数量以及激活函数的选择。这些决定将根据特定问题和数据集的需求进行调整。</li><li><strong>参数初始化</strong>：初始化神经网络的参数，例如权重和偏置项。常见的初始化方法包括零初始化、随机初始化和He初始化等。</li><li><strong>前向传播</strong>：执行前向传播算法，将输入数据通过神经网络进行推理，计算每一层的激活值（输出）。</li><li><strong>计算损失</strong>：使用定义的损失函数（例如交叉熵损失）计算预测结果与真实标签之间的差异，衡量模型的性能。</li><li><strong>反向传播</strong>：通过反向传播算法计算每一层的梯度，根据损失函数的梯度信息更新参数，以便减少损失。</li><li><strong>参数更新</strong>：根据反向传播计算得到的梯度信息，使用优化算法（如梯度下降）更新神经网络的参数。</li><li><strong>重复迭代</strong>：重复执行步骤4到步骤7，直到达到指定的训练迭代次数或满足停止条件。</li><li><strong>模型评估</strong>：使用测试集或交叉验证集对训练后的神经网络进行评估，计算准确率、精确率、召回率等指标，评估模型的性能。</li><li><strong>预测</strong>：使用训练好的神经网络对新的未见过的数据进行预测。</li></ol><h3 id="参数初始化">参数初始化</h3><p>当你训练神经网络时，权重随机初始化是很重要的。对于逻辑回归，把权重初始化为0 当然也是可以的。但是对于一个神经网络，如果你把权重或者参数都初始化为0，那么梯度下降将不会起作用。因此，一般把<spanclass="math inline">\(W\)</span>初 始化为很小的随机数。然后<spanclass="math inline">\(𝑏\)</span>没有这个对称的问题（叫做 symmetrybreaking problem），所以可以把$ 𝑏 $初始化为 0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_parameters_random</span>(<span class="hljs-params">layers_dims</span>):<br>    parameters = &#123;&#125;<br>    L = <span class="hljs-built_in">len</span>(layers_dims) - <span class="hljs-number">1</span>  <span class="hljs-comment"># 网络层数</span><br><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, L + <span class="hljs-number">1</span>):<br>        parameters[<span class="hljs-string">f&quot;W<span class="hljs-subst">&#123;l&#125;</span>&quot;</span>] = np.random.randn(layers_dims[l], layers_dims[l-<span class="hljs-number">1</span>]) * <span class="hljs-number">0.01</span><br>        parameters[<span class="hljs-string">f&quot;b<span class="hljs-subst">&#123;l&#125;</span>&quot;</span>] = np.zeros((layers_dims[l], <span class="hljs-number">1</span>))<br>    <br>    <span class="hljs-keyword">return</span> parameters<br><br></code></pre></td></tr></table></figure><h3 id="前向传播">前向传播</h3><p>神经网络的前向传播过程是从输入层到输出层的计算过程。对于每一层，输入经过权重和偏置的线性变换，然后通过激活函数进行非线性变换，得到输出。</p><h4 id="计算流程">计算流程</h4><p>前向传播的计算流程为：</p><p><span class="math inline">\(Z^{[1]} = W^{[1]}X + b^{[1]}\)</span></p><p><span class="math inline">\(A^{[1]} = g^{[1]}(Z^{[1]})\)</span></p><p><span class="math inline">\(Z^{[2]} = W^{[2]}A^{[1]} +b^{[2]}\)</span></p><p><span class="math inline">\(A^{[2]} = g^{[2]}(Z^{[2]})\)</span></p><p>...</p><p><span class="math inline">\(Z^{[L-1]} = W^{[L-1]}A^{[L-2]} +b^{[L-1]}\)</span></p><p><span class="math inline">\(A^{[L-1]} =g^{[L-1]}(Z^{[L-1]})\)</span></p><p><span class="math inline">\(Z^{[L]} = W^{[L]}A^{[L-1]} +b^{[L]}\)</span></p><p><span class="math inline">\(A^{[L]} = g^{[L]}(Z^{[L]})\)</span></p><p>其中，<span class="math inline">\(X\)</span> 表示输入数据，<spanclass="math inline">\(A^{[l]}\)</span> 表示第 l 层的输出，<spanclass="math inline">\(W^{[l]}\)</span> 和 <spanclass="math inline">\(b^{[l]}\)</span> 分别表示第 l层的权重和偏置，<span class="math inline">\(g^{[l]}\)</span> 表示第 l层的激活函数。</p><h4 id="激活函数">激活函数</h4><p>激活函数引入了非线性特性，使神经网络能够学习复杂的非线性关系。常见的激活函数有sigmoid函数、ReLU函数和tanh函数。</p><p><strong>sigmoid函数</strong> <span class="math display">\[A = \frac{1}{1 + e^{-Z}}\]</span> <strong>tanh激活函数</strong> <span class="math display">\[A = \tanh(Z)\]</span> <strong>ReLU函数</strong> <span class="math display">\[A = \max(0, Z)\]</span></p><p>sigmoid 激活函数：除了输出层是一个二分类问题基本不会用它。</p><p>tanh 激活函数：tanh 是非常优秀的，几乎适合所有场合。</p><p>ReLu 激活函数：最常用的默认函数，如果不确定用哪个激活函数，就使用ReLu 或者 Leaky ReLu。</p><h4 id="代码实现">代码实现</h4><ul><li>在以下代码中，<code>forward_propagation</code>函数接受输入特征数据<code>X</code>和包含参数的字典<code>parameters</code>作为输入，执行n层神经网络的前向传播计算。</li><li>根据网络的层数L，依次从参数字典中提取权重矩阵和偏置向量，并根据前向传播的计算公式，计算每一层的加权输入Z和激活值A。</li><li>中间计算结果以元组形式保存在<code>caches</code>列表中，用于后续的后向传播计算。</li><li>最后，返回输出层的激活值AL和中间计算结果的缓存<code>caches</code>。这些结果可以用于损失计算和反向传播过程。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_propagation</span>(<span class="hljs-params">X, parameters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    前向传播计算</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    X - 输入特征数据，维度为（特征数量，样本数量）</span><br><span class="hljs-string">    parameters - 包含参数的字典，参数命名规则为&quot;Wl&quot;和&quot;bl&quot;，表示第l层的权重矩阵和偏置向量</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    AL - 输出层的激活值</span><br><span class="hljs-string">    caches - 包含每一层的中间计算结果的字典列表，用于后向传播</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    L = <span class="hljs-built_in">len</span>(parameters) // <span class="hljs-number">2</span>  <span class="hljs-comment"># 神经网络的层数</span><br>    caches = []<br>    A = X<br><br>    <span class="hljs-comment"># 前L-1层的前向传播（使用ReLU激活函数）</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, L):<br>        W = parameters[<span class="hljs-string">&#x27;W&#x27;</span> + <span class="hljs-built_in">str</span>(l)]<br>        b = parameters[<span class="hljs-string">&#x27;b&#x27;</span> + <span class="hljs-built_in">str</span>(l)]<br>        Z = np.dot(W, A) + b<br>        A = relu(Z)<br>        cache = (Z, A)<br>        caches.append(cache)<br><br>    <span class="hljs-comment"># 输出层的前向传播（使用Sigmoid激活函数）</span><br>    WL = parameters[<span class="hljs-string">&#x27;W&#x27;</span> + <span class="hljs-built_in">str</span>(L)]<br>    bL = parameters[<span class="hljs-string">&#x27;b&#x27;</span> + <span class="hljs-built_in">str</span>(L)]<br>    ZL = np.dot(WL, A) + bL<br>    AL = sigmoid(ZL)<br>    cacheL = (ZL, AL)<br>    caches.append(cacheL)<br><br>    <span class="hljs-keyword">return</span> AL, caches<br></code></pre></td></tr></table></figure><h3 id="损失函数">损失函数</h3><p>计算损失函数是深度学习中的重要步骤，它用于衡量模型的预测结果与实际标签之间的差异。损失函数的作用是量化模型的预测误差，并通过最小化损失函数来优化模型的参数。</p><p>在分类问题中，常用的损失函数是交叉熵损失函数（Cross EntropyLoss）。交叉熵损失函数可以有效地衡量两个概率分布之间的差异，用于衡量模型的输出与实际标签之间的差异。常见的损失函数有均方误差损失函数和交叉熵损失函数。对于二分类问题，交叉熵损失函数的计算公式如下：</p><ul><li>均方误差损失函数公式：</li></ul><p><span class="math display">\[\text{MSE} = \frac{1}{m} \sum_{i=1}^{m}(y_i - \hat{y}_i)^2\]</span></p><ul><li>交叉熵损失函数公式：</li></ul><p><span class="math display">\[BinaryCrossEntropy = -\frac{1}{m} \sum_{i=1}^{m}(y_i \log(\hat{y}_i) +(1-y_i) \log(1-\hat{y}_i))\]</span></p><h4 id="代码实现-1">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">AL, Y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算交叉熵损失函数</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    AL - 输出层的激活值，维度为（1，样本数量）</span><br><span class="hljs-string">    Y - 实际标签，维度为（1，样本数量）</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    loss - 交叉熵损失</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    m = Y.shape[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 样本数量</span><br><br>    <span class="hljs-comment"># 计算交叉熵损失</span><br>    loss = -<span class="hljs-number">1</span> / m * np.<span class="hljs-built_in">sum</span>(Y * np.log(AL) + (<span class="hljs-number">1</span> - Y) * np.log(<span class="hljs-number">1</span> - AL))<br><br>    <span class="hljs-keyword">return</span> loss<br><br></code></pre></td></tr></table></figure><p>以上代码中，<code>compute_loss</code>函数接受输出层的激活值<code>AL</code>和实际标签<code>Y</code>作为输入，通过交叉熵损失函数的计算公式，计算出交叉熵损失值。最后，返回计算得到的交叉熵损失值<code>loss</code>。</p><h3 id="反向传播">反向传播</h3><p>反向传播是神经网络中的一种训练算法，通过计算梯度来更新权重和偏置。它利用链式法则将误差从输出层传播回输入层，并根据梯度下降算法更新模型参数。</p><p>反向传播的计算流程为：</p><p><span class="math inline">\(dZ^{[L]} = A^{[L]} - Y\)</span></p><p><span class="math inline">\(dW^{[L]} = \frac{1}{m} dZ^{[L]}A^{[L-1]T}\)</span></p><p><span class="math inline">\(db^{[L]} = \frac{1}{m} \sumdZ^{[L]}\)</span></p><p><span class="math inline">\(dZ^{[L-1]} = W^{[L]T} dZ^{[L]} *g^{[L-1]&#39;}(Z^{[L-1]})\)</span></p><p><span class="math inline">\(dW^{[L-1]} = \frac{1}{m} dZ^{[L-1]}A^{[L-2]T}\)</span></p><p><span class="math inline">\(db^{[L-1]} = \frac{1}{m} \sumdZ^{[L-1]}\)</span></p><p>...</p><p><span class="math inline">\(dZ^{[1]} = W^{[2]T} dZ^{[2]} *g^{[1]&#39;}(Z^{[1]})\)</span></p><p><span class="math inline">\(dW^{[1]} = \frac{1}{m} dZ^{[1]}X^T\)</span></p><p><span class="math inline">\(db^{[1]} = \frac{1}{m} \sumdZ^{[1]}\)</span></p><p>其中，<span class="math inline">\(dZ^{[l]}\)</span> 表示第 l层的梯度，<span class="math inline">\(dW^{[l]}\)</span> 和 <spanclass="math inline">\(db^{[l]}\)</span> 分别表示第 l层的权重和偏置的梯度，<span class="math inline">\(g^{[l]&#39;}\)</span>表示第 l 层激活函数的导数，<span class="math inline">\(W^{[l]}\)</span>表示第 l 层的权重。</p><h4 id="代码实现-2">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">backward_propagation</span>(<span class="hljs-params">AL, Y, caches</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    N层神经网络的反向传播</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    AL - 神经网络的输出，维度为（输出层大小，样本数量）</span><br><span class="hljs-string">    Y - 实际标签，维度为（输出层大小，样本数量）</span><br><span class="hljs-string">    caches - 包含前向传播过程中的缓存值的列表</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    grads - 包含模型参数相对于损失函数的梯度的字典</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    grads = &#123;&#125;<br>    L = <span class="hljs-built_in">len</span>(caches)  <span class="hljs-comment"># 网络层数</span><br>    m = AL.shape[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 样本数量</span><br>    Y = Y.reshape(AL.shape)  <span class="hljs-comment"># 保证Y和AL维度相同</span><br><br>    <span class="hljs-comment"># 计算输出层的梯度</span><br>    dAL = - (np.divide(Y, AL) - np.divide(<span class="hljs-number">1</span> - Y, <span class="hljs-number">1</span> - AL))<br><br>    <span class="hljs-comment"># 反向传播</span><br>    current_cache = caches[L - <span class="hljs-number">1</span>]  <span class="hljs-comment"># 最后一层的缓存值</span><br>    grads[<span class="hljs-string">&quot;dA&quot;</span> + <span class="hljs-built_in">str</span>(L)], grads[<span class="hljs-string">&quot;dW&quot;</span> + <span class="hljs-built_in">str</span>(L)], grads[<span class="hljs-string">&quot;db&quot;</span> + <span class="hljs-built_in">str</span>(L)] = linear_activation_backward(dAL, current_cache, activation=<span class="hljs-string">&quot;sigmoid&quot;</span>)<br><br>    <span class="hljs-comment"># 从倒数第二层开始反向传播</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(L - <span class="hljs-number">1</span>)):<br>        current_cache = caches[l]  <span class="hljs-comment"># 当前层的缓存值</span><br>        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[<span class="hljs-string">&quot;dA&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">2</span>)], current_cache, activation=<span class="hljs-string">&quot;relu&quot;</span>)<br>        grads[<span class="hljs-string">&quot;dA&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] = dA_prev_temp<br>        grads[<span class="hljs-string">&quot;dW&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] = dW_temp<br>        grads[<span class="hljs-string">&quot;db&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] = db_temp<br><br>    <span class="hljs-keyword">return</span> grads<br><br></code></pre></td></tr></table></figure><p>在上述代码中，<code>backward_propagation</code>函数接受神经网络的输出<code>AL</code>、实际标签<code>Y</code>和前向传播过程中的缓存值<code>caches</code>作为输入。根据反向传播的计算公式，首先计算输出层的梯度<code>dAL</code>，然后从最后一层开始，依次进行反向传播，计算每一层的梯度<code>dA_prev</code>、<code>dW</code>和<code>db</code>。其中，<code>linear_activation_backward</code>函数用于计算每一层的线性部分和激活函数的梯度。</p><p>最后，将计算得到的梯度保存到字典 <code>grads</code>中并返回。这些梯度可以用于更新模型的参数。通过反向传播，梯度会从输出层逐渐传播回输入层，从而计算模型参数的梯度。</p><h3 id="参数更新">参数更新</h3><p>在神经网络中，通常使用梯度下降法来更新参数。 <spanclass="math display">\[\theta = \theta - \alpha \cdot \nabla J(\theta)\]</span> 其中，<spanclass="math inline">\(\theta\)</span>表示参数，<spanclass="math inline">\(\alpha\)</span>表示学习率，<spanclass="math inline">\(\nabla J(\theta)\)</span>表示损失函数<spanclass="math inline">\(J(\theta)\)</span>关于参数<spanclass="math inline">\(\theta\)</span>的梯度。</p><h4 id="代码实现-3">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_parameters</span>(<span class="hljs-params">parameters, grads, learning_rate</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用梯度下降更新模型参数</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    parameters - 包含模型参数的字典</span><br><span class="hljs-string">    grads - 包含模型参数相对于损失函数的梯度的字典</span><br><span class="hljs-string">    learning_rate - 学习率</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    parameters - 更新后的模型参数字典</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    L = <span class="hljs-built_in">len</span>(parameters) // <span class="hljs-number">2</span>  <span class="hljs-comment"># 网络层数</span><br><br>    <span class="hljs-comment"># 更新每一层的参数</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L):<br>        parameters[<span class="hljs-string">&quot;W&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] = parameters[<span class="hljs-string">&quot;W&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] - learning_rate * grads[<span class="hljs-string">&quot;dW&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)]<br>        parameters[<span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] = parameters[<span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)] - learning_rate * grads[<span class="hljs-string">&quot;db&quot;</span> + <span class="hljs-built_in">str</span>(l + <span class="hljs-number">1</span>)]<br><br>    <span class="hljs-keyword">return</span> parameters<br><br></code></pre></td></tr></table></figure><p>在上述代码中，<code>update_parameters</code>函数接受模型的参数字典<code>parameters</code>、模型参数相对于损失函数的梯度字典<code>grads</code>和学习率<code>learning_rate</code>作为输入。根据梯度下降的更新规则，对每一层的参数进行更新。</p><p>通过循环遍历每一层，更新参数<code>W</code>和<code>b</code>。更新公式为<code>parameter = parameter - learning_rate * gradient</code>，其中<code>parameter</code>表示参数，<code>learning_rate</code>表示学习率，<code>gradient</code>表示对应的梯度。</p><p>最后，返回更新后的模型参数字典<code>parameters</code>。这些更新后的参数可以用于下一轮的前向传播和反向传播过程。</p><p>参数更新是神经网络训练的关键步骤，通过不断更新参数，使模型逐渐优化，减小损失函数，提高预测准确率。学习率<code>learning_rate</code>控制着每次更新的步长，需要合适的学习率来保证模型能够收敛到最优解。</p><h3 id="构建深层神经网络模型">构建深层神经网络模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">layers_dims = [<span class="hljs-number">12288</span>, <span class="hljs-number">20</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>] <span class="hljs-comment">#  5-layer model</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">L_layer_model</span>(<span class="hljs-params">X, Y, layers_dims, learning_rate=<span class="hljs-number">0.0075</span>, num_iterations=<span class="hljs-number">3000</span>, print_cost=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    实现一个L层神经网络模型的训练</span><br><span class="hljs-string"></span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">    X - 输入特征数据，维度为 (输入特征数, 样本数)</span><br><span class="hljs-string">    Y - 标签数据，维度为 (1, 样本数)</span><br><span class="hljs-string">    layers_dims - 列表，包含输入层、隐藏层和输出层的神经元数量</span><br><span class="hljs-string">    learning_rate - 学习率</span><br><span class="hljs-string">    num_iterations - 迭代次数</span><br><span class="hljs-string">    print_cost - 是否打印成本值</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    parameters - 训练后的模型参数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    np.random.seed(<span class="hljs-number">1</span>)<br>    costs = []  <span class="hljs-comment"># 用于保存成本值</span><br><br>    <span class="hljs-comment"># 初始化参数</span><br>    parameters = initialize_parameters_random(layers_dims)<br><br>    <span class="hljs-comment"># 迭代训练</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        <span class="hljs-comment"># 前向传播</span><br>        AL, caches = forward_propagation(X, parameters)<br><br>        <span class="hljs-comment"># 计算成本</span><br>        cost = compute_loss(AL, Y)<br><br>        <span class="hljs-comment"># 反向传播</span><br>        grads = backward_propagation(AL, Y, caches)<br><br>        <span class="hljs-comment"># 参数更新</span><br>        parameters = update_parameters(parameters, grads, learning_rate)<br><br>        <span class="hljs-comment"># 打印成本值</span><br>        <span class="hljs-keyword">if</span> print_cost <span class="hljs-keyword">and</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cost after iteration &#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, cost))<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            costs.append(cost)<br><br>    <span class="hljs-comment"># 绘制成本曲线</span><br>    plt.plot(np.squeeze(costs))<br>    plt.ylabel(<span class="hljs-string">&#x27;Cost&#x27;</span>)<br>    plt.xlabel(<span class="hljs-string">&#x27;Iterations (per tens)&#x27;</span>)<br>    plt.title(<span class="hljs-string">&quot;Learning rate =&quot;</span> + <span class="hljs-built_in">str</span>(learning_rate))<br>    plt.show()<br><br>    <span class="hljs-keyword">return</span> parameters<br><br>parameters = L_layer_model(train_x, train_y, layers_dims, num_iterations = <span class="hljs-number">2500</span>, print_cost = <span class="hljs-literal">True</span>)<span class="hljs-comment">#训练模型</span><br>pred_train = predict(train_x, train_y, parameters)<span class="hljs-comment">#训练集验证</span><br>pred_test = predict(test_x, test_y, parameters)<span class="hljs-comment">#测试集验证</span><br></code></pre></td></tr></table></figure><p>该函数接受输入特征数据 <code>X</code>，标签数据<code>Y</code>，神经网络层的维度 <code>layers_dims</code>，学习率<code>learning_rate</code>，迭代次数 <code>num_iterations</code>和是否打印成本值 <code>print_cost</code> 作为参数。</p><p>函数首先初始化模型的参数，然后通过迭代训练的方式进行模型优化。在每次迭代中，函数执行以下步骤：</p><ol type="1"><li>前向传播：通过调用 <code>L_model_forward</code> 函数实现，计算预测值<code>AL</code> 和缓存值 <code>caches</code>。</li><li>计算成本：通过调用 <code>compute_cost</code>函数实现，计算模型的损失函数成本。</li><li>反向传播：通过调用 <code>L_model_backward</code>函数实现，计算模型参数相对于损失函数的梯度。</li><li>参数更新：通过调用 <code>update_parameters</code>函数实现，根据梯度下降的更新规则更新模型的参数。</li><li>打印成本值：根据设定的条件，打印每一百次迭代的成本值。</li><li>绘制成本</li></ol><p>这样就完成了深度神经网络的构建。</p><p>学习视频：https://www.coursera.org/deeplearning-ai</p><p>笔记资料：<ahref="https://github.com/fengdu78/deeplearning_ai_books">fengdu78/deeplearning_ai_books:deeplearning.ai（吴恩达老师的深度学习课程笔记及资源）(github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adams机电仿真</title>
    <link href="/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/"/>
    <url>/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="创建控制系统">1.创建控制系统</h1><p>单击界面菜单中的工具(Tools )，然后单击工具下的插件管理器（ PluginManager )，系统弹加载模块。在模块中选择Adams Controls和AdamsMechatronics两项，如图8-35所示，然后单击确定（OK）按钮加载。单击界面菜单Mechatronics(机械电子学),然后依次单击控制系统( ControlSystem） →新建(New）系统弹出创建控制系统对话框。</p><p>![<span class="citation"data-cites="FY8O8RY9AN8Y4">@FY8O8RY9AN8Y4</span>{1%<spanclass="math inline">\(@0Y7P](adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/@FY8O8RY9AN8Y4%7B1%25\)</span><spanclass="citation"data-cites="0Y7P-1680400372310-5.png">@0Y7P-1680400372310-5.png</span>)</p><p>在名称（Name )中输入robot_control，在系统类型(SystemType栏中选择外部系统库(External System Library )，在静态搁置(StaticHold)栏中选择开（On )在输入的个数( Number of Inputs)栏中输入12，在输出的个数( Number of Outputs)栏中输入3,如图所示。然后单击<imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/image-20230402095752657.png"alt="image-20230402095752657" />图标，系统弹出创建单变量对话框。</p><p>在创建单变量对话框中按照如图所示的参数进行设置。然后单击OK(确定）按钮完成设置。</p><p><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E5%8F%98%E9%87%8F.jpg"alt="变量" /><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E8%BE%93%E5%85%A5%E5%8F%98%E9%87%8F.png"alt="输入变量" /></p><h1 id="创建传感器信号">2.创建传感器信号</h1><ol type="1"><li><p>分别在两个连杆之间建立12个测量参考点，用于建立关节角测量传感器</p></li><li><p>在界面上依次单击机械电子学(Mechatronics)→机械系统(MechanicalSystem )→传感器信号( Transducer Signal)→新建(New)，系统弹出创建传感器信号对话框。在信号名称 （SignalName)栏中输入axis_angle_1，在函数(Function)栏中输入(<code>AZ( ref_2, ref_1)</code>)，在单位类型栏中选择角度，在单位字符串栏中选择rad，在请求有效栏后的选项中选中开，如图所示，然后单击确定按钮,通过上述步骤建立6个关节角的传感器信号。</p><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E5%85%B3%E8%8A%82%E4%BC%A0%E6%84%9F%E5%99%A8%E4%BF%A1%E5%8F%B7.png"alt="关节传感器信号" /><figcaption aria-hidden="true">关节传感器信号</figcaption></figure></li><li><p>在界面上依次单击机械电子学(Mechatronics )→机械系统(MechanicalSystem )→传感器信号( Transducer Signal)→新建（New)，系统弹出创建输入信号对话框，添加末端位姿测量传感器，以基座标为基准。</p></li><li><p>在信号名称( SignalName)栏中输入<code>tool_position_x</code>，在函数(Function)栏中输入<code>DX( .KUKA.Tool.MARKER_tool , .KUKA.base.jizuobiao , .KUKA.base.jizuobiao )</code>。</p></li><li><p>在单位类型(Unit Type )栏中选择长度( length )，在单位字符串 ( UnitString )栏中选择模型单位 ( model units )，在请求有效(RequestActive）栏中选中开（On)，如图所示，然后单击确定（OK）按钮，同理添加姿态传感器信号。</p><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E6%9C%AB%E7%AB%AF%E4%BD%8D%E7%BD%AE%E4%BC%A0%E6%84%9F%E5%99%A8.png"alt="末端位置传感器" /><figcaption aria-hidden="true">末端位置传感器</figcaption></figure><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E6%9C%AB%E7%AB%AF%E5%A7%BF%E6%80%81%E4%BC%A0%E6%84%9F%E5%99%A8.png"alt="末端姿态传感器" /><figcaption aria-hidden="true">末端姿态传感器</figcaption></figure></li></ol><h1 id="创建激励信号">3.创建激励信号</h1><ol type="1"><li>在界面上依次单击机械电子学( Mechatronics )→机械系统( MechanicalSystem )→激励信号( Actuator Signal )→新建(New)，系统弹出创建激励信号对话框。</li><li>在信号名称( Signal Name)栏中输入controller_torque，在单位类型( UnitType)栏中选择扭矩( torque )，在单位字符串(Unit String )栏中选择模型单位(model units )，在请求有效(RequestActive)栏中选中开( On)，如图8-43所示，然后单击确定（OK）按钮。</li></ol><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E6%BF%80%E5%8A%B1%E4%BF%A1%E5%8F%B7.png"alt="激励信号" /><figcaption aria-hidden="true">激励信号</figcaption></figure><h1 id="编辑控制系统">4.编辑控制系统</h1><ol type="1"><li><p>在界面上单击编辑(Edit)菜单，然后单击修改( Modify)选项，双击ball_beam，从中选择SFORCE_x，单击确定（OK)按钮，系统弹出控制系统。</p></li><li><p>单击函数( Function),在其中输入<code>VARVAL(.KUKA.ues_csa_force_z_control.signal_variable)</code>,其余采用默认设置，然后单击确定（OK)按钮完成创建，如图所示。</p><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E7%BC%96%E8%BE%91%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"alt="编辑控制系统" /><figcaption aria-hidden="true">编辑控制系统</figcaption></figure><h1 id="用信号管理器连接信号">5.用信号管理器连接信号</h1><ol type="1"><li><p>在界面上依次单击机械电子学(Mechatronics )→信号管理(Signal Manager)→显示( Display ) ,如图所示，单击应用（Apply)按钮，系统弹出信号管理器。</p><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E4%BF%A1%E5%8F%B7%E7%AE%A1%E7%90%86%E5%99%A8.png"alt="信号管理器" /><figcaption aria-hidden="true">信号管理器</figcaption></figure></li><li><p>双击信号管理器中的任意一个表格，系统弹出信号管理，单击Inputs(输入）中的第一栏，系统弹出如图所示的对话框。单击ConnectorSignalName(连接信号名称）下的第一行，然后单击Select(选择）按钮，再单击Apply(应用)按钮，将输入输出与信号进行连接。</p><p><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E8%BE%93%E5%85%A5%E4%BF%A1%E5%8F%B7.png"alt="输入信号" /><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E8%BE%93%E5%87%BA%E4%BF%A1%E5%8F%B7.png"alt="输出信号" /></p></li></ol></li></ol><h1 id="输出面板">6.输出面板</h1><p>在界面菜单中依次单击机械电子学(Mechatronics )→工具(Tools)→输出面板(Export Plant）系统弹出输出面板控制系统，在系统名称(SystemName ）中输入<code>ues_robot_control</code>，在文件前辍( File Prefix)栏中输入<code>robot_control</code>，在目标软件（TargetSoftware)栏中选择MATLAB，如图所示。单击确定（OK）按钮，系统弹出信息提示，单击确定（OK）按钮关闭信息。</p><figure><imgsrc="adams%E6%9C%BA%E7%94%B5%E4%BB%BF%E7%9C%9F/%E8%BE%93%E5%87%BA%E9%9D%A2%E6%9D%BF.png"alt="输出面板" /><figcaption aria-hidden="true">输出面板</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
      <tag>adams</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人轨迹转换</title>
    <link href="/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BD%A8%E8%BF%B9%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BD%A8%E8%BF%B9%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="机器人铣削运动链">机器人铣削运动链</h1><p>如图所示为机器人铣削系统，由机器人本体、变位器、工件以及电主轴组成，机器人通过底座本体固定于地面，而电主轴通过刚性连接固定于末端法兰。机器人铣削系统包括了多个参考坐标系，机器人基坐标系<em><code>XB-YB-ZB</code></em>定义于机器人底座中心，机器人工具坐标系<em><code>XT-YT-ZT</code></em>可通过电主轴标定确定，变位器坐标系<em>XZ-YZ-<code>ZZ</code></em>定义在变位器的中心位置，会根据变位器的旋转运动而发生变化，工件坐标系<em><code>XW-YW-ZW</code></em>会根据工件的装夹位置和姿态进行确定，要对机器人铣削系统进行运动链分析，需要对各个坐标系进行标定。</p><figure><img src="http://imgbed.leiting2020.top//img/202306062034470.png"alt="image-20230606203420846" /><figcaption aria-hidden="true">image-20230606203420846</figcaption></figure><h2 id="工具坐标系标定">工具坐标系标定</h2><p>机器人末端工具坐标系<em><code>XT-YT-ZT</code></em>的标定分为电主轴刀尖原点和姿态的确定。电主轴刀尖原点可以使用<code>XYZ 4点法</code>和<code>XYZ参照法</code>进行测量，电主轴刀尖姿态可以使用<code>ABC世界坐标法</code>和<code>ABC两点法</code>进行测量。</p><figure><img src="http://imgbed.leiting2020.top//img/202306062045684.png"alt="image-20230606204541414" /><figcaption aria-hidden="true">image-20230606204541414</figcaption></figure><figure><img src="http://imgbed.leiting2020.top//img/202306062045902.png"alt="image-20230606204555740" /><figcaption aria-hidden="true">image-20230606204555740</figcaption></figure><h2 id="工件坐标系标定">工件坐标系标定</h2><p>要实现工件坐标系<em><code>XW-YW-ZW</code></em>的标定，需要对工件变位器坐标系<em><code>XZ-YZ-ZZ</code></em>进行标定。首先，在变位器上确定一个参照点，并在机器人系统中输入其距离变位器中心的距离。将已标定的工具坐标系移动至参考点，并对工具坐标系位置进行测量保存，重复上述步骤3次，每次重复前都需要转动变位器，以便工具坐标系从不同的出发位置移动到参考点，如图所示。</p><figure><img src="http://imgbed.leiting2020.top//img/202306062056418.png"alt="image-20230606205615187" /><figcaption aria-hidden="true">image-20230606205615187</figcaption></figure><p>使用已标定好的电主轴确定工件坐标系的原点，机器人控制系统会计算工件坐标系原点与变位器坐标系之间的相对位置，通过<code>ABC 2点法</code>确定工件坐标系相对于变位器的姿态，得到了工件坐标系相对于变位器的相对位姿。</p><figure><img src="http://imgbed.leiting2020.top//img/202306062133135.png"alt="image-20230606213300894" /><figcaption aria-hidden="true">image-20230606213300894</figcaption></figure><p>在完成工件坐标系的标定后，还需要确定变位器的运行模式，变位器有两种运行模式，一种是同步运行模式，通过在KUKAKRL程序中将机器人基坐标系与变位器相关联，这样机器人与变位器会同步运行；另一种是非同步模式，在KUKAKRL程序中将变位器与基坐标系解除关联，机器人与变位器会按一定顺序先后运行。为了提高机器人加工系统的稳定性，铣削加工中通常使用非同步模式。</p><h2 id="运动链分析">运动链分析</h2><p>如图2-5所示为机器人铣削系统，机器人铣削系统中各个坐标系形成一个闭环，构成了一个完整的运动链，机器人末端坐标系<em>XT-YT-ZT</em>的姿态在基坐标系中可以定义为：<span class="math display">\[_{tool}^BT={_Z^B}T\cdot T_{roz}(\beta)\cdot{_W^Z}T\cdot {_{tool}^W}T\]</span> 其中，<spanclass="math inline">\(_Z^B{T}\)</span>为基坐标系下变位器的位姿矩阵，<spanclass="math inline">\(T_{roz}(\beta)\)</span>为变位器绕自身<em>Z</em>轴旋转<em>β</em>后的变换矩阵，<spanclass="math inline">\(_W^Z{T}\)</span>为工件坐标系相对于变位器的位姿矩阵，与工件装夹位置有关，<spanclass="math inline">\(_{tool}^W{T}\)</span>为给定的加工任务。</p><p>UG软件生成的加工轨迹通常适用于数控加工，轨迹信息包括加工位置<spanclass="math inline">\(\boldsymbol{P}_{\mathrm{tool}}^{\mathrm{Z}}\)</span>和刀轴方向矢量<em><strong>V*</strong>tool。要确定机器人末端工具的加工轨迹，需要将五轴加工任务转换为机器人末端的六自由度运动轨迹，即机器人末端的位置(</em>X<em>,</em>Y<em>,</em>Z<em>)和姿态(</em>A<em>,</em>B<em>,</em>C<em>)。与机器人运动轨迹相比，五轴加工的位置和刀轴方向是确定的，但缺少一个绕刀轴旋转方向的冗余自由度</em>α*，如图2-11所示。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
      <tag>轨迹转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人轨迹生成</title>
    <link href="/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/"/>
    <url>/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一加工前处理">一、加工前处理</h1><h2 id="选择模板">1.选择模板</h2><p>使用软件打开模型，进入到加工界面，选择<strong>多轴加工模板</strong></p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352741749409.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><h2id="设置机床坐标系以及安全平面"><strong>2.设置机床坐标系以及安全平面。</strong></h2><p>右键点击工序导航器空白处切换到几何视图，双击MCS_MILL结点</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342071663647.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342072167570.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>点击确定，再定义安全平面，<strong>选择自动平面，安全距离为10.</strong></p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352744533127.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><h2 id="设置几何体"><strong>3.设置几何体</strong></h2><p>双击如下所示<strong>WORKPIECE</strong>结点，选择部件几何体</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342075332981.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315113735427.png"alt="image-20220315113735427" /><figcaption aria-hidden="true">image-20220315113735427</figcaption></figure><p>点击确定后弹出如下对话框，点击如下<strong>指定毛坯</strong>按钮</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315113818697.png"alt="image-20220315113818697" /><figcaption aria-hidden="true">image-20220315113818697</figcaption></figure><p>系统弹出选择毛坯对话框，选择<strong>包容块</strong>，参数设置如下：</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315113808133.png"alt="image-20220315113808133" /><figcaption aria-hidden="true">image-20220315113808133</figcaption></figure><p>点击确定后退回到工件对话框，观察到如图所示图案高亮，就可以点击确定按钮完成几何体的设置。</p><h2 id="设置铣削区域几何体">4.设置铣削区域几何体</h2><p>右键点击WORKPIECE结点，在弹出的选项中选择插入子选项下的几何体按钮。</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342081781160.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>弹出对话框，<strong>设置几何体为WORKPIECE</strong>，点击<strong>铣削几何体</strong>按钮，名称为<strong>MILL_AREA_1</strong>如下所示：</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352747908537.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>弹出铣削边界对话框，点击<strong>指定切削区域按钮</strong>按钮</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315114124484.png"alt="image-20220315114124484" /><figcaption aria-hidden="true">image-20220315114124484</figcaption></figure><p>观察工序导航器可以发现多了<strong>铣削几何体1</strong>节点做为WORKPIECE结点的<strong>子节点</strong>出现：</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315114201859.png"alt="image-20220315114201859" /><figcaption aria-hidden="true">image-20220315114201859</figcaption></figure><h2 id="设置刀具">5.设置刀具</h2><p>右键点击工序导航器切换至机床视图，右键单击未用项下的刀具按钮</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352759483932.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342093646955.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>添加两把刀具，一把用于粗加工的平头铣刀，一把球头铣刀。</p><h1 id="二添加粗加工工序">二、添加粗加工工序</h1><p>1.添加平面铣加工工序</p><p>将工序导航器切换至程序视图，右键点击插入工序：</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342098144760.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342098387492.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>弹出对话框，选择平面铣（planar Mill）参数设置如下：</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315114652207.png"alt="image-20220315114652207" /><figcaption aria-hidden="true">image-20220315114652207</figcaption></figure><p>弹出平面铣对话框，设置切削层参数，可以修改相应的切削参数</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315114725330.png"alt="image-20220315114725330" /><figcaption aria-hidden="true">image-20220315114725330</figcaption></figure><p>点击生成，出现刀轨效果如下：</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315114841403.png"alt="image-20220315114841403" /><figcaption aria-hidden="true">image-20220315114841403</figcaption></figure><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315110346007.png"alt="image-20220315110346007" /><figcaption aria-hidden="true">image-20220315110346007</figcaption></figure><h1 id="三精加工工序">三、精加工工序</h1><p>将工序导航器切换至程序视图，右键点击插入工序：</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15342098387492-164731619499113.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>弹出对话框，选择<strong>可变轴轮廓铣（VARIABLE_CONTOUR）</strong>，选择之前创建的<strong>铣削几何体（MILL_AREA）</strong>，参数设置如下</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315115034297.png"alt="image-20220315115034297" /><figcaption aria-hidden="true">image-20220315115034297</figcaption></figure><p>弹出<strong>可变轮廓铣</strong>对话框，设置驱动方法为曲面，</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315115140634.png"alt="image-20220315115140634" /><figcaption aria-hidden="true">image-20220315115140634</figcaption></figure><p>弹出对话框，点击指定驱动几何体按钮，如下：</p><p>通过修改驱动设置可以改变铣削参数</p><figure><imgsrc="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/image-20220315115320124.png"alt="image-20220315115320124" /><figcaption aria-hidden="true">image-20220315115320124</figcaption></figure><p>点击确定，系统回退至曲面区域驱动方法对话框，选择切削方向如下:</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352768746542.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>选择完成后系统有回退至之前对话框，设置材料侧方向，点击如下按钮，</p><figure><img src="%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/15352770378816.png"alt="undefined" /><figcaption aria-hidden="true">undefined</figcaption></figure><p>点击生成刀轨</p><p>刀轨生成后可以在3d动态中查看铣削状态。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
      <tag>轨迹生成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谱聚类算法</title>
    <link href="/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>谱聚类算法</strong>：谱指的是某个矩阵的<strong>特征值</strong>。</p><p>谱聚类的思想来源于图论，它把待聚类的数据集中的每一个样本看做是图中一个<strong>顶点</strong>，这些顶点连接在一起，连接的这些<strong>边上有权重</strong>，<strong>权重的大小</strong>表示这些样本之间的<strong>相似程度</strong>。<strong>同一类</strong>的顶点它们的<strong>相似程度很高</strong>，在图论中体现为同一类的顶点中连接它们的边的<strong>权重很大</strong>；<strong>不在同一类</strong>的顶点连接它们的边的<strong>权重很小</strong>。于是谱聚类的<strong>最终目标</strong>就是找到一种<strong>切割图的方法</strong>，使得切割之后的各个子<strong>图内的权重很大</strong>，<strong>子图之间的权重很小</strong>。</p><figure><img src="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/202203111026750.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="一预备知识">一、预备知识</h1><ul><li><p>假设给定一个数据集<span class="math inline">\(X=\{x_1,x_2,...,x_n\}\)</span>，我们将这个n个数据向量当做m维空间中某一幅无向图上的一个个点，目的是衡量这些点的相似性。</p></li><li><p>把图叫做相似图，记为<spanclass="math inline">\(G=(V,E)\)</span>，其中<spanclass="math inline">\(V=\{ v_1,v_2...,v_n \}\)</span>表示顶点，<spanclass="math inline">\(E\)</span>表示边的集合。两个顶点<spanclass="math inline">\(v_i,v_j\)</span>的边的权重记为<spanclass="math inline">\(\omega_{ij}\)</span></p></li><li><p>相似性用<spanclass="math inline">\(s_{ij}\)</span>表示，越大表示越相似</p></li><li><p>n个权重点构成一个矩阵<spanclass="math inline">\(W=(\omega_{ij})\)</span></p></li></ul><h2id="邻接矩阵度和度矩阵连通子图">1.1<strong>邻接矩阵、度和度矩阵、连通子图</strong></h2><h3 id="邻接矩阵">（1）邻接矩阵</h3><p>所有顶点之间的权重构成一个矩阵，叫<strong>邻接矩阵</strong>，也叫<strong>权重矩阵</strong>。两个顶点互相之间的权重是一样的，因此<spanclass="math inline">\(W\)</span>是对称矩阵。</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220311114622575.png"alt="image-20220311114622575" /><figcaption aria-hidden="true">image-20220311114622575</figcaption></figure><h3 id="度矩阵">（2）度矩阵</h3><p>对于某个顶点的<strong>度</strong><spanclass="math inline">\(d_i,i=1,2,...,n\)</span>，定义为</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220311115316683.png"alt="image-20220311115316683" /><figcaption aria-hidden="true">image-20220311115316683</figcaption></figure><p>度其实就是邻接矩阵的第<spanclass="math inline">\(i\)</span>行的和。（因为邻接矩阵是对称矩阵，所以第<spanclass="math inline">\(j\)</span>列的和也可以）</p><p><strong>度矩阵</strong>定义为<spanclass="math inline">\(n\)</span>个度构成的<strong>对角矩阵</strong>：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220311115709665.png"alt="image-20220311115709665" /><figcaption aria-hidden="true">image-20220311115709665</figcaption></figure><p>对于给定顶点<span class="math inline">\(V\)</span>的一个子集<spanclass="math inline">\(A\subset V\)</span>，定义它的补为<spanclass="math inline">\(\bar{A}\)</span>。对于某个顶点<spanclass="math inline">\(v_i \in A\)</span>，定义对应的指示向量为<spanclass="math inline">\(1_A = [f_1,f_2...,f_n]^T \in R^n\)</span>，若<spanclass="math inline">\(v_i \inA\)</span>，则<strong>指示向量</strong>第i个位置为1，即<spanclass="math inline">\(f_i =1\)</span>，否则为0；对于两个子集A和B，我们定义：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220311132125530.png"alt="image-20220311132125530" /><figcaption aria-hidden="true">image-20220311132125530</figcaption></figure><p>公式(4)表示两个子集中顶点之间的权重之和，<strong>注意这里不包含子集内顶点之间的权重</strong>。</p><p><strong>子集大小</strong>有两种定义</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220311132240644.png"alt="image-20220311132240644" /><figcaption aria-hidden="true">image-20220311132240644</figcaption></figure><h3 id="连通子图">（3）连通子图</h3><p>如果<spanclass="math inline">\(A\)</span>中的任意两个顶点都至少存在一条路径将他们连接起来，并且<spanclass="math inline">\(A\)</span>中其他顶点也在这条路径上，则<spanclass="math inline">\(A\)</span>是<strong>连接</strong>的。如果子集<spanclass="math inline">\(A\)</span>是连接的，并且与他的补<spanclass="math inline">\(\bar{A}\)</span>不存在任何的连接，则称为<strong>连通子图</strong>。非空子集<spanclass="math inline">\(A_1,A_2,...,A_k\)</span>构成<spanclass="math inline">\(V\)</span>的一个<strong>分割</strong>，即<spanclass="math inline">\(A_1\cup A_2 \cup... \cup A_k=V\)</span></p><h2 id="相似图的衡量方法">1.2 相似图的衡量方法</h2><p>如果度量空间具有距离越远越不相似，越近越相似的特性，通常作为<strong>相似度</strong>的衡量标准。</p><h3 id="近邻法">（1）$ - 近邻法 $</h3><p>采用欧式距离计算两个顶点的距离<spanclass="math inline">\(s_{ij}\)</span>，然后设定一个阈值<spanclass="math inline">\(\epsilon\)</span></p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312185718753.png"alt="image-20220312185718753" /><figcaption aria-hidden="true">image-20220312185718753</figcaption></figure><h3 id="k-邻近法">（2）k-邻近法</h3><p>利用<strong>KNN算法</strong>遍历所有的样本点，取每个样本最近的k个点作为近邻，取与顶点最近的<spanclass="math inline">\(k\)</span>个顶点，该顶点与<spanclass="math inline">\(k\)</span>个顶点的权重都大于0。但是这种方法不能保证相似矩阵是对称的，因为两个顶点可能不是在互相的近邻中。一般使用两种方法保证相似矩阵的对称。</p><ul><li>两个顶点只要其中一个点在另一个顶点的近邻中，则令<spanclass="math inline">\(\omega_{ij}=\omega_{ji}\)</span></li></ul><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312190301385.png"alt="image-20220312190301385" /><figcaption aria-hidden="true">image-20220312190301385</figcaption></figure><ul><li>两个顶点同时在双方的近邻中，则令<spanclass="math inline">\(\omega_{ij}=\omega_{ji}\)</span>​，否则<spanclass="math inline">\(\omega_{ij}=\omega_{ji}=0\)</span></li></ul><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312190424470.png"alt="image-20220312190424470" /><figcaption aria-hidden="true">image-20220312190424470</figcaption></figure><h3 id="全连接法">（3）全连接法</h3><p>该方法将所有的顶点都连接起来。然后通过度量空间中某种对称度量算子来计算顶点之间的相似度。常用的有<strong>多项式核函数，高斯核函数和Sigmoid核函数</strong>。最常用的是高斯核函数RBF，此时相似矩阵和邻接矩阵相同，比如使用<strong>高斯核函数</strong>计算两个顶点之间的相似度：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312190629703.png"alt="image-20220312190629703" /><figcaption aria-hidden="true">image-20220312190629703</figcaption></figure><p>实际应用中，使用<strong>全连接法</strong>是最普遍的，而在全连接法中使用<strong>高斯径向核RBF</strong>是最普遍的。</p><h2 id="图拉普拉斯矩阵">1.3 图拉普拉斯矩阵</h2><h3 id="非规范化的图拉普拉斯矩阵">1.3.1 非规范化的图拉普拉斯矩阵</h3><p>图拉普拉斯矩阵的定义如下：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312200714522.png"alt="image-20220312200714522" /><figcaption aria-hidden="true">image-20220312200714522</figcaption></figure><p>其中<spanclass="math inline">\(D\)</span>为度矩阵，W为权重（近似）矩阵，所以L也是对称矩阵</p><p><strong>性质：</strong></p><ul><li>对于任意向量$f R^n $</li></ul><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312201051146.png"alt="image-20220312201051146" /><figcaption aria-hidden="true">image-20220312201051146</figcaption></figure><ul><li><p><spanclass="math inline">\(L\)</span>是一个<strong>对称半正定矩阵</strong>。</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312201216584.png"alt="image-20220312201216584" /><figcaption aria-hidden="true">image-20220312201216584</figcaption></figure></li><li><p><spanclass="math inline">\(L\)</span>的最小特征值为0，对应的特征向量是全为1的向量<spanclass="math inline">\(1\)</span>。<span class="math inline">\(0 \le\lambda_1 \le \lambda_2 ...\le \lambda_n\)</span></p></li><li><p>对于一个对角分块矩阵<span class="math inline">\(A\)</span></p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312201648665.png"alt="image-20220312201648665" /><figcaption aria-hidden="true">image-20220312201648665</figcaption></figure><p>他的特征值等于各个分块矩阵的特征值。</p></li><li><p>若<spanclass="math inline">\(G\)</span>是一个具有非负权重的无向图，则它对应的图拉普拉斯矩阵L的0<strong>特征值的代数重数</strong>k等于G中<strong>连通子图的个数</strong>，假设k个连通子图记为<spanclass="math inline">\(A_1,A_2,...A_k\)</span>，并且0特征值对应的特征值空间由各个连通子图的指示向量<spanclass="math inline">\(1_{A_i} \in R_n\)</span>。</p></li></ul><h3 id="规范化的图拉普拉斯矩阵">1.3.2规范化的图拉普拉斯矩阵</h3><p>有两种规范化的图拉普拉斯矩阵，他们互相联系。这两种规划化的图拉普拉斯矩阵定义为：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312205724786.png"alt="image-20220312205724786" /><figcaption aria-hidden="true">image-20220312205724786</figcaption></figure><p>公式(19)中的<spanclass="math inline">\(L_{sym}\)</span>是一个对称矩阵，下标sym是单词symmetric的简写，<spanclass="math inline">\(L_{rw}\)</span>不是对称矩阵，该矩阵和随机游走(randomwalk)相关，下标rw就是random walk 的首字母组合。</p><p><span class="math inline">\(L_{sym}\)</span>的性质:</p><ul><li>对于任意向量<span class="math inline">\(f \in R^n\)</span></li></ul><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312205922264.png"alt="image-20220312205922264" /><figcaption aria-hidden="true">image-20220312205922264</figcaption></figure><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312205930303.png"alt="image-20220312205930303" /><figcaption aria-hidden="true">image-20220312205930303</figcaption></figure><ul><li><p><span class="math inline">\(L_{sym}\)</span>和<spanclass="math inline">\(L_{rw}\)</span>具有相同的特征值，对应的特征值向量关系为<span class="math display">\[\omega = D^{1/2} u\]</span></p></li><li></li></ul><h1 id="二切割方法">二、切割方法</h1><p>优化的目标函数为：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312210846810.png"alt="image-20220312210846810" /><figcaption aria-hidden="true">image-20220312210846810</figcaption></figure><h2 id="ratiocut切图">2.1 RatioCut切图</h2><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312211959073.png"alt="image-20220312211959073" /><figcaption aria-hidden="true">image-20220312211959073</figcaption></figure><p>引入指示向量<spanclass="math inline">\(h_j∈{h_1,h_2,..h_k},j=1,2,...k,\)</span>对于任意一个向量<spanclass="math inline">\(h_j\)</span>,它是一个n维向量（n为样本数），我们定义</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312212210088.png"alt="image-20220312212210088" /><figcaption aria-hidden="true">image-20220312212210088</figcaption></figure><p>对应的<strong>RatioCut函数表达式</strong>为：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312212238622.png"alt="image-20220312212238622" /><figcaption aria-hidden="true">image-20220312212238622</figcaption></figure><p>松弛化的目标函数：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213754655.png"alt="image-20220312213754655" /><figcaption aria-hidden="true">image-20220312213754655</figcaption></figure><p>将图切割为k个分组的问题转换成了求图拉普拉斯矩阵L的<strong>前k个最小特征值对应的特征向量<spanclass="math inline">\(h_j∈{h_1,h_2,..h_k},j=1,2,...k,\)</span></strong>和L二次型之和。</p><p>求出来的<spanclass="math inline">\(h_i\)</span>并不能准确指示顶点所属类别，将矩阵<spanclass="math inline">\(H=[h_1,h_2,..h_k]\)</span>当作一个新的具有k个维度特征n个样本的数据集进行<spanclass="math inline">\(k-means\)</span>聚类。是对每一个样本聚类，聚类的类别数是k,也就是对H的每一行进行聚类。</p><h2 id="ncut切图">2.2 Ncut切图</h2><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213256066.png"alt="image-20220312213256066" /><figcaption aria-hidden="true">image-20220312213256066</figcaption></figure><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213419592.png"alt="image-20220312213419592" /><figcaption aria-hidden="true">image-20220312213419592</figcaption></figure><p>优化目标任然是</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213433072.png"alt="image-20220312213433072" /><figcaption aria-hidden="true">image-20220312213433072</figcaption></figure><p>松弛化的目标函数：</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213820132.png"alt="image-20220312213820132" /><figcaption aria-hidden="true">image-20220312213820132</figcaption></figure><p>令<span class="math inline">\(B= D^{1/2}H\)</span>:</p><figure><imgsrc="%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/image-20220312213915761.png"alt="image-20220312213915761" /><figcaption aria-hidden="true">image-20220312213915761</figcaption></figure><p>上式的解<span class="math inline">\(B^*\)</span>也就是矩阵<spanclass="math inline">\(L_{sym}\)</span>的前k个最小特征值对应的特征向量按列排列成<spanclass="math inline">\(B^* = \{ b_1,b_2,...,b_k\}\)</span>。反带入可得<spanclass="math inline">\(L_{rw}\)</span>前k个最小特征值对应的特征向量<spanclass="math inline">\(H=\{h_1,h_2,..h_k\}\)</span></p><p>或者矩阵<span class="math inline">\(L\)</span>的前<spanclass="math inline">\(k\)</span>个最小的广义特征值对应的特征向量。</p><h1 id="三算法实现步骤">三、算法实现步骤</h1><p>最常用的相似矩阵的生成方式是基于<strong>高斯核距离</strong>的全连接方式，最常用的<strong>切图方式是Ncut</strong>。而到最后常用的<strong>聚类方法为K-Means</strong>。</p><p>假设聚成<span class="math inline">\(k\)</span>个分组</p><p>（1）计算相似度矩阵<span class="math inline">\(W\)</span></p><p>（2）计算度矩阵<span class="math inline">\(D\)</span></p><p>（3）计算图拉普拉斯矩阵<spanclass="math inline">\(L\)</span>，构建标准化后的图拉普拉斯矩阵<spanclass="math inline">\(D^{-1/2}LD^{-1/2}\)</span></p><p>（4）直接对<spanclass="math inline">\(D^{-1/2}LD^{-1/2}\)</span>进行特征值分解，获取其前<spanclass="math inline">\(k\)</span>个特征值对应的特征向量按照列排成矩阵<spanclass="math inline">\(Q=[q_1,q_2,...,q_k]\)</span></p><p>（5）对矩阵<span class="math inline">\(Q\)</span>的 所有行<spanclass="math inline">\(r_1,r_2,...r_n\)</span>标准化，组成<spanclass="math inline">\(n*k\)</span>进行聚类，如使用<spanclass="math inline">\(k-means\)</span>方法或者别的方法进行聚类得到<spanclass="math inline">\(C_1,C_2,...,C_k\)</span></p><p>（6）输出原始数据的分组<spanclass="math inline">\(A_1,A_2,...,A_k\)</span>，其中<spanclass="math inline">\(A_i=\{v_j|r_j \in C_i \}\)</span></p><p>注意：在第(4)步也可以再计算规范化的矩阵<spanclass="math inline">\(L_{sym}\)</span>，在对这个矩阵做特征分解或者做广义特征值分解，后面步骤相同。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>聚类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mcsmanager</title>
    <link href="/2021/07/21/note/%E6%B8%B8%E6%88%8F/Mcsmanager/"/>
    <url>/2021/07/21/note/%E6%B8%B8%E6%88%8F/Mcsmanager/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>Minecraft</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray带伪装一键脚本使用教程</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E4%B8%80%E4%BB%B6%E4%BC%AA%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E4%B8%80%E4%BB%B6%E4%BC%AA%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="v2ray带伪装一键脚本使用教程">V2ray带伪装一键脚本使用教程</h2><ol type="1"><li>准备一个境外服务器，想服务器速度快请参考 <ahref="https://v2xtls.org/搬瓦工vps购买教程/">搬瓦工VPS购买教程</a> 或从<a href="https://v2xtls.org/cn2-gia-vps和商家推荐/">CN2 GIAVPS商家推荐</a> 选购，想ip被封后免费换请参考：<ahref="https://v2raytech.com/vultr-buy-vps-tutorial/">购买vultr服务器超详细图文教程</a>。</li></ol><p><strong>伪装的前提是需要一个域名（例如hijk.art），并且域名的某个主机名（例如www.hijk.art）正确解析到服务器的ip。</strong>对域名没有要求，国内/国外注册的都可以，<strong>不需要备案</strong>，不会影响使用，也不会带来安全/隐私上的问题。购买域名可参考：<ahref="https://v2xtls.org/namesilo域名注册和使用教程/">Namesilo购买域名详细教程</a>。不想购买请使用常规版的一键脚本：<ahref="https://v2xtls.org/v2ray多合一脚本，支持vmesswebsockettlsnginx、vlesstcpxtls、vlesstcptls等组合/">v2ray一键脚本</a>。</p><p>值得一提的是本V2ray带伪装一键脚本支持ipv6only服务器，但是不建议用只有ipv6的VPS用来科学上网。</p><p><strong>如果服务器有在运行网站</strong>，请联系网站运维再执行脚本，否则可能导致原来网站无法访问，本人不负责！</p><ol start="2" type="1"><li><p>如果vps运营商开启了防火墙（阿里云、Ucloud、腾讯云、AWS、GCP等商家默认有，搬瓦工/hostdare/vultr等商家默认关闭），请先登录vps管理后台放行80和443端口，否则可能会导致获取证书失败。此外，<strong>本脚本支持上传自定义证书</strong>，可跳过申请证书这一步，也可用在<ahref="https://v2xtls.org/tag/nat-vps/">NAT VPS</a>上。</p></li><li><p>ssh连接到服务器。Windows系统请参考 <ahref="https://v2xtls.org/bitvise连接linux服务器教程/">Bitvise连接Linux服务器教程</a>，mac用户请参考<ahref="https://v2xtls.org/mac电脑连接linux教程/">Mac电脑连接Linux教程</a>。</p></li><li><p>复制（或手动输入）下面命令到终端</p></li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">yum</span> install -y curl<br><span class="hljs-symbol">bash</span> &lt;(curl -<span class="hljs-built_in">sL</span> https:<span class="hljs-comment">//s.hijk.art/centos_install_v2ray2.sh)</span><br></code></pre></td></tr></table></figure><p>按回车键，脚本开始询问你一些信息，请按照提示输入，其中一些问题可直接按回车使用默认值。</p><p>接下来脚本会自动疯狂运行，<strong>如果安装过程卡住，请耐心等待几分钟；</strong>期间网络断开（windows上表现为黑框框中或者顶部标题出现disconnected字样，mac表现为终端出现“closedby remote host”或”brokenpipe”），请重新连接后再次执行命令。脚本运行成功会输出配置信息，截图如下：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/带伪装v2ray配置.png"><imgsrc="F:\个人\科学上网\file\带伪装v2ray配置.png"alt="带伪装v2ray配置" /></a></p><p>带伪装v2ray配置</p><p><strong>到此服务端配置完毕</strong>，服务器可能会自动重启(<strong>没提示重启则不需要</strong>)，windows终端出现“disconnected”，mac出现“closedby remote host”说明服务器成功重启了。</p><p>打开浏览器输入伪装域名，<strong>能正常打开伪装站</strong>，说明服务端在正常运行；输入域名加伪装路径，出现”badrequest”，则说明服务端已经完全没问题。</p><h2 id="v2ray带伪装一键脚本其他事项">V2ray带伪装一键脚本其他事项</h2><ol type="1"><li><p>查看v2ray运行状态 /配置：<code>bash &lt;(curl -sL https://s.hijk.art/centos_install_v2ray2.sh) info</code></p></li><li><p>v2ray管理命令：启动：<code>systemctl start v2ray</code>，停止：<code>systemctl stop v2ray</code>，重启：<code>systemctl restart v2ray</code>；</p></li><li><p>nginx管理命令：测试配置文件有无错误：<code>nginx -t</code>，启动：<code>systemctl start nginx</code>，停止：<code>systemct stop nginx</code>，重启：<code>systemctl restart nginx</code>；</p></li><li><p>更新v2ray到最新版：<code>bash &lt;(curl -sL https://s.hijk.art/goV2.sh)</code>（提示“装不上daemon”不用管，<code>systemctl restart v2ray</code>重新启动v2ray就好了）</p></li><li><p>伪装网站SSL证书放在配置文件的文件夹下，会自动续期；</p></li><li><p>卸载：<code>bash &lt;(curl -sL https://s.hijk.art/centos_install_v2ray2.sh) uninstall</code>；</p></li><li><p>建站/改伪装网站请参考：<ahref="https://v2xtls.org/v2ray伪装建站教程/">v2ray伪装建站教程</a></p></li><li><p>搭建TG代理请参考： <ahref="https://v2xtls.org/一键搭建telegram的mtproto代理/">一键搭建Telegram的MTProto代理</a></p></li><li><p>希望上cdn，请根据本教程操作完后再阅读：<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">v2ray使用cloudflare中转流量，拯救被墙ip</a>；</p></li><li><p>理论上只要流量够、服务器扛得住，同一个配置支持无数人、无限设备使用。如果想为不同的人配置不同的id，请参考：<ahref="https://v2xtls.org/v2ray多用户配置/">v2ray多用户配置</a>；</p></li><li><p>脚本默认使用BBR技术加速， BBR换成魔改BBR/BBR Plus/锐速清参考：<ahref="https://v2xtls.org/安装魔改bbr-bbr-plus-锐速lotserver/">安装魔改BBR/BBRPlus/锐速(Lotserver)</a>；</p></li><li><p>搭建好伪装v2ray后建站/改伪装网站请参考：<ahref="https://v2xtls.org/v2ray伪装建站教程/">v2ray伪装建站教程</a>；</p></li><li><p>刚搭建好带伪装的v2ray不要猛上流量，否则可能导致被限速、端口被墙，严重可能ip被墙。</p></li></ol><h2 id="v2ray客户端下载">V2ray客户端下载</h2><p>接下来是<strong>科学上网最后一步</strong>：下载客户端，并参考页面中的配置教程进行配置：</p><p><a href="https://v2xtls.org/v2ray-windows客户端下载/">v2raywindows客户端下载</a></p><p><ahref="https://v2xtls.org/v2ray安卓客户端下载/">v2ray安卓客户端下载</a></p><p><a href="https://v2xtls.org/v2ray-mac客户端下载/">v2raymac客户端下载</a></p><p><a href="https://v2xtls.org/v2ray-ios客户端下载/">v2rayios客户端下载</a></p><p>下载客户端配置好后，就可以愉快的上外网了！</p><h2 id="参考">参考</h2><ol type="1"><li><a href="https://v2xtls.org/v2ray教程/">V2ray教程</a></li><li><ahref="https://v2xtls.org/v2ray高级技巧：流量伪装/">v2ray高级技巧：流量伪装</a></li><li><a href="https://v2xtls.org/trojan一键脚本/">trojan一键脚本</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bitvise连接Linux服务器教程</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/Bitvise%E8%BF%9E%E6%8E%A5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/Bitvise%E8%BF%9E%E6%8E%A5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="bitvise连接linux服务器教程">Bitvise连接Linux服务器教程</h1><blockquote><p>本文转载自：https://v2raytech.com/bitvise-connect-linux-server-tutorial/，如文中内容有错误请到原文查看原始版(最新版)</p></blockquote><blockquote><p>如有问题，欢迎到 <a href="https://hijk.club/">网络跳越论坛</a> 或TG群组 https://t.me/hijkclub 交流</p></blockquote><p><strong>Bitvise</strong>是windows平台下一款功能强大的<strong>免费ssh客户端</strong>，其shell终端可以执行各种Linux命令，还有上传下载文件的终端，以及支持远程桌面连接（要求服务端已安装xrdp）。有了<strong>Bitvise</strong>，完全可以取代<strong>Xshell</strong>、<strong>putty</strong>、<strong>winSCP</strong>、<strong>SSHSecure Shell Client</strong>、<strong>secureCRT</strong>等工具。</p><blockquote><p><strong>备注：</strong>更多Windows平台免费SSH客户端可参考：<ahref="https://netfiles.pw/windows-free-ssh-clients/">Windows系统免费SSH客户端</a></p></blockquote><p><strong>Bitvise</strong>的官网是https://www.bitvise.com/ssh-client-download，可从这个页面下载windows安装包。如果官网无法打开或下载速度慢，请点击这个连接下载：<ahref="https://netfiles.pw/download.php?filename=/BvSshClient-Inst.exe">BvSshClient-Inst.exe</a>。</p><p><strong>Bitvise</strong>主要缺点是没有中文界面，因此本教程介绍Bitvise的安装和使用。</p><h2 id="bitvise教程">Bitvise教程</h2><h3 id="安装bitvise">安装Bitvise</h3><p>\1. 进 <ahref="https://www.bitvise.com/ssh-client-download">Bitvise官网</a>，点击页面中的“Bitvise SSH ClientInstaller”，保存文件到电脑上。如果官网无法打开或下载速度慢，请从这里高速下载：<ahref="https://netfiles.pw/download.php?filename=/BvSshClient-Inst.exe">BvSshClient-Inst.exe</a>。</p><p>\2.双击下载的exe文件，弹出的安装界面中勾选“同意条款”，点击下方的“Install”开始安装：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/bitvise安装界面.jpg"><imgsrc="F:\个人\科学上网\file\bitvise安装界面.jpg"alt="bitvise安装界面" /></a></p><p>bitvise安装界面</p><p>\3. 黑框滚动，出现安装的日志，出现如下弹框说明安装成功：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/bitvise安装成功.jpg"><imgsrc="F:\个人\科学上网\file\bitvise安装成功.jpg"alt="bitvise安装成功" /></a></p><p>bitvise安装成功</p><p>\4. 点击确定，安装界面消失，程序自动运行，同时桌面上出现“Bitvise SSHClient”的图标。</p><p>到此安装结束，无论使用多少次Bitvise，只需在电脑上安装一次即可。</p><h3id="bitvise使用密钥连接linux服务器">Bitvise使用密钥连接Linux服务器</h3><p>\1. 双击桌面上的Bitvise SSHClient图标，启动程序（首次安装完成后会自动运行）：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/bitvise启动界面.jpg"><imgsrc="F:\个人\科学上网\file\bitvise启动界面.jpg"alt="bitvise启动界面" /></a></p><p>bitvise启动界面</p><p>\2.填入服务器的ip、端口号(<strong>默认是22</strong>，搬瓦工默认不是22，请从后台查看)、用户名(<strong>默认是root</strong>)，”intialmethod”选“password”，在下面输入框输入密码（服务器密码在管理页面查看），同时勾选“sotreencrypted password in profile”。填好后建议点击左侧的“save profileas”按钮保存配置，下次使用时无需再填写。确认无误后，点击左下角的登录按钮，开始连接服务器。</p><p>\3. 首次连接服务器会出现主机指纹确认，点击“Accept and Save”：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/bitvise主机指纹确认.jpg"><imgsrc="F:\个人\科学上网\file\bitvise主机指纹确认.jpg"alt="bitvise主机指纹确认" /></a></p><p>bitvise主机指纹确认</p><p>如果没有出现这个页面，而是提示“由于连接方在一段时间后没有正确大幅或连接的主机没有反应，连接尝试失败”，说明ip被墙或者信息填写错误，请检查ip和端口号是否正确，如果没问题，说明ip被墙了。</p><p>\4.登录成功后，弹出两个窗口：黑乎乎的那个<strong>是终端窗口，</strong>用来输命令，另外一个像文件夹的是<strong>sftp程序，</strong>用来上传和下载文件：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/bitvise登录成功窗口.jpg"><imgsrc="F:\个人\科学上网\file\bitvise登录成功窗口.jpg"alt="bitvise登录成功窗口" /></a></p><p>bitvise登录成功窗口</p><p>如果你不小心把终端或者sftp窗口关闭了，没关系，点击主界面左边的”<strong>Newterminal console”</strong>和”<strong>New SFTPwindow</strong>“，就分别又回来了！</p><p>\5.接下来，在黑窗口里可以输入各种教程中的shell/bash命令。本站提供以下一键脚本，相关命令请点击教程查看：</p><ol type="1"><li><ahref="https://v2xtls.org/shadowsocks-ss一键脚本/">Shadowsocks/SS一键脚本</a>；</li><li><ahref="https://v2xtls.org/shadowsocksr-ssr一键脚本/">ShadowsocksR/SSR一键脚本</a>；</li><li><a href="https://v2xtls.org/v2ray一键脚本/">V2Ray一键脚本</a>；</li><li><ahref="https://v2xtls.org/v2ray带伪装一键脚本/">v2ray带伪装一键脚本</a>；</li><li><ahref="https://v2xtls.org/trojan一键脚本/">trojan一键脚本</a>。</li></ol><p><strong>注意：</strong>终端里无法按 <strong>ctrl + v粘贴</strong>，粘贴是点<strong>鼠标右键</strong>。复制更简单，<strong>选中要复制的文字就复制好了</strong>。使用过程中命令输错、终端状态不对，或者想中断脚本执行，随时按<strong>ctrl +c</strong>。另外，<strong>每个命令输完后都要按回车才执行，输入信息也是要按回车才算输入完！</strong></p><h2 id="bitvise密钥登录linux服务器">Bitvise密钥登录Linux服务器</h2><p>某些VPS商家，例如AWS、Google、<ahref="https://www.dmit.io/aff.php?aff=1062">DMIT</a>等，默认禁用了密码登录，此时需要使用密钥登录到服务器。</p><p>密钥登录的操作与密码登录流程基本一致，除了第二步有以下不同：</p><p>\1. 首先我们要导入密钥。操作为：点击主界面上的Client keymanager，然后点击“Import”，选择密钥文件，点击“打开”，最后在弹出来的框中选择Import：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/Bitvise导入密钥-1024x577-1.jpg"><imgsrc="F:\个人\科学上网\file\Bitvise导入密钥-1024x577-1.jpg"alt="Bitvise导入密钥" /></a></p><p>Bitvise导入密钥</p><p>\2. 登录信息的Initial method选“publickey”，Clientkey选刚才导入的密钥文件：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/Bitvise导入密钥-1-1024x577-1.jpg"><imgsrc="F:\个人\科学上网\file\Bitvise导入密钥-1-1024x577-1.jpg"alt="Bitvise导入密钥" /></a></p><p>Bitvise导入密钥</p><p>接下来的操作和步骤请参考上面的密码登录。</p><h2 id="文件操作">文件操作</h2><p>网上教程需要编辑某个文件，但你不会用<strong>vi/vim/nano</strong>等命令行编辑器，sftp窗口就派上用场了：sftp窗口左边是你的电脑中的文件，右边是服务器上的文件，你只需要将右边服务器要编辑的文件拖到左边窗口就下载到你的电脑上：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/Bitvise上传和下载文件.jpg"><imgsrc="F:\个人\科学上网\file\Bitvise上传和下载文件.jpg"alt="Bitvise上传和下载文件" /></a></p><p>Bitvise上传和下载文件</p><p>文件下载下来后，用熟悉的写字板、notepad++、vscode等工具打开编辑，弄好后拖到右边再上传到服务器就行了。</p><h2 id="其他">其他</h2><ol type="1"><li>点击主界面上的“<strong>logout</strong>”按钮断开连接；</li><li>搭建好程序后，无需保持Bitvise登录状态，退出不影响使用；</li><li>服务端搭建好后，在其他的电脑配置SS/SSR/V2Ray客户端就可以直接用，不用再折腾<strong>Bitvise。</strong></li></ol><p>有了<strong>Bitvise</strong>，妈妈再也不用担心不会编辑网上教程中的配置文件了！</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>ssh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray多用户配置</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>部分网友自行搭建好v2ray科学上网环境后，不好意思拒绝朋友的分享请求，所以想设置一个不同的端口或者id再分享。类似的需求v2ray都是支持的，配置起来也不算麻烦。本文就v2ray普通版、伪装版分别介绍v2ray多用户配置。</p><p>注意：自行更改配置文件需要用到 vi/vim/nano等编辑器，或者把配置文件下载到本地修改，修改完再上传到服务端。下载和上传教程请参考：<ahref="https://v2raytech.com/bitvise-connect-linux-server-tutorial/">Bitvise连接Linux服务器教程</a>(Windows用户)、<ahref="https://v2raytech.com/mac-connect-to-linux-tutorial/">Mac电脑连接Linux教程</a>(Mac用户)。</p><h2 id="普通版多用户配置">普通版多用户配置</h2><p><ahref="https://v2raytech.com/centos-one-click-install-v2ray/">v2ray一键脚本</a>运行完后，会输出配置文件路径，默认是<code>/etc/v2ray/config.json</code>，其内容类似这样：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,<br>    <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">12345</span>,<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;6be0aa25-09c1-4d8b-a96f-75cd3485021f&quot;</span>,<br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">53</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;],<br>  <span class="hljs-string">&quot;outbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;<br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>  &#125;],<br>  <span class="hljs-string">&quot;routing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;rules&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span>,<br>        <span class="hljs-string">&quot;ip&quot;</span>: [<span class="hljs-string">&quot;geoip:private&quot;</span>],<br>        <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下文教程的修改都是参考这个文件，如果出现问题，请注意与原来文件的差异。</p><p>v2ray多用户分成两种：同端口不同id，不同端口不同id。v2ray两种类型都支持，接下来分别做介绍。</p><h3 id="同端口不同id">同端口不同id</h3><p>这是最简单的配置多用户方式。方法是编辑<code>/etc/v2ray/config.json</code>文件，在”<strong>clients</strong>“一节中增加新增用户配置。例如在上面配置基础上增加一个用户：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>  <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,<br>    <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">12345</span>,<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;6be0aa25-09c1-4d8b-a96f-75cd3485021f&quot;</span>,<br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">53</span><br>        &#125;, <span class="hljs-meta"># 逗号不能少</span><br>        <span class="hljs-meta"># 下面是新增的内容</span><br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;2a1292fd-07be-37e7-af20-57668b4a546a&quot;</span>,  <span class="hljs-meta"># id可以用 /usr/bin/v2ray/v2ctl uuid生成</span><br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-meta"># 这个不用改</span><br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">63</span> <span class="hljs-meta"># 建议50-150之间的一个整数</span><br>        &#125;<br>        <span class="hljs-meta"># 新增内容结束</span><br>      ]<br>    &#125;<br>  &#125;],<br>  <span class="hljs-meta"># 下面的内容保持不变</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>“#”和后面的东西都不能出现在配置文件中，上面只是为了解释说明。</p><p>编辑好文件后，重启v2ray：<code>systemctl restart v2ray</code>。如果命令失败，或者<code>netstat -nltp | grep v2ray</code>输出为空，说明配置文件有错误，请仔细检查，改好后再重启。</p><p>接下来就可以用新的id和alterId配置客户端，其余信息保持不变。</p><h3 id="不同端口不同id">不同端口不同id</h3><p>如果希望端口也不一样，请按照如下步骤做：</p><p>\1. 首先编辑 <code>/etc/v2ray/config.json</code>文件，按照”<strong>inbounds</strong>“格式新增入口和用户。例如新增一个端口和用户后，配置文件变成：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs autoit">&#123;<br>  <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,<br>    <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">12345</span>,<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;6be0aa25-09c1-4d8b-a96f-75cd3485021f&quot;</span>,<br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">53</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;, <span class="hljs-meta"># 逗号不能省，原来这里是<span class="hljs-string">&quot;&#125;],&quot;</span></span><br>  <span class="hljs-meta"># 以下是新增的配置</span><br>  &#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">54321</span>, <span class="hljs-meta"># 端口是1000-65535之间的一个整数</span><br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>, <span class="hljs-meta"># 也可以改成其他协议，如果你知道怎么配置的话</span><br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;24813255-228d-b0e0-c3fa-e5d4c9defda1&quot;</span>, <span class="hljs-meta"># id可以用 /usr/bin/v2ray/v2ctl uuid生成</span><br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-meta"># 0或1都可以</span><br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">57</span> <span class="hljs-meta"># 建议50-150之间的一个整数</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;],<br>  <span class="hljs-meta"># 新增内容结束</span><br>  <span class="hljs-meta"># 下面的内容保持不变</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>“#”和后面的东西都不能出现在配置文件中，上面只是为了解释说明。</p><p>编辑好文件后，重启v2ray：<code>systemctl restart v2ray</code>。如果命令失败，或者<code>netstat -nltp | grep v2ray</code>输出为空，说明配置文件有错误，请仔细检查，改好后再重启。</p><p>\2. 设置防火墙放行新增的端口。CentOS系统命令是：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --permanent --add-port=54321/tcp <span class="hljs-comment"># 注意：54321要改成你的端口号</span></span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --permanent --add-port=54321/udp <span class="hljs-comment"># 注意：54321要改成你的端口号</span></span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br></code></pre></td></tr></table></figure><p>Ubuntu系统命令是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">54321</span>/tcp # 注意：<span class="hljs-number">54321</span>要改成你的端口<br><span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">54321</span>/udp # 注意：<span class="hljs-number">54321</span>要改成你的端口<br></code></pre></td></tr></table></figure><p>接下来用新的端口、id和alterId配置客户端，其余信息保持不变。</p><h2 id="带伪装多用户配置">带伪装多用户配置</h2><p><strong>同端口不同id的配置和普通版操作方法一样</strong>，配置好后重启v2ray就行了，这里不再重复。</p><p>接下来说说不同端口不同id的情形。伪装有了Nginx的介入，所以有多种情况，这里只介绍最简单的一种实现方式。</p><p>\1. 编辑 <code>/etc/v2ray/config.json</code> 文件，按照 <ahref="https://v2raytech.com/v2ray-multiple-users/#single_port">普通版同端口不同id</a>中的方法添加用户；</p><p>\2. 编辑 <code>/etc/nginx/conf.d/你的域名.conf</code> 文件，找到“<strong>listen 443 ssl http2;</strong>” 这一行，在这行下面添加“listen新的端口号 sslhttp2;”一行（新的端口号要改成整数，例如8443，不能是443）。然后保存文件，<code>nginx -t</code>检查配置有没有错误，没有错误的话重启Nginx：<code>systemctl restart nginx</code>；</p><p>\3. 设置防火墙放行端口，请参考 <ahref="https://v2raytech.com/v2ray-multiple-users/#set_firewall">普通版设置防火墙</a>中的命令。</p><p>接下来用新的端口、id和alterId配置客户端，其余信息保持不变。</p><p>如果你想添加多个端口或多个用户，重复上面的过程就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray流量伪装</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>前文 “<a href="https://tlanyan.me/v2ray-tutorial">V2Ray教程</a>”介绍了<code>V2Ray</code>基本用法，本文介绍<code>V2Ray</code>高级使用技巧：流量伪装。客户端下载请访问：<ahref="https://tlanyan.me/v2ray-clients-download">V2ray客户端</a>，拯救被墙的服务器请参考：<ahref="https://tlanyan.me/recovery-blocked-ip/">拯救被墙的服务器</a>。</p><h2 id="为何需要流量伪装">为何需要流量伪装</h2><p>自设立墙以来，我国的网络封锁技术一直是全球领先的。有方校长等人持续做贡献，封锁和干扰技术也在不断演化和进步。传统的VPN、<ahref="https://tlanyan.me/configure-ssh-to-visit-extenal-websites/">ssh隧道</a>等科学上网方式渐渐被墙识别和干扰，访问境外网站越来越难，倒逼网民不断推动穿墙技术的发展。</p><p>科学上网这些年来，见证了诸多技术的兴起和消沉，自架服务器被绊者更是数不胜数。经历过谈笑风生的岁月，才知闷声发大财是人生真理。翻墙技术同样如此，一是不要高调和张扬，否则大概率被打击和屏蔽；其次流量尽量与常见流量接近，不要特立独行，例如使用非常用端口、自定义奇怪的协议。本文介绍的V2ray伪装便是将穿墙流量以常见的HTTPS/TLS包装，大大降低vps被墙或被干扰的可能性，在敏感时期提供稳如狗的上外网体验。</p><blockquote><p>V2ray发布了新版的VLESS协议，强烈推荐使用，详情请参考 <ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/">V2ray的VLESS协议介绍和使用教程</a></p><p>推荐使用XTLS+Splice技术的Xray，详情参考：<ahref="https://tlanyan.me/xray-tutorial/">Xray教程</a></p></blockquote><h2 id="前提条件">前提条件</h2><p>本文假设读者已经具备以下条件：</p><ol type="1"><li>一台境外的vps，购买可参考：<ahref="https://tlanyan.me/vps-merchant-collection/">一些VPS商家整理</a>;</li><li>一个域名，无备案要求（备案可使用国内CDN加速，但意味着万一有事，被喝茶更容易）。域名购买可参考：<ahref="https://tlanyan.me/namesilo-domain-tutorial/">Namesilo域名注册和使用教程</a>或从 <ahref="https://tlanyan.me/domain-register-for-mainland/">适合国人的域名注册商推荐</a>选购；</li><li>为域名申请一个证书，请参考：<ahref="https://tlanyan.me/use-lets-encrypt-certificate/">从Let’sEncrypt获取免费证书</a> 或 <ahref="https://tlanyan.me/get-free-ssl-certificates-from-aliyun/">从阿里云获取免费SSL证书</a>(伪装域名用来做站推荐使用)；</li><li>有基本linux技巧，能使用vim/nano等编辑器。</li></ol><blockquote><p>新手建议使用一键脚本： <ahref="https://tlanyan.me/go.php?key=v2ray-ws-script">v2ray带伪装一键脚本</a></p></blockquote><p>理论上来说，证书不是必须的。但没有tls加持或不做加密，防火墙直接能看出来流量真实意图从而进行干扰，这也是为什么不建议伪装http流量的原因。本文给出的方法采用合法机构签发的证书对流量进行加密，不是做特征混淆得到的TLS流量，从而更难被检测和干扰。</p><p>关于伪装技术的选择，<strong>V2ray web+websocket+tls</strong> 和<strong>V2ray web+http2+tls</strong>常用来做对比。理论上http2省去了upgrade的请求，性能更好。但实际使用中两者没有明显区别，加之某些web服务器（例如Nginx）不支持后端服务器为http2，所以websocket的方式更流行。如果你要上http2，记得web服务器不能用Nginx，要用支持反代http2的Caddy等软件。</p><p>下文介绍流量伪装的配置步骤，演示域名为<code>tlanyan.me</code>，服务器为Linux(CentOS)，web服务器软件用Nginx，web+websocket+tls组合，最终效果为：http/https方式打开域名，显示正常的网页；<code>V2Ray</code>客户端请求特定的路径，例如<code>https://tlanyan.me/awesomepath</code>，能科学上网；浏览器直接请求<code>https://tlanyan.me/awesomepath</code>，返回”400badrequest”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。</p><p><strong>注意：</strong>如果使用伪装后网速慢，可尝试更轻量级的trojan，请参考：<ahref="https://tlanyan.me/trojan-tutorial/">trojan教程</a>。</p><h2 id="操作步骤">操作步骤</h2><p>服务端涉及到了Nginx和v2ray，分别介绍其配置。</p><h3 id="配置dns">1. 配置dns</h3><p>先设置dns将域名解析到vps的ip，例如<code>www.tlanyan.me</code>解析到xxx.xxx.xx.xx。</p><p>如果你上了CDN，则dns要解析到cdn给的ip或者别名网址（cname）。使用cdn能隐藏真实vps的ip，避免vps被墙或能拯救被封锁ip的vps。上cdn有好处，但国内cdn要求域名备案，国外cdn基本上会降低网速，而且配置起来稍显麻烦。建议新手先摸透https流量伪装，有特殊需求再考虑上cdn。</p><p><strong>注意：</strong>如果你要用Let’sEncrypt签发的证书，并且希望上cdn，那么应该先解析到vps的ip，获取到证书后再解析到cdn。</p><p><strong>更新</strong>：上cdn可参考：<ahref="https://tlanyan.me/go.php?key=cloudflare-forward">v2ray使用cloudflare中转流量，拯救被墙ip</a>，请务必记得先让伪装正常工作再上cdn！</p><h3 id="配置nginx">2. 配置Nginx</h3><p>如果你的域名并正确配置了SSL证书，可忽略这一步。</p><p>Nginx是市面上占有率最高的网站服务器软件，Centos7系统安装nginx命令：<code>yum install -y epel-release &amp;&amp; yum install -y nginx</code>。</p><p>Linux系统上Nginx默认站点配置文件是<code>/etc/nginx/conf.d/</code>目录下的<code>default.conf</code>，我们对伪装网站进行全站https配置，示例内容如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>    server_name xxxxx;  # 改成你的域名<br>    rewrite ^(.*) https://$server_name$<span class="language-ruby"><span class="hljs-number">1</span> permanent;</span><br><span class="language-ruby">&#125;</span><br><span class="language-ruby"></span><br><span class="language-ruby">server &#123;</span><br><span class="language-ruby">    listen       <span class="hljs-number">443</span> ssl http2;</span><br><span class="language-ruby">    server_name xxxxx;</span><br><span class="language-ruby">    charset utf-<span class="hljs-number">8</span>;</span><br><span class="language-ruby"></span><br><span class="language-ruby">    <span class="hljs-comment"># ssl配置</span></span><br><span class="language-ruby">    ssl_protocols <span class="hljs-title class_">TLSv1</span>.<span class="hljs-number">2</span> <span class="hljs-title class_">TLSv1</span>.<span class="hljs-number">3</span>; <span class="hljs-comment"># tls 1.3要求nginx 1.13.0及以上版本</span></span><br><span class="language-ruby">    ssl_ciphers <span class="hljs-variable constant_">ECDHE</span>-<span class="hljs-variable constant_">ECDSA</span>-<span class="hljs-variable constant_">AES128</span>-<span class="hljs-variable constant_">GCM</span>-<span class="hljs-variable constant_">SHA256</span><span class="hljs-symbol">:ECDHE-RSA-AES128-GCM-SHA256</span><span class="hljs-symbol">:ECDHE-ECDSA-AES256-GCM-SHA384</span><span class="hljs-symbol">:ECDHE-RSA-AES256-GCM-SHA384</span><span class="hljs-symbol">:ECDHE-ECDSA-CHACHA20-POLY1305</span><span class="hljs-symbol">:ECDHE-RSA-CHACHA20-POLY1305</span><span class="hljs-symbol">:DHE-RSA-AES128-GCM-SHA256</span><span class="hljs-symbol">:DHE-RSA-AES256-GCM-SHA384</span>;</span><br><span class="language-ruby">    ssl_prefer_server_ciphers off;</span><br><span class="language-ruby">    ssl_session_cache <span class="hljs-symbol">shared:</span><span class="hljs-variable constant_">SSL</span><span class="hljs-symbol">:</span>10m;</span><br><span class="language-ruby">    ssl_session_timeout 1d;</span><br><span class="language-ruby">    ssl_session_tickets off;</span><br><span class="language-ruby">    ssl_certificate xxxxx; <span class="hljs-comment"># 改成你的证书地址</span></span><br><span class="language-ruby">    ssl_certificate_key xxxx; <span class="hljs-comment"># 改成证书密钥文件地址</span></span><br><span class="language-ruby"></span><br><span class="language-ruby">    access_log  /var/log/nginx/xxxx.access.log;</span><br><span class="language-ruby">    error_log /var/log/nginx/xxx.error.log;</span><br><span class="language-ruby"></span><br><span class="language-ruby">    root /usr/share/nginx/html;</span><br><span class="language-ruby">    location / &#123;</span><br><span class="language-ruby">        index  index.html;</span><br><span class="language-ruby">    &#125;</span><br><span class="language-ruby">&#125;</span><br></code></pre></td></tr></table></figure><p>配置好用<code>nginx -t</code>命令查看有无错误，没问题的话<code>systemctl restart nginx</code>启动Nginx。打开浏览器在地址栏输入域名，应该能看到https访问的Nginx欢迎页。</p><p>新域名如何快速做一个像模像样的网站？最简单的办法是从网上下载网站模板，上传到web服务器的根目录（默认是<code>/usr/share/nginx/html</code>）。对于伪装站来说，静态站足够。如果你的境外流量比较大，建议用爬虫或者其他手段做一个看起来受欢迎、流量大的站点，例如美食博客，图片站等。</p><h3 id="安装配置v2ray">3. 安装配置V2Ray</h3><p>详细过程可参考上篇：<ahref="https://tlanyan.me/v2ray-tutorial">V2Ray教程</a></p><p>到此为止，Nginx和V2ray应该都能各自独立正常工作。如果有一个出现问题，应该先解决再继续下面的操作。</p><h3 id="nginx配置websocket">4. Nginx配置websocket</h3><p>接下来我们让Nginx和v2ray结合，完成服务端的配置。</p><p>首先我们选择一个<strong>伪装路径</strong>，建议为二级或者较长的一级路径，例如<code>/abc/def</code>或<code>/awesomepath</code>。</p><p>配置Nginx将伪装路径的访问都转发到v2ray。编辑<code>/etc/nginx/conf.d/default.conf</code>的第二个<code>server</code>段，增加以下转发配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /awesomepath &#123; <span class="hljs-comment"># 与 V2Ray 配置中的 path 保持一致</span><br>      <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>      <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:12345; <span class="hljs-comment"># 假设v2ray的监听地址是12345</span><br>      <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置好后重启Nginx：<code>systemctl restart nginx</code>。</p><p>配置v2ray接受Nginx传来的数据。编辑<code>/etc/v2ray/config.json</code>文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后<code>config.json</code>文件看起来是：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;warning&quot;</span>,<br>    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,<br>    <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span><br>   &#125;,<br>  <span class="hljs-string">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">12345</span>,<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>, # 可以使用/usr/bin/v2ray/v2ctl uuid生成<br>          <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-string">&quot;alterId&quot;</span>: <span class="hljs-number">0</span><br>        &#125;<br>      ]<br>    &#125;,<br>    <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;     # 载体配置段，设置为websocket<br>        <span class="hljs-string">&quot;network&quot;</span>: <span class="hljs-string">&quot;ws&quot;</span>,<br>        <span class="hljs-string">&quot;wsSettings&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/awesomepath&quot;</span>  # 与nginx中的路径保持一致<br>        &#125;<br>      &#125;,<br>    <span class="hljs-string">&quot;listen&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span> # 出于安全考虑，建议只接受本地链接<br>  &#125;],<br>  <span class="hljs-string">&quot;outbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;<br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>  &#125;],<br>  <span class="hljs-string">&quot;routing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;rules&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span>,<br>        <span class="hljs-string">&quot;ip&quot;</span>: [<span class="hljs-string">&quot;geoip:private&quot;</span>],<br>        <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>\1. json文件不支持注释，上述配置中”#”号及后续内容都要删掉；</p><p>\2.因为使用tls加密，<strong>强烈建议alterId改成0</strong>，以节省cpu加快v2ray的速度</p></blockquote><p>配置无误后，重启v2ray服务：<code>systemctl restart v2ray</code>。</p><p>如何测试nginx与v2ray结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明Nginx正常工作；输入域名加v2ray路径，例如<code>https://tlanyan.me/awesomepath</code>，应该出现”BadRequest”，说明Nginx将流量转发给了v2ray，并且v2ray收到了请求。</p><h3 id="客户端设置">客户端设置</h3><p>最后是配置客户端，本文以Windows平台的<code>V2RayW</code>软件为例说明使用方法。</p><p>打开<code>V2RayW</code>，右键托盘图标，点击“配置”。在弹框中新建或修改已有的服务器，输入服务器ip，端口写443，把用户id、额外id信息填上，网络类型选择”ws”。接着点“传输设置”，找到“websocket”，路径一栏输入nginx和v2ray中的路径，例如“/awesomepath”；http头部输入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的域名，例如www.tlanyan.me&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>截图如下：</p><p><a href="https://tlanyan.me/v2ray-traffic-mask/v2ray1/"><imgsrc="F:\个人\科学上网\file\V2RAY1.png"alt="v2ray客户端配置websocket" /></a></p><p>接着点击“tls”，勾选“启用传输层加密tls”（同时建议勾选“允许不安全的加密方式”和“允许不安全连接”），在“服务器域名”的输入框中输入域名，截图如下：</p><p><a href="https://tlanyan.me/v2ray-traffic-mask/v2ray2/"><imgsrc="F:\个人\科学上网\file\v2ray2.png"alt="v2ray客户端配置tls" /></a></p><p>信息填写正确后，点击“保存”。打开浏览器访问google.com，youtube.com等网站，配置无误的话应该都能正常打开。</p><blockquote><p>因为启用了TLS，因此VMESS配置界面的加密方式(security)建议配置为none，以节省cpu，提高设备续航能力</p></blockquote><p>如果对nginx/v2ray以及客户端的配置不熟悉，建议使用这个v2ray配置生成工具：<ahref="https://www.veekxt.com/utils/v2ray_gen">v2ray配置生成</a>。</p><h2 id="总结">总结</h2><p>https/tls会加密路径信息，仅靠中间环节捕捉到的流量包极难区分是正常请求还是夹带私货的流量。这也显示了v2ray的强大之处：通过配置不同的协议和载体，就能对进出的流量做定制。从流量伪装、反向代理的功能上看，v2ray毫无疑问的是一个强大的网络框架/工具，科学上网功能只是其一个成功应用。</p><p>比较让人遗憾的是v2ray的ios客户端均收费，客户端下载请访问：<ahref="https://tlanyan.me/v2ray-clients-download">V2ray客户端下载</a>。</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray的VLESS协议</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E7%9A%84VLESS%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E7%9A%84VLESS%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://v2ray.com/">V2ray</a>近期因新增VLESS协议而备受关注。V2ray官方对VLESS协议的定义是“性能至上、可扩展性空前，目标是全场景终极协议”。本文是<a href="https://tlanyan.me/v2ray-tutorial/">V2ray教程</a> 和 <ahref="https://tlanyan.me/v2ray-traffic-mask/">V2ray高级技巧：流量伪装</a>的续篇，给出V2ray的VLESS协议介绍和使用教程。下载V2ray客户端请到 <ahref="https://tlanyan.me/v2ray-clients-download/">V2ray客户端</a>页面。</p><h2 id="本文目录">本文目录</h2><ul><li><ul><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#intro">VLESS协议介绍</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#xtls">XTLS介绍</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#suit">VLESS配置组合</a></li><li>VLESS+XTLS服务器配置教程<ul><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#prepare">准备工作</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#install">安装最新版V2ray-Core</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#config">服务器配置VLESS+XTLS协议</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#notice">服务端注意事项</a></li></ul></li><li>VLESS客户端配置<ul><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#support">支持VLESS协议的客户端</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#tutorial">VLESS客户端配置教程</a></li></ul></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#summary">总结</a></li><li><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/#reference">参考</a></li></ul></li></ul><h2 id="vless协议介绍">VLESS协议介绍</h2><p>VLESS是一种<strong>无状态</strong>的轻量级数据传输协议，被定义为下一代V2ray数据传输协议。作者对该协议的愿景是“<strong>可扩展性空前，适合随意组合、全场景广泛使用，符合很多人的设想、几乎所有人的需求，足以成为v2ray 的下一代主要协议，乃至整个 XX界的终极协议。</strong>”，由此可见VLESS协议的强大。</p><blockquote><p>VLESS命名源自“less ismore”，写法与VMESS近似，个人认为命名非常有水准</p></blockquote><p>与VMESS协议相同，VLESS使用UUID进行身份验证，配置分入栈和出栈两部分，可用在客户端和服务端。</p><p>VLESS和VMESS区别如下：</p><ol type="1"><li>VLESS协议不依赖于系统时间，不使用alterId。一些人的V2ray用不了，最后找出原因是电脑时间和服务器只相差两分钟，简直要让人抓狂；VLESS协议去掉了时间要求，双手举赞；</li><li>VLESS协议不带加密，用于<ahref="https://tlanyan.me/category/for-free-internet/">科学上网</a>时要配合TLS等加密手段；</li><li>VLESS协议支持分流和回落，比Nginx分流转发更简洁、高效和安全；</li><li>使用TLS的情况下，VLESS协议比VMESS速度更快，性能更好，因为VLESS不会对数据进行加解密；</li><li>V2ray官方对VLESS的期望更高，约束也更严格。例如要求客户端统一使用VLESS标识，而不是Vless、vless等名称；VLESS分享链接标准将由官方统一制定（尚未出炉）；</li><li>VLESS协议的加密更灵活，不像VMESS一样高度耦合（仅对开发者有用）</li></ol><p>对于普通用户来说，VLESS协议的主要优势是：1.不需要客户端和服务器时间一致； 2.VLESS协议不自带加密，使用TLS的情况下性能比VMESS更好。</p><p>TLS将是接下来三到五年内躲避封锁的主流方式，例如<ahref="https://tlanyan.me/v2ray-traffic-mask/">V2ray伪装</a>、<ahref="https://tlanyan.me/trojan-tutorial/">trojan</a>、<ahref="https://github.com/ShadowsocksR-Live/shadowsocksr-native">SSRoT</a>都是基于TLS。V2ray之前因性能不好而被一些人唾弃，VLESS协议的出现，让V2ray的便利性和性能达到<a href="https://tlanyan.me/trojan-tutorial/">trojan</a>的高度（使用TLS的情况下）。</p><p>仅有VLESS还不够，套了一层TLS，V2ray的性能依然不如<ahref="https://tlanyan.me/shadowsock-clients/">SS</a>、<ahref="https://tlanyan.me/shadowsockr-shadowsocksr-shadowsocksrr-clients/">SSR</a>。但随VLESS协议而来的另一个大惊喜：XTLS。（个人认为）这是划时代的概念和技术，将V2ray的性能提升到、甚至超越SS/SSR的水平。</p><h2 id="xtls介绍">XTLS介绍</h2><p><a href="https://github.com/XTLS/Go">XTLS官方库</a>的介绍仅有一句话：THEFUTURE。这个十个字符足以透露出XTLS的牛逼和霸气。</p><p><ahref="https://www.v2fly.org/">V2fly官网</a>（V2fly社区是V2ray技术的主要推动力量）称 <ahref="https://www.v2fly.org/config/protocols/vless.html#xtls-黑科技">XTLS为黑科技</a>，VLESS协议作者的形容是<ahref="https://github.com/rprx/v2ray-vless/releases/tag/xtls">划时代的革命性概念和技术：XTLS</a>。</p><p>thefuture、黑科技、划时代、革命性，无论哪个词，都足以形容XTLS的牛逼和独到之处。</p><p><strong>XTLS的原理是</strong>：使用TLS代理时，https数据其实经过了两层TLS：外层是代理的TLS，内层是https的TLS。XTLS无缝拼接了内外两条货真价实的TLS，使得代理几乎无需再对https流量进行数据加解密，只起到流量中转的作用，极大的提高了性能。</p><p>VLESS + XTLS的组合可以理解为是增强版ECH，即多支持身份认证、代理转发、明文加密、UDP over TCP等。但从其原理可知，VLESS +XTLS对http流量是没有多大优势的。好消息是，目前超过90%的流量都是https的，因此VLESS+ XTLS能极大的提升性能，无愧于上面的评价。</p><blockquote><p>需要说明的是，XTLS是科学上网的future，不是TLS发展的future</p></blockquote><p>所以，想 <ahref="https://tlanyan.me/category/for-free-internet/">科学上网</a>速度更快、手机路由器耗电更少，请使用VLESS+XTLS。如果客户端或者服务端不支持XTLS，TLS的情况下简单将VMESS换成VLESS也能带来性能提升。</p><blockquote><p>2020.11.20更新：因为license问题，XTLS已经在V2ray-core4.33.0被移除，原因和吃瓜链接参考：https://github.com/XTLS/Go/issues/9</p><p>XTLS作者创建了Xray项目，完整支持VLESS协议和XTLS，详情请参考：<ahref="https://tlanyan.me/xray-tutorial/">Xray教程</a></p></blockquote><h2 id="vless配置组合">VLESS配置组合</h2><p>VLESS协议本身不自带加密，用于翻墙时不能单独使用。由于XTLS的引入，目前VLESS协议有如下玩法：</p><ul><li>VLESS + TCP + TLS</li><li>VLESS + TCP +TLS + WS</li><li>VLESS + TCP + XTLS</li><li>VLESS + HTTP2 + h2c</li></ul><blockquote><p>VLESS也可以配合mKCP使用</p></blockquote><p>如果客户端和服务器支持，请优先使用VLESS+TCP+XTLS的配置，能极大的提升性能（有过CDN需求请选择WS版）。</p><h2 id="vless-xtls服务器配置教程">VLESS + XTLS服务器配置教程</h2><p>本文以VLESS+XTLS为例，介绍VLESS+XTLS配置和使用教程。</p><blockquote><p>新手建议使用 <ahref="https://tlanyan.me/go.php?key=v2ray-new-script">V2ray多合一脚本，支持VMESS+websocket+TLS+Nginx、VLESS+TCP+XTLS、VLESS+TCP+TLS等组合</a></p></blockquote><h3 id="准备工作">准备工作</h3><ol type="1"><li>准备一台境外的VPS，购买可参考 <ahref="https://tlanyan.me/vps-merchant-collection/">一些VPS商家整理</a>;</li><li>准备一个域名，不需要备案，国内和国外买的都可以。域名购买可参考：<ahref="https://tlanyan.me/namesilo-domain-tutorial/">Namesilo域名注册和使用教程</a>或从 <ahref="https://tlanyan.me/domain-register-for-mainland/">适合国人的域名注册商推荐</a>选购；</li><li>将域名的某个子域名DNS解析到境外VPS；</li><li>SSH连接到境外服务器，windows请参考：<ahref="https://tlanyan.me/go.php?key=bitvise-tutorial">Bitvise连接Linux服务器教程</a>，mac系统请参考：<ahref="https://tlanyan.me/go.php?key=mac-ssh-tutorial">Mac电脑连接Linux教程</a>；</li><li>为域名申请一个证书，请参考：<ahref="https://tlanyan.me/use-lets-encrypt-certificate/">从Let’sEncrypt获取免费证书</a> 或 <ahref="https://tlanyan.me/get-free-ssl-certificates-from-aliyun/">从阿里云获取免费SSL证书</a>；</li><li>有基本linux技巧，能使用vim/nano等编辑器。</li></ol><h3 id="安装最新版v2ray-core">安装最新版V2ray-Core</h3><p>目前V2fly分支的最新代码尚未合并到V2ray官方库中，因此我们需要V2fly提供的<ahref="https://github.com/v2fly/fhs-install-v2ray">fhs-install-v2ray</a>脚本安装最新版代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -L https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/v2fly/</span>fhs-install-v2ray<span class="hljs-regexp">/master/i</span>nstall-release.sh)<br></code></pre></td></tr></table></figure><blockquote><p><strong>2020.11.23更新</strong>：V2ray-Core最新版v4.33.0已经将XTLS移除，如果你希望用XTLS功能，安装命令请更改为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -L https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/v2fly/</span>fhs-install-v2ray<span class="hljs-regexp">/master/i</span>nstall-release.sh) --version <span class="hljs-number">4.32</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="服务器配置vlessxtls协议">服务器配置VLESS+XTLS协议</h3><p>用vim、nano等编辑器编辑<code>/usr/local/etc/v2ray/config.json</code>文件，填入以下信息：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>    <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;info&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;inbounds&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">443</span>, <span class="hljs-comment"># 可以换成其他端口</span><br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vless&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;clients&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 填写UUID，可以使用<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/v2ray/</span>v2ctl uuid生成<br>                        <span class="hljs-string">&quot;flow&quot;</span>: <span class="hljs-string">&quot;xtls-rprx-origin&quot;</span>, <span class="hljs-comment"># V2ray v4.32.1以上版本建议为xtls-rprx-direct，能极大提升性能</span><br>                        <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">0</span><br>                    &#125;<br>                ],<br>                <span class="hljs-string">&quot;decryption&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>                <span class="hljs-string">&quot;fallbacks&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-number">80</span> <span class="hljs-regexp">//</span> 回落配置，可以直接转到其他网站，例如<span class="hljs-string">&quot;www.baidu.com:443&quot;</span><br>                    &#125;<br>                ]<br>            &#125;,<br>            <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;network&quot;</span>: <span class="hljs-string">&quot;tcp&quot;</span>,<br>                <span class="hljs-string">&quot;security&quot;</span>: <span class="hljs-string">&quot;xtls&quot;</span>,<br>                <span class="hljs-string">&quot;xtlsSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;alpn&quot;</span>: [<br>                        <span class="hljs-string">&quot;http/1.1&quot;</span><br>                    ],<br>                    <span class="hljs-string">&quot;certificates&quot;</span>: [<br>                        &#123;<br>                            <span class="hljs-string">&quot;certificateFile&quot;</span>: <span class="hljs-string">&quot;/path/to/fullchain.crt&quot;</span>, <span class="hljs-regexp">//</span> 换成你的证书，绝对路径<br>                            <span class="hljs-string">&quot;keyFile&quot;</span>: <span class="hljs-string">&quot;/path/to/private.key&quot;</span> <span class="hljs-regexp">//</span> 换成你的私钥，绝对路径<br>                        &#125;<br>                    ]<br>                &#125;<br>            &#125;<br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;outbounds&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>然后设置开机自启并启动v2ray服务：<code>systemctl enable v2ray; systemctl start v2ray</code>，启动后使用<code>ss -nltp | grep v2ray</code> 应该能看到类似如下输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LISTEN</span> <span class="hljs-number">0</span> <span class="hljs-number">128</span> *:<span class="hljs-number">443</span> *:* users:((<span class="hljs-string">&quot;v2ray&quot;</span>,pid=<span class="hljs-number">12345</span>,fd=<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><blockquote><p>VLESS协议的fallback参数说明请参考：<ahref="https://tlanyan.me/vless-fallback-object/">VLESS协议的fallback参数介绍</a></p><p><strong>2020.11.08更新</strong>：V2ray v4.32.1中的<ahref="https://www.v2fly.org/config/protocols/vless.html#xtls-黑科技">XTLSDirect模式引入了ReadV增强</a>(即配置文件中flow的值改为xtls-rprx-direct)，性能与VLESS无加密裸奔持平，是其他组合的数倍，能极大提高设备续航能力，推荐使用（目前客户端只有最新版V2rayNG支持，V2rayN可通过更新V2ray-Core支持）。</p></blockquote><h3 id="服务端注意事项">服务端注意事项</h3><ol type="1"><li>VLESS + TLS、VLESS+TLS+WS及其他方案配置请参考 <ahref="https://github.com/v2fly/v2ray-examples">v2ray-examples</a>；</li><li>json文件不支持注释，上面配置文件中的#号和后面内容都应该删去;</li><li>如果使用了80回落端口，记得安装Nginx或其他web软件：<code>yum install -y epel-release; yum install -y nginx</code>;</li><li>记得放行防火墙：<code>firewall-cmd --permanent --add-service=https; firewall-cmd --permanent --add-service=http; firewall-cmd --reload</code>;</li><li>如果无法启动，请查看是否开启了SELINUX：<code>getenforce</code>，输出为Enforcing请禁用：<code>setenforce 0</code>，然后重启v2ray</li><li><code>journalctl -xe -u v2ray --no-pager</code>可查看V2ray的系统日志</li><li>建议添加V2ray运行日志输出，方便出问题时排查</li></ol><h2 id="vless客户端配置">VLESS客户端配置</h2><p>服务端配置好后，接下来介绍客户端配置VLESS。</p><h3 id="支持vless协议的客户端">支持VLESS协议的客户端</h3><p>VLESS协议在V2ray-Core v4.27.0版本中引入，XTLS在V2ray-Corev4.29.0引入。因此如果使用VLESS协议，请确保客户端的内核版本至少是v4.27.0，使用XTLS功能则保证内核至少为4.29.0版本。</p><p>目前各平台有如下客户端支持VLESS：</p><ul><li><p>支持VLESS协议的Windows客户端</p><p>：</p><ul><li>V2rayN：3.21版本开始支持VLESS协议，3.24版本支持XTLS。目前最新版是3.26，完美支持VLESS+ XTLS组合，并且支持trojan协议；</li><li>Qv2ray：2.6.3版本开始支持VLESS协议，2.7.0alpha1版本支持XTLS。目前最新版是2.7.0 alpha1，完美支持VLESS +XTLS组合；</li></ul></li><li><p>支持VLESS协议的安卓客户端</p><p>：</p><ul><li>V2rayNG：1.3.0版本支持VLESS协议，1.4.4版本支持XTLS。目前最新版1.4.8，完美支持VLESS+XTLS组合，还支持trojan协议。<strong>注意</strong>：V2rayNG自1.4.5版本开始不提供全架构的客户端，如果本站版本无法安装和使用，请从官网下载对应平台版本。</li></ul></li><li><p>支持VLESS协议的Mac客户端</p><p>：</p><ul><li>Qv2ray：2.6.3版本开始支持VLESS协议，2.7.0alpha1版本支持XTLS。目前最新版是2.7.0 alpha1，完美支持VLESS +XTLS组合；</li><li>V2rayU：3.0预览版支持VLESS+XTLS和trojan</li></ul></li><li><p>支持VLESS协议的iOS客户端</p><p>：</p><ul><li>Shadowrocket：2.1.60版本支持VLESS协议，<del>目前不支持XTLS</del>（<strong>2020.11.25更新</strong>：2.1.67版本已经支持XTLS，flow默认为xtls-rprx-direct，无法选择）</li></ul></li><li><p>支持VLESS协议的Linux客户端</p><p>：</p><ul><li>Qv2ray：2.6.3版本开始支持VLESS协议，2.7.0alpha1版本支持XTLS。目前最新版是2.7.0 alpha1，完美支持VLESS +XTLS组合；</li><li>V2rayA：V2rayA是一个依赖于V2ray的UI工具，因此需要自行安装V2ray。V2rayA自1.0.0版本支持VLESS，可通过自行编辑配置文件支持XTLS；</li></ul></li></ul><p>上面提到的V2ray客户端均可到 <ahref="https://tlanyan.me/v2ray-clients-download/">V2ray客户端</a>页面下载。比较遗憾的是颜值非常高的Clash系列目前都不支持VLESS，iOS的小火箭尚未发布支持XTLS的版本。</p><h3 id="vless客户端配置教程">VLESS客户端配置教程</h3><p>本文以Windows平台的V2rayN软件为例，介绍VLESS+XTLS的客户端配置教程。</p><p>\1. 从 <ahref="https://tlanyan.me/v2ray-clients-download/">V2ray客户端</a>下载客户端，解压文件；</p><p>\2. 进入V2rayN-Core文件夹，双击V2rayN.exe启动；</p><p>\3.屏幕右下角托盘找到V2rayN图标，双击打开面板菜单。点击上方的“服务器”-》“添加[VLESS]”服务器：</p><p><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/v2rayn添加vless服务器/"><imgsrc="F:\个人\科学上网\file\V2rayN添加VLESS服务器.jpg"alt="V2rayN添加VLESS服务器" /></a>V2rayN添加VLESS服务器</p><p>\4.配置VLESS+XTLS信息。流控与服务端配置一致(建议服务端和客户端都使用“xtls-rprx-direct”)，加密必须填“none”，别名可以自己随便填。协议传输选“tcp”，在伪装域名里输入你的域名，底层传输选“xtls”，跳过证书验证选true和false都可以（能保证证书总是有效就选false，否则选true）。配置好后点击“确定”保存；</p><p><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/v2rayn配置vlessxtls/"><imgsrc="F:\个人\科学上网\file\V2rayN配置VLESSXTLS.jpg"alt="V2rayN配置VLESS+XTLS" /></a>V2rayN配置VLESS+XTLS</p><p>\5.点击“参数设置”，Http代理选择全局模式或者PAC模式，建议为PAC模式：</p><p><ahref="https://tlanyan.me/introduce-v2ray-vless-protocol/v2rayn开启pac模式/"><imgsrc="F:\个人\科学上网\file\V2rayN开启PAC模式.jpg"alt="V2rayN开启PAC模式" /></a>V2rayN开启PAC模式</p><p>接下来，就可以愉快的上Google、Youtube等网站了。</p><h2 id="总结">总结</h2><p>VLESS+XTLS，可以说是目前最强悍的<ahref="https://tlanyan.me/category/for-free-internet">科学上网</a>组合，强烈建议使用。如果客户端不支持XTLS，在使用TLS的情况下，也建议切换到VLESS协议。</p><h2 id="参考">参考</h2><ol type="1"><li><a href="https://tlanyan.me/trojan-tutorial/">V2ray教程</a></li><li><ahref="https://tlanyan.me/v2ray-traffic-mask/">V2ray高级技巧：流量伪装</a></li><li><ahref="https://www.v2fly.org/config/protocols/vless.html">VLESS协议</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray一键脚本使用教程</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="v2ray一键脚本使用教程">V2ray一键脚本使用教程</h2><ol type="1"><li>准备一个境外服务器，想服务器速度快请参考 <ahref="https://v2xtls.org/搬瓦工vps购买教程/">搬瓦工VPS购买教程</a> 或从<a href="https://v2xtls.org/cn2-gia-vps和商家推荐/">CN2 GIAVPS商家推荐</a> 选购，想ip被封后免费换请参考：<ahref="https://v2xtls.org/购买vultr服务器超详细图文教程/">购买vultr服务器超详细图文教程</a>。</li></ol><p>如果用VMESS+WS+TLS或者VLESS系列协议，则还需一个域名。对域名没有要求，国内/国外注册的都可以，<strong>不需要备案</strong>，不会影响使用，也不会带来安全/隐私上的问题。购买域名可参考：<ahref="https://v2xtls.org/namesilo域名注册和使用教程/">Namesilo购买域名详细教程</a>。</p><p>值得一提的是本V2ray一键脚本支持ipv6only服务器，但是不建议用只有ipv6的VPS用来科学上网。</p><ol start="2" type="1"><li><p>如果vps运营商开启了防火墙（阿里云、Ucloud、腾讯云、AWS、GCP等商家默认有，搬瓦工/hostdare/vultr等商家默认关闭），请先登录vps管理后台放行80和443端口，否则可能会导致获取证书失败。此外，<strong>本脚本支持上传自定义证书</strong>，可跳过申请证书这一步，也可用在<ahref="https://v2raytech.com/tag/nat-vps/">NAT VPS</a>上。</p></li><li><p>ssh连接到服务器。Windows系统请参考 <ahref="https://v2xtls.org/bitvise连接linux服务器教程/">Bitvise连接Linux服务器教程</a>，mac用户请参考<ahref="https://v2xtls.org/mac电脑连接linux教程/">Mac电脑连接Linux教程</a>。</p></li><li><p>复制（或手动输入）下面命令到终端：</p></li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">bash</span> &lt;(curl -<span class="hljs-built_in">sL</span> https:<span class="hljs-comment">//s.hijk.art/v2ray.sh)</span><br></code></pre></td></tr></table></figure><p>按回车键，将出现如下操作菜单。如果菜单没出现，CentOS系统请输入<code>yum install -y curl</code>，Ubuntu/Debian系统请输入<code>sudo apt install -y curl</code>，然后再次运行上面的命令：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/V2ray一键脚本安装菜单.jpg"><imgsrc="F:\个人\科学上网\file\V2ray一键脚本安装菜单.jpg"alt="V2ray一键脚本安装菜单" /></a></p><p>V2ray一键脚本安装菜单</p><p>目前V2ray一键脚本支持以下功能：</p><ul><li><strong>VMESS</strong>，即最普通的V2ray服务器，没有伪装，也不是VLESS</li><li><strong>VMESS</strong>+KCP，传输协议使用mKCP，VPS线路不好时可能有奇效</li><li><strong>VMESS</strong>+TCP+TLS，带伪装的V2ray，不能过<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">CDN中转</a></li><li><strong>VMESS</strong>+WS+TLS，即最通用的V2ray伪装方式，能过<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">CDN中转</a>，推荐使用</li><li><strong>VLESS</strong>+KCP，传输协议使用mKCP</li><li><strong>VLESS</strong>+TCP+TLS，通用的VLESS版本，不能过<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">CDN中转</a>，但比VMESS+TCP+TLS方式性能更好</li><li><strong>VLESS</strong>+WS+TLS，基于websocket的V2ray伪装VLESS版本，能过<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">CDN中转</a>，有过CDN情况下推荐使用</li><li><strong>VLESS</strong>+TCP+XTLS，目前最强悍的VLESS+XTLS组合，强力推荐使用（但是支持的客户端少一些）</li><li><strong>trojan</strong>，轻量级的伪装协议</li><li><strong>trojan</strong>+XTLS，trojan加强版，使用XTLS技术提升性能</li></ul><blockquote><p>注意：目前一些客户端不支持VLESS协议，或者不支持XTLS，请按照自己的情况选择组合</p></blockquote><ol start="5" type="1"><li>按照自己的需求选择一个方式。例如6，然后回车。接着脚本会让你输入一些信息，也可以直接按回车使用默认值。需要注意的是，对于要输入伪装域名的情况，<strong>如果服务器上有网站在运行</strong>，请联系运维再执行脚本，否则可能导致原来网站无法访问！</li></ol><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/VLESSTCPXTLS一键脚本输入信息-1024x410-1.jpg"><imgsrc="F:\个人\科学上网\file\VLESSTCPXTLS一键脚本输入信息-1024x410-1.jpg"alt="VLESS+TCP+XTLS一键脚本输入信息" /></a></p><p>VLESS+TCP+XTLS一键脚本输入信息</p><p>\6. 脚本接下来会自动运行，一切顺利的话结束后会输出配置信息：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/VLESSTCPXTLS一键脚本输出信息.jpg"><imgsrc="F:\个人\科学上网\file\VLESSTCPXTLS一键脚本输出信息.jpg"alt="VLESS+TCP+XTLS一键脚本输出信息" /></a></p><p>VLESS+TCP+XTLS一键脚本输出信息</p><p><strong>到此服务端配置完毕</strong>，服务器可能会自动重启（<strong>没提示重启则不需要</strong>），windows终端出现“disconnected”，mac出现“closedby remote host”说明服务器成功重启了。</p><p>对于VLESS协议、VMESS+WS+TLS的组合，网页上输入伪装域名，<strong>能正常打开伪装站</strong>，说明服务端已经正确配置好。如果运行过程中出现问题，请在本页面下方查找解决方法或留言。</p><h2 id="v2ray一键脚本注意事项">V2ray一键脚本注意事项</h2><p>服务端配置好后，如果想使用CloudFlare等CDN中转（必须是WS版才可以），请参考：<ahref="https://v2xtls.org/v2ray使用cloudflare中转流量，拯救被墙ip/">使用cloudflare中转流量，拯救被墙ip</a>。</p><p>本脚本默认使用的加速技术是BBR，换成魔改BBR/BBR Plus/锐速清参考：<ahref="https://v2xtls.org/安装魔改bbr-bbr-plus-锐速lotserver/">安装魔改BBR/BBR</a><ahref="https://v2xtls.org/安装魔改bbr-bbr-plus-锐速lotserver/">Plus/锐速(</a><ahref="https://v2xtls.org/安装魔改bbr-bbr-plus-锐速lotserver/">Lotserver)</a>。</p><p>如果伪装站类型没有你满意的，比如你想搭建WordPress博客，请参考：<ahref="https://v2xtls.org/v2ray伪装建站教程/">V2ray伪装建站教程</a>。</p><p>对于使用TLS的方式，脚本默认会申请域名证书，证书存放在和V2ray配置文件同一个文件夹内（即<code>/etc/v2ray</code>目录下）。证书会自动更新，如果客户端突然无法使用，请打开伪装网站查看是否能正常打开。如果证书已过期，请再次运行上面的脚本重新配置。</p><p>最后，刚搭建好V2ray后不要猛上流量，否则会导致被限速、端口被墙，严重可能导致ip被墙。</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2rayN配置教程</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2ray%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="v2rayn配置教程">V2rayN配置教程</h1><blockquote><p>本文转载自：https://v2raytech.com/v2rayn-config-tutorial/，如文中内容有错误请到原文查看原始版(最新版)</p></blockquote><blockquote><p>使用过程中遇到问题，欢迎到 <ahref="https://hijk.club/">网络跳越论坛</a> 或tg群组https://t.me/hijkclub 交流，或关注Youtube频道：<ahref="https://youtube.com/channel/UCYTB--VsObzepVJtc9yvUxQ">网络跳越</a></p></blockquote><p><strong>v2rayN</strong>是Windows平台上一款基于v2ray核心的简洁好用、功能强大的v2ray客户端，支持Vmess、<ahref="https://v2xtls.org/shadowsocks-ss/">Shadowsocks</a>、Socks5、<ahref="https://v2xtls.org/trojan/">trojan</a>等多种协议，也支持服务器订阅。本教程详细介绍v2rayN的安装和配置步骤，如果配置完后无法上网，请参考：<ahref="https://v2xtls.org/pc端科学上网常见问题/">PC端科学上网常见问题</a>。</p><p>阅读本教程的前提：</p><ol type="1"><li>已有服务端信息，请参考 <ahref="https://v2xtls.org/v2ray一键脚本/">v2ray一键脚本</a> 或 <ahref="https://v2xtls.org/获取科学上网服务端信息/">获取科学上网服务端信息</a>；</li><li>下载好V2RayN，未下载的请到这个页面下载：<ahref="https://v2xtls.org/v2ray-windows客户端下载/">V2Raywindows客户端下载</a></li></ol><h2 id="操作步骤">操作步骤</h2><p>\1.安装客户端：找到下载的安装程序，找一个合适的目录<strong>解压</strong>（<strong>不要</strong>放在C盘的”ProgramFiles”目录下，会有权限问题），<strong>不要双击压缩文件中的v2rayN.exe直接打开！</strong></p><p>\2.进入V2rayN-Core目录，双击“V2RayN.exe”，程序启动后<strong>托盘</strong>上会出现一个V图标（托盘就是桌面右下角，显示时间输入法那块）。如果程序没有反应，或提示“V2rayN已停止工作”，请先更新系统并安装<ahref="https://dotnet.microsoft.com/download/dotnet-framework/net472">.NETFramework 4.7.2</a> 和 <ahref="https://www.microsoft.com/en-us/download/details.aspx?id=53840">MicrosoftVisual C++ 2015 Redistributable (x86)</a> 再重新打开；</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/Jietu20191207-182701.jpg"><imgsrc="F:\个人\科学上网\file\Jietu20191207-182701.jpg"alt="v2rayn logo" /></a></p><p>v2rayn logo</p><p>\3. 点击系统托盘的<code>V2RayN</code>图标，弹出程序主界面：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/v2rayn-主界面.jpg"><imgsrc="F:\个人\科学上网\file\v2rayn-主界面.jpg"alt="v2rayn 主界面" /></a></p><p>v2rayn 主界面</p><p>\3. 点“服务器”下拉菜单中的添加“vmess”服务器，出现添加服务器界面：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/v2rayN添加vmess服务器.jpg"><imgsrc="F:\个人\科学上网\file\v2rayN添加vmess服务器.jpg"alt="v2rayN添加vmess服务器" /></a></p><p>v2rayN添加vmess服务器</p><p>\4.填写服务器地址（域名或ip）、端口(port)、用户id(uuid)、额外id(alterid)（不知道这些信息填什么请参考参考<ahref="https://v2xtls.org/获取科学上网服务端信息/">获取科学上网服务端信息</a>）。<strong>加密方式一般都是auto，传输协议一般是tcp</strong>（本站的一键脚本都会输出这些信息）。别名随便写就可以，比如“洛杉矶不限流量”。</p><blockquote><p>Just My SocksV2ray加密方式选none或者auto上不了网，请改成chacha20-ietf-poly1305</p></blockquote><p><strong>如果使用了伪装等高级技术，</strong>需要选择伪装类型(ws伪装类型选none)，伪装域名填写配置的主机名，输入伪装路径，底层传输安全选择tls，allowinsecure选择true（<strong>没使用伪装不要动这些参数！</strong>）</p><p>如果服务端信息是订阅，点击“订阅”下拉框的“订阅设置”，在弹框中点击“添加”，输入订阅网址，然后按确定：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/v2rayN添加订阅.jpg"><imgsrc="F:\个人\科学上网\file\v2rayN添加订阅.jpg"alt="v2rayN添加订阅" /></a></p><p>v2rayN添加订阅</p><p>\5. 服务器信息配置好后，主界面下方会出现日志信息：</p><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/V2rayN日志.jpg"><imgsrc="F:\个人\科学上网\file\V2rayN日志.jpg" alt="V2rayN日志" /></a></p><p>V2rayN日志</p><blockquote><p>如果日志出现“找不到 v2ray-core，下载地址:https://github.com/v2ray/v2ray-core/releases”的提示，说明下载了不完整的客户端，请从<a href="https://v2xtls.org/v2ray-windows客户端下载/">V2Raywindows客户端下载</a>页面中的本站重新下载客户端（如果从官网下载，请确保下载的是V2rayN-core.zip文件）</p></blockquote><p>\6. 点击主界面上的“参数设置”（V2rayN 4.0开始变成“参数”，右边下拉框中找到“参数设置”），在“Core:基础设置”中将“Http代理”选择“开启PAC，并自动配置PAC（PAC模式）”；需要隐藏真实ip，或者某些网站打不开，可使用全局模式（也可以右键托盘图标，在”Http代理“中选择）：</p><blockquote><p>V2rayN 4.0开始移除了PAC模式，HTTP代理选项没有了，此步骤可略过</p></blockquote><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/v2rayN参数设置.jpg"><imgsrc="F:\个人\科学上网\file\v2rayN参数设置.jpg"alt="v2rayN参数设置" /></a></p><p>v2rayN参数设置</p><p>\7.接着点击“Core：路由设置”，域名策略选“AsIS”，然后点击“一键设置默认自定义路由规则”，然后点击下方的“确定”完成设置：</p><blockquote><p>V2rayN4.0开始，此菜单在“设置”下拉菜单中的“路由设置”中。打开后直接点击“一键设置默认自定义路由规则”，然后桌面右下角托盘找到V2rayN图标，“系统代理”-》“自动配置系统代理（全局模式）”就可以了</p></blockquote><p><ahref="https://v2xtls.org/wp-content/uploads/2020/11/v2rayN选择路由策略.png"><imgsrc="F:\个人\科学上网\file\v2rayN选择路由策略.png"alt="v2rayN选择路由策略" /></a></p><p>v2rayN选择路由策略</p><p>如果系统防火墙弹出提示，选择“允许访问”。</p><p>配置没问题且服务器网络通畅的话，接下来就可以打开浏览器愉快的访问外网了。</p><p>配置完后无法上外网，请参考：<ahref="https://v2xtls.org/pc端科学上网常见问题/">PC端科学上网常见问题</a></p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray使用cloudflare中转流量</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray%E4%BD%BF%E7%94%A8cloudflare%E4%B8%AD%E8%BD%AC%E6%B5%81%E9%87%8F%EF%BC%8C%E6%8B%AF%E6%95%91%E8%A2%AB%E5%A2%99ip/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray%E4%BD%BF%E7%94%A8cloudflare%E4%B8%AD%E8%BD%AC%E6%B5%81%E9%87%8F%EF%BC%8C%E6%8B%AF%E6%95%91%E8%A2%AB%E5%A2%99ip/</url>
    
    <content type="html"><![CDATA[<p>本文应该是v2ray伪装的终极篇，通过web+ws+tls+cdn的方式躲避流量检测和干扰，同时也有拯救被墙ip的功能。</p><p><strong>备注：</strong>trojan上cdn的方式与v2ray基本类似。</p><p>首先说明一点：<strong>除非服务器ip被墙，否则不需要上cdn！</strong>网上很多教程一开始就教你上Cloudflare的cdn，号称完美解决方案啥，本人认为完全没必要，这也是为什么迟迟不写上cdn教程的原因：大多数人用不到！</p><p>为什么这么说呢？有以下原因：</p><ol type="1"><li>Cloudflare（缩写CF）在国内号称“减速云”，平时延迟250ms起步。如果用cf中转，告诉我50ms香港、150ms美西<ahref="https://hijk.pw/tag/cn2-gia-vps">cn2 gia vps</a>的理由是啥？</li><li>国内CDN能起到加速作用，但是域名要备案，还要购买/上传证书，并且https流量都收费。此外，cdn都能解密你所有的流量，你放心用吗？</li><li>通过CF中转，不会让伪装更安全，也不能防止域名被墙；</li><li>CF中转只对ws+tls伪装的v2ray或者<strong>trojan</strong>有用，无法用在SS/SSR上（这么说其实不对，CF有<ahref="https://www.cloudflare.com/products/cloudflare-spectrum/">spectrum业务</a>能转发tcp/udp流量，但是只对企业版开放，价格需联系CF销售 ）。</li></ol><p>本人自科学上网以来从未套过Cloudflare，不仅是因为慢，还因为 <ahref="https://v2raytech.com/v2ray-one-click-script-with-mask/">v2ray伪装</a>很稳，从未被封过IP。</p><p>上cdn/CF也有好处：1. 不会暴露你服务器的真实ip，因此能防止ip被墙；2.能拯救被墙的ip，省去换ip的费用；3.域名解析转移到CF，比Namesilo的DNS解析好用一万倍！</p><p>如果你决定上CDN，请继续看下面的教程。</p><blockquote><p>注意：CloudFlare已经支持中文，截图可能与下文教程中不同</p></blockquote><h2id="第一步在服务器上部署好带伪装的v2ray">第一步：在服务器上部署好带伪装的v2ray</h2><p>请参考： <ahref="https://v2raytech.com/v2ray-one-click-script-with-mask/">v2ray带伪装一键脚本</a>和 <ahref="https://v2raytech.com/ubuntu-v2ray-one-click-script-with-mask/">v2ray带伪装一键脚本Ubuntu版</a>。</p><p>请务必先做完这一步，然后配置你的手机、电脑、平板，<strong>确保这些设备能正常上外网</strong>。</p><h2 id="第二步注册cloudflare账号">第二步：注册Cloudflare账号</h2><ol type="1"><li><p>打开 https://www.cloudflare.com/，点击右上角的 “Signup”，填入你的电子邮箱，设置好账户密码(至少8位，必须包含数字和特殊字符)，点击“createaccount”；</p></li><li><p>界面跳转到添加网站界面，输入你的域名，例如hijk.pw，注意没有前面的 www。然后点击 “add site”；</p></li><li><p>界面进入选择套餐界面，点第一个“free”，然后点“confirmplan”；</p></li><li><p>接下来CF会扫描你域名的解析记录，扫描完成后大部分记录都给你设置好了。接着点击“continue”；</p></li><li><p>界面进入更改NS解析服务器提示页面，记住类似下图中的两行dns记录：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/cloudflare新dns.png"><imgsrc="F:\个人\科学上网\file\cloudflare新dns.png"alt="cloudflare新dns" /></a></p><p>cloudflare新dns</p></li></ol><p>这一步到此结束，请不要关闭cloudflare的网页。</p><h2 id="第三步更改dns解析服务器">第三步：更改DNS解析服务器</h2><p>这一步以Namesilo为例，讲解将域名的dns转移到cloudflare的过程，其他域名注册商的域名，请参考官方网站。</p><ol type="1"><li><p>打开https://www.namesilo.com/，点右上角的“login”，输入用户名和密码，点“submit”登录；</p></li><li><p>点击右上角的“manage my domains”，进入域名列表；</p></li><li><p>勾选域名左边的框，然后点击上面的”change nameservers”：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/namesilo更改dns.png"><imgsrc="F:\个人\科学上网\file\namesilo更改dns.png"alt="namesilo更改dns" /></a></p><p>namesilo更改dns</p></li><li><p>进入填写dns服务器界面，把默认的三行删了，在第一和第二栏填入cloudflare界面上出现的两个域名，例如：marek.ns.cloudflare.com和wanda.ns.cloudflare.com(注意：CF分配到每个人的DNS服务器都不一样，请按照你账号中出现的填写)：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/namesilo填写dns.png"><imgsrc="F:\个人\科学上网\file\namesilo填写dns.png"alt="namesilo填写dns" /></a></p><p>namesilo填写dns</p></li><li><p>确认无误后，点击下面的 “submit” 按钮提交，更改就完成了。</p></li></ol><h2id="第四步回到cloudflare设置信息">第四步：回到Cloudflare设置信息</h2><p>\1. 回到cloudflare网页上，点击”done, checknameservers”按钮，界面进入证书选择界面，按图中选“full(strict)”：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/cloudflare选择连接类型-1.png"><imgsrc="F:\个人\科学上网\file\cloudflare选择连接类型-1.png"alt="cloudflare选择连接类型" /></a></p><p>cloudflare选择连接类型</p><p>\2.接着点页面下方的“next”，进入加速选项页面。按照图中所示把勾选上：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/cloudflare加速选项.png"><imgsrc="F:\个人\科学上网\file\cloudflare加速选项-1024x632.png"alt="cloudflare加速选项" /></a></p><p>cloudflare加速选项</p><blockquote><p>如果引导没出现这一步，不影响结果，继续往下操作即可。这一步的选项可在设置好后在“速度”-&gt;“优化”中打开。</p></blockquote><p>\3.接着点页面下方的“Next”，设置就完成了。如果需要对dns进行解析，点击页面上方的”DNS“进入dns解析设置页面。例如要添加新的解析，先点击“addrecord”，然后选择解析类型、填写记录名、值，TTL用默认的即可(auto表示600s，比namesilo的3600强了60倍！)。如果的vps使用网页服务，可以选择过代理（即显示黄色的云），仅做dns解析则要点掉黄色的云。信息填写好后点击“save”按钮保存：</p><p><ahref="https://v2raytech.com/wp-content/uploads/2020/02/cloudflare新增dns解析.png"><imgsrc="https://v2raytech.com/wp-content/uploads/2020/02/cloudflare%E6%96%B0%E5%A2%9Edns%E8%A7%A3%E6%9E%90-1024x640.png"alt="cloudflare新增dns解析" /></a></p><p>cloudflare新增dns解析</p><p>即使记录已经存在，也随时可以点击记录右边的云开启和关闭cloudflare中转。</p><h2 id="第五步设置客户端">第五步：设置客户端</h2><p>打开手机、电脑上的客户端，在”ip/address”一栏中的ip改成伪装域名，例如“123.123.123.123”改成“test.hijk.pw”。trojan因为默认使用域名，此步一般无需操作。</p><p>经过上述设置，v2ray的web+websokcet+tls+cdn的配置就完成了！快试试能不能打开外网吧！</p><h2 id="其他">其他</h2><ol type="1"><li>dns解析迁移到cloudflare，并且设置了经过cloudflare的代理（记录上有一朵黄色的云），ping伪装域名出现的是cloudflare的ip，而不是你的服务器ip；</li><li>在cf上添加新的解析记录，默认是代理/中转状态。如果你需要获取let’sencrypt证书，可以先禁用代理（点一下那朵云变成灰色），获取完证书再启用中转；</li><li>Namesilo刷新记录比较慢，如果cloudflare提示DNS解析未改过来，多等一会。</li></ol><p>如有其他问题，请在页面留言。</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloudflare</tag>
      
      <tag>V2ray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名申请</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<p>搭建网站/博客需要域名，<ahref="https://tlanyan.me/v2ray-traffic-mask/">v2ray流量伪装</a> 和 <ahref="https://tlanyan.me/trojan-tutorial/">trojan教程</a>也需要域名才能正常运行，前文 <ahref="https://tlanyan.me/domain-register-for-mainland/">适合国人的域名注册商推荐</a>介绍了一些适合个人使用的付费域名注册商。对于学生或者不愿意花钱的网友，推荐申请免费二级域名pp.ua。</p><p>本文介绍免费二级域名pp.ua申请教程和使用教程。</p><h2 id="pp.ua介绍">pp.ua介绍</h2><p><strong>.ua</strong>是乌克兰的国家域名后缀，pp.ua中的PP是个人、私人的缩写(PrivatePerson)。<strong>pp.ua是乌克兰官方为个人提供的免费二级域名后缀</strong>，任何人都可以申请。pp.ua由乌克兰官方运行，稳定性有保障。</p><p><strong>备注：</strong></p><ol type="1"><li>除了pp.ua，最著名的免费域名是<ahref="https://www.freenom.com/zh/index.html">freenom</a>提供的.tk、.cf、.ml和ga四种顶级域名。然而由于国人滥用，国内ip已经很难在freenom上申请到免费域名，需要使用其他国家IP、身份信息才可能申请到，较为繁琐；</li><li><ahref="https://nic.eu.org/arf/en/contact/create/">eu.org</a>也对个人提供二级免费域名，但由私人运营，页面简陋，域名也没.pp.ua漂亮。</li></ol><h2 id="pp.ua申请教程">pp.ua申请教程</h2><p>pp.ua官方网站是https://pp.ua/，页面都是俄文。幸运的是申请、激活域名和后台页面都有英文界面，有英语基础的无需借助翻译软件也可正常操作。</p><p>下面介绍个人二级免费域名pp.ua申请教程。</p><ol type="1"><li>打开https://nic.ua/en/domains/.pp.ua，搜索框中输入要申请的二级域名，例如tlanyan，然后点击“Search”按钮查看是否已被注册；</li></ol><blockquote><ol type="1"><li><p>二级域名长度为3-63个英文字符(可以包含英文横杆)，不能是www、nic、whois等保留域名；</p></li><li><p>如果无法打开上面的链接，请使用<ahref="https://tlanyan.me/v2ray-clients-download/">代理软件</a>，或购买<ahref="https://tlanyan.me/domain-register-for-mainland/">付费域名</a>。</p></li></ol></blockquote><ol start="2" type="1"><li>没被占用的域名会出现绿色的勾和“Add to cart”的按钮，点击“Add tocart”将域名加入购物车；</li></ol><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua将域名加入购物车/"><imgsrc="F:\个人\科学上网\file\pp.ua将域名加入购物车-1024x365.jpg"alt="pp.ua将域名加入购物车" /></a>pp.ua将域名加入购物车</p><ol start="3" type="1"><li>接着点击“Checkout”去付款。由于是免费的，实际上无需付款和添加支付方式。</li></ol><p>付款页面点击“Continue”按钮，弹出登录框。点击上面的“Signup”链接，输入邮箱和设置密码完成账号注册。继续点击页面的“Continue”，出现域名申请人信息表单：</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua填写域名申请人信息/"><imgsrc="F:\个人\科学上网\file\pp.ua填写域名申请人信息-1024x828.jpg"alt="pp.ua填写域名申请人信息" /></a>pp.ua填写域名申请人信息</p><ol start="4" type="1"><li>国家选”China”，手机号填写自己的手机号，其他信息使用大写拼音填写即可，例如Lastname(名)填QUANQUAN，First name(姓)填ZHANG，Middlename不需要填，Region(省)、City(城市)、Address(详细地址)也一样用大写拼音填写就可以，ZIP是邮政编码。填好后点击“Savecontact”保存；</li></ol><blockquote><p>最重要的信息是邮箱和手机号，务必填写正确。其他信息不一定需要100%真实，但不能太假，比如名字填abcd就过分了</p></blockquote><ol start="5" type="1"><li><p>接下来是确认域名持有人信息，默认是刚才保存的信息，点击“Continuecheckout”，订单就完成了；</p></li><li><p>网站会发两封邮件(一封账号确认邮件，另一封订单通知邮件)，内容都是俄文。订单通知邮件不用管，点击账号确认邮件里面的链接打开就行了：</p></li></ol><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua邮箱验证邮件/"><imgsrc="F:\个人\科学上网\file\pp.ua邮箱验证邮件.jpg"alt="pp.ua邮箱验证邮件" /></a>pp.ua邮箱验证邮件</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua订单通知邮件/"><imgsrc="F:\个人\科学上网\file\pp.ua订单通知邮件.jpg"alt="pp.ua订单通知邮件" /></a>pp.ua订单通知邮件</p><p>到此域名注册已经完成，点击右上角邮箱下拉菜单中的“dashboard”进入管理后台，点击左侧的“domains”就可以看到刚才注册的域名。</p><p>免费域名需要激活才使用，接下来介绍激活教程。</p><h2 id="pp.ua激活教程">pp.ua激活教程</h2><p>管理后台查看域名，刚注册的域名前面有个蓝圈圈，鼠标放上去会有“processinga job. please waitxxxx”的提示。这表示域名尚未激活，因此什么操作都做不了。</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua域名正在处理中/"><imgsrc="F:\个人\科学上网\file\pp.ua域名正在处理中.jpg"alt="pp.ua域名正在处理中" /></a>pp.ua域名正在处理中</p><p>正确的做法是等待，一般一天之内会发送激活码到你的手机上(国外的手机号会快一些)，短信以“MRG”开头：</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua激活码短信/"><imgsrc="F:\个人\科学上网\file\pp.ua激活码短信-473x1024.jpeg"alt="pp.ua激活码短信" /></a>pp.ua激活码短信</p><p>收到短信后，打开https://apu.drs.ua/en/，依次输入域名、手机号(要加国家代码，例如+86)、短信里给的激活码(8位数字)，点击“Continue”完成激活：</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/激活pp-ua免费域名/"><imgsrc="F:\个人\科学上网\file\激活pp.ua免费域名.jpg"alt="激活pp.ua免费域名" /></a>激活pp.ua免费域名</p><p>再回到管理后台，域名前面的蓝圈圈变成了绿色的点，鼠标移上去出现“active”的提示。</p><blockquote><p>如果过了几天也没收到激活短信，可尝试使用Telegram方式激活(tg绑定手机号需和域名注册手机号一致)，操作为：telegram里搜索ppuabot，点击”start“-&gt; 点击”send phone number“ -&gt; 点击”Activate domain” -&gt;发送申请的域名 -&gt;点击”Yes”，然后收到激活码，打开网址激活。完成激活。</p><p>如果TG也无法激活，提示：the domain name xxxx is notregistered，请再耐心等待一两天。</p></blockquote><h2 id="设置dns解析">设置DNS解析</h2><p>激活域名后，在后台点域名后面的设置按钮，页面往下拉，找到“NS-servers”，选择“NIC.UAnameservers”：</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua设置dns/"><imgsrc="F:\个人\科学上网\file\pp.ua设置dns.jpg"alt="pp.ua设置dns" /></a>pp.ua设置dns服务器</p><blockquote><p>如果你有cloudflare、阿里云、dnspod等账号，可以将域名解析托管到这些网站。操作是：选择“customname server”，然后填写第三方给的dns服务器并保存。</p></blockquote><p>接着点左侧菜单的“NameServers”，点域名后面的设置按钮，在下方的DNS-recoords中设置DNS解析：</p><p><ahref="https://tlanyan.me/personal-free-pp-ua-domain-tutorial/pp-ua解析域名/"><imgsrc="F:\个人\科学上网\file\pp.ua解析域名.jpg"alt="pp.ua解析域名" /></a>pp.ua解析域名</p><h2 id="其他">其他</h2><ol type="1"><li><p>新注册域名有效期都是一年，不能立即续费，可在到期前4个月申请续费，最长可续费10年;</p></li><li><p>每个账号、手机号一个月内只能激活三个免费域名；</p></li><li><p>pp.ua注册域名的WHOIS信息是公开的，无法开启隐私保护；</p></li><li><p>本人申请了一个免费域名 <ahref="https://tlanyan.pp.ua/">tlanyan.pp.ua</a>，个人感觉域名也挺漂亮，自用做站完全没问题。</p></li></ol><h2 id="参考">参考</h2><ol type="1"><li><a href="https://your.pp.ua/post/pp-ua-domains/">免费 Pp.ua域名申请教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>域名</category>
      
    </categories>
    
    
    <tags>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器购买</title>
    <link href="/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E8%B4%AD%E4%B9%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/04/23/note/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E8%B4%AD%E4%B9%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vultr介绍">vultr介绍</h2><p><ahref="https://www.vultr.com/?ref=8375822-6G"><strong>Vultr</strong></a>是一家总部位于美国新泽西州的 VPS 提供商，官网是：<ahref="https://www.vultr.com/?ref=8375822-6G">https://www.vultr.com</a>。公司成立于2014年，在全球拥有美国、日本、新加坡等十六个机房。<ahref="https://www.vultr.com/?ref=8375822-6G"><strong>Vultr</strong></a>因实力雄厚、服务稳定、价低质优，从而深受人们喜爱。</p><p>具体说来，<strong>Vultr</strong>有如下优点：</p><ol type="1"><li>服务器均采用 KVM 架构、SSD 固态硬盘，性能没得说；</li><li>价格低廉，最低月资费2.5刀起（<strong>该类型服务器只有ipv6地址，目前只有亚特兰大和纽约两个机房有货</strong>）；</li><li>全球16个数据中心，用户可根据自己的网络选择最合适的机房；</li><li><strong>支持支付宝<del>和微信</del></strong>，方便国人使用；</li><li><strong>免费更换</strong>ip和迁移机房；</li><li>随时销毁vps，销毁VPS后不再扣费；</li></ol><blockquote><p>Vultr服务器没有针对中国网络做优化，对速度有要求的可考虑 <ahref="https://vpsxueyuan.com/cn2-gia-vps-merchants/">CN2 GIAVPS和商家推荐</a>。<strong> </strong></p></blockquote><p>注意：</p><ol type="1"><li>Vultr采用时长计费方式，没有包年包月套餐。只要账户余额足够，服务器可以一直用。不需要时可销毁服务器，销毁后不再扣费；</li><li>vultr推出了关注vultr推特账号并转发推文送3刀的活动，操作请看 <ahref="https://vpsxueyuan.com/vultr-vps-tutorial/#promos">vultr推特活动送3刀</a></li><li><strong>注册账号后30天之内，如果销毁所有服务器，赠送的金额将被回收</strong></li></ol><p>美中不足的是<strong>Vultr</strong>网站没有中文界面，对英文不好的网友略显困难。鉴于此，本文下面给出<strong>注册和购买Vultr服务器</strong>的超详细图文教程。</p><h2 id="vultr服务器购买教程">Vultr服务器购买教程</h2><h3 id="一注册vultr账号">一、注册vultr账号</h3><p>如果已有账号，请自觉忽略此步。</p><p>点击 <ahref="https://www.vultr.com/?ref=8375822-6G">vultr官网</a>，点击右上角的注册按钮（signup）：</p><p><a href="https://static.vpsxueyuan.com/2020/09/vultr官网.jpg"><imgsrc="F:\个人\科学上网\file\vultr官网.jpg"alt="vultr官网" /></a>vultr官网</p><p>在注册页面输入你的电子邮箱地址（用来接收验证邮件以及通知），并设置账号密码。<strong>账户密码要求同时包含数字、小写字母，大写字母，并且不低于10个字符</strong>：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/注册vultr账户.jpg"><imgsrc="F:\个人\科学上网\file\注册vultr账户.jpg"alt="注册vultr账户" /></a>注册vultr账户</p><p>填好信息后，点击注册账户（createaccount）按钮，界面会跳转到付款页。<strong>获赠100刀需要绑定信用卡或Paypal</strong>：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr充值页面.jpg"><imgsrc="F:\个人\科学上网\file\vultr充值页面.jpg"alt="vultr充值页面" /></a>vultr充值页面</p><p>更正：上面截图中的“邮件地址”应该是“账单地址”！</p><p>然后输入账单信息（姓名、账单地址、城市、邮政编码和国家）等信息。这些信息可以随便填写，比如姓名用tom，账单地址写abcdedfroad, cc，城市填ddd，邮政编码随便输入5位数字，然后随便选一个国家。</p><p>最后选择金额或者自定义充值的金额。右侧可以看到有100刀赠送。点击Paywith XXX按钮付款，到账后右上角会显示账户余额。</p><h3 id="三购买vultr服务器">三、购买Vultr服务器</h3><p>接下来是买服务器。</p><blockquote><p>注意：如果你的邮箱账户没有验证，无法成功购买服务器，请先登录邮箱点击vultr邮件的确认链接激活账户。</p></blockquote><p>点页面左边的“products”图标，进入服务器管理和购买页面：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr买服务器.jpg"><imgsrc="F:\个人\科学上网\file\vultr买服务器.jpg"alt="购买vultr服务器" /></a>购买vultr服务器</p><p>然后点击右边蓝色的“➕”（买新服务器）按钮，进入服务器购买页面。首先是选择服务器类型，使用默认的“cloudcompute”：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器类型.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器类型.jpg"alt="vultr服务器类型" /></a>vultr服务器类型</p><p>接着选服务器的地理位置。<strong>移动用户建议选择日本或者新加坡节点；联通用户建议选择新加坡、杉矶机、硅谷和西雅图机房；电信用户建议选择洛杉矶、硅谷和西雅图机房</strong>。因为vultr支持随时切换机房和更换ip，如果你选择的机房速度不满意，可以根据下一节教程切换。本教程中我们选择“洛杉矶”机房：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器位置.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器位置.jpg"alt="vultr服务器位置" /></a>vultr服务器位置</p><p>接下来选择服务器操作系统和配置。大多数情形下服务器操作系统请选“<strong>centos7 x64</strong>”（注意选CentOS，<strong>不是CoreOS</strong>！如果想<ahref="https://tlanyan.me/go.php?key=lotserver">安装锐速或魔改BBR</a>，不要选带BBR的），因为网上大部分教程和脚本都运行在这个系统上。如果是搭梯子上外网，5刀每个月的服务器基本就够用，<strong>包含1个cpu，1GB内存和1T流量</strong>：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器操作系统和配置.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器操作系统和配置.jpg"alt="vultr服务器操作系统和配置" /></a>vultr服务器操作系统和配置</p><p>最后设置服务器标签(可不填，默认为vultr)，确认数量和价格，没问题的话点右下角的“deploynow”按钮创建服务器：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr确认配置.jpg"><imgsrc="F:\个人\科学上网\file\vultr确认配置.jpg"alt="vultr确认配置" /></a>vultr确认配置</p><p>创建好后，页面跳转到服务器列表。可以看到服务器正在配置中：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器列表.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器列表.jpg"alt="vultr服务器列表" /></a>vultr服务器列表</p><p>部署好后，会出现服务器的ip，“installing”换成了“Manage”或者”…”。点击服务器那一行，进入服务器管理页面：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器操作界面.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器操作界面.jpg"alt="vultr服务器管理界面" /></a>vultr服务器管理界面</p><p>这个界面基本涵盖了对服务器的各种操作：</p><ul><li>查看ip</li><li>查看流量、cpu和费用情况</li><li>查看<strong>ssh</strong>用户名（默认是root）和密码（<strong>注意：</strong>带翻译插件的浏览器会把root翻译成“根”，导致ssh连接不成功。遇到这种情况，请先关闭翻译，查看真实的用户名和密码）</li><li>查看服务器配置（cpu、内存和硬盘容量）</li><li>关机、重启、重装系统、销毁（删除）</li></ul><p>关机和销毁（删除）的区别：<strong>关机相当于断电源，数据都在，会继续收费；销毁（删除）则是清空数据，释放分配的ip、cpu、内存等资源，停止计费</strong>。</p><p><strong>买服务器只是科学上网的第一步</strong>，请继续往下看教程！</p><h2 id="连接vultr服务器">连接Vultr服务器</h2><p><strong>连接服务器是科学上网的第二步。</strong></p><p>windows用户请参考：<ahref="https://tlanyan.me/go.php?key=bitvise-tutorial">Bitvise连接Linux服务器教程</a></p><p>mac系统请参考：<ahref="https://tlanyan.me/go.php?key=mac-ssh-tutorial">Mac电脑连接Linux教程</a></p><p><strong>运行一键脚本是科学上网的第三步。</strong>本站提供四种技术的一键部署教程供参考：</p><p><strong><ahref="https://tlanyan.me/go.php?key=ss-script">Shadowsocks/SS一键脚本</a></strong></p><p><strong><ahref="https://tlanyan.me/go.php?key=ssr-script">ShadowsocksR/SSR一键脚本</a></strong></p><p><strong><ahref="https://tlanyan.me/go.php?key=v2ray-new-script">V2Ray一键脚本</a></strong></p><p><ahref="https://tlanyan.me/go.php?key=trojan-script"><strong>trojan一键脚本</strong></a></p><p><strong>注意：</strong>你可任选一种技术（推荐v2ray），也可以在服务器上同时安装四个软件，<strong>但四个软件的端口必须不同！</strong></p><p><strong>科学上网的最后一步是</strong>下载客户端并<strong>配置</strong>，一键脚本里有电脑、手机的下载链接，请按照指引下载并配置。有问题请先仔细看教程，并参考<a href="https://v2xtls.org/vultr常见问题/">vultr常见问题</a> 和 <ahref="https://v2xtls.org/科学上网常见问题/">科学上网常见问题</a> 。</p><h2id="vultr销毁删除服务器更换机房和ip">Vultr销毁(删除)服务器/更换机房和ip</h2><p>如果购买的VPS无法ping通或SSH连接不上，或者觉得速度慢想换一个机房，在vultr这很容易就做到。</p><p>vultr更换ip和服务器机房的操作相当简单：在服务器操作界面选机房买一个新的服务器，ip会重新分配，然后销毁（删除）旧的服务器即可。</p><p>销毁（删除）vps有两种方法，一是在服务器列表界面，点击服务器那一行最后面的”…”，会弹出销毁（删除）菜单：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr服务器列表销毁.jpg"><imgsrc="F:\个人\科学上网\file\vultr服务器列表销毁.jpg"alt="vultr销毁服务器" /></a>vultr销毁服务器</p><p>点击销毁（删除），在出来的确认框中勾选“Yes, destroy thisserver”，然后再点红色的“Destory Server”按钮：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr确认销毁服务器-1.jpg"><imgsrc="F:\个人\科学上网\file\vultr确认销毁服务器-1.jpg"alt="vultr确认销毁服务器" /></a>vultr确认销毁服务器</p><p>另一种方法是在服务器信息界面点击销毁（删除）按钮，弹出的确认框中勾选“Yes,destroy this server”，然后再点红色的“Destory Server”按钮：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr销毁服务器.jpg"><imgsrc="F:\个人\科学上网\file\vultr销毁服务器.jpg"alt="vultr销毁服务器" /></a>vultr销毁服务器</p><p>销毁（删除）服务器后停止计费，可以按照“购买服务器”中的操作部署新的服务器，相当于换了ip和区域。</p><h2 id="关注vultr推特转发送3刀">关注vultr推特转发送3刀</h2><p>在服务器管理界面，出现如下提示说明收到了活动邀请：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr推特活动邀请.png"><imgsrc="F:\个人\科学上网\file\vultr推特活动邀请.png"alt="vultr推特活动邀请" /></a>vultr推特活动邀请</p><p>点击上面的“click here to view availablepromos”（如果没有收到这条信息，直接点击这个链接： <ahref="https://my.vultr.com/promo/?ref=8375822-6G">https://my.vultr.com/promo/</a>），进入活动界面：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr推特活动界面.png"><imgsrc="F:\个人\科学上网\file\vultr推特活动界面.png"alt="vultr推特活动界面" /></a>vultr推特活动界面</p><p>总共有三个活动，每个活动赠送一刀，分别是：</p><ol type="1"><li>验证twitter账号，没有注册的赶紧先去注册一个吧。注册twitter账号后点击”verifyyour twitter”，进入授权界面：</li></ol><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr绑定推特.png"><imgsrc="F:\个人\科学上网\file\vultr绑定推特.png"alt="vultr绑定推特" /></a>vultr绑定推特</p><p>输入你的推特账号密码，勾选“remember me”，然后点击“authorizeapp”，成功后vultr界面已经变成验证状态：</p><p><ahref="https://static.vpsxueyuan.com/2020/09/vultr推特验证成功.png"><imgsrc="F:\个人\科学上网\file\vultr推特验证成功.png"alt="vultr推特验证成功" /></a>vultr推特验证成功</p><ol start="2" type="1"><li>接着关注vultr推特账号。点击“folow <span class="citation"data-cites="vultr">@vultr</span>”，会弹出vultr的推特官方账号，点击右上角的“follow”，然后关掉窗口就行了。vultr的活动界面变成了：</li></ol><p><ahref="https://static.vpsxueyuan.com/2020/09/关注vultr推特成功.png"><imgsrc="F:\个人\科学上网\file\关注vultr推特成功.png"alt="关注vultr推特成功" /></a>关注vultr推特成功</p><ol start="3" type="1"><li>最后是转发vultr推文。点击“tweet”按钮，在弹窗中点击“tweet”，提示“alldone”表示成功。然后关闭弹窗，vultr界面变成了：</li></ol><p><ahref="https://static.vpsxueyuan.com/2020/09/转发vultr推特成功.png"><imgsrc="https://static.vpsxueyuan.com/2020/09/%E8%BD%AC%E5%8F%91vultr%E6%8E%A8%E7%89%B9%E6%88%90%E5%8A%9F.png"alt="转发vultr推特成功" /></a>转发vultr推特成功</p><p>做完这三步后，点击左侧的“billing”菜单，账户余额应该多了3刀。</p><h2 id="vultr注意事项">Vultr注意事项</h2><ol type="1"><li><p>在个人信息里，可以设置账单信息和付款方式。设置好账单信息后，以后用支付宝微信付款不需要再填写账单信息，同时也没有烦人的信息补充提示；</p></li><li><p><strong>注意：</strong>不同线路（移动联通电信的4G或者宽带）访问同一个服务器的延迟可能相差很大，请根据自己的情况选择合适的机房。还需要注意同一个vps，某些网络线路可能无法连接（例如移动4G没问题，联通4G就不行），这都是正常的。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt5</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QT/QT/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/QT/QT/</url>
    
    <content type="html"><![CDATA[<h3 id="一pyqt5-应用开发基础">一、PyQt5 应用开发基础</h3><h4 id="第1章-开发环境搭建">第1章 开发环境搭建</h4><p>在pycharm中进行GUI程序开发，搭建pyqt5的开发环境</p><p>1.pyqt5模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pyqt5<br></code></pre></td></tr></table></figure><p>pyqt5不再提供QtDesigner等工具，需要再安装pyqt5-tools</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pyqt5-tools<br></code></pre></td></tr></table></figure><p>2.配置QtDesigner</p><figure><img src="QT.assets/image-20220529155947171.png"alt="image-20220529155947171" /><figcaption aria-hidden="true">image-20220529155947171</figcaption></figure><p>需要填写的说明：</p><blockquote><p>Name：QtDesinger</p><p>Program：...-packages\qt5_applications.exe</p><p>Working directory：$ProjectFileDir$</p><p>意思是该外部工具定义名称为QtDesinger，外部工具的地址需要自己手动选择，一般为在Python的安装路径中，最后的Workingdirectory设置为当前项目工作目录即可，即创建的UI文件会存储在目录下。</p></blockquote><p>3.配置PyUIC</p><figure><img src="QT.assets/image-20220529160224239.png"alt="image-20220529160224239" /><figcaption aria-hidden="true">image-20220529160224239</figcaption></figure><blockquote><p>Name：PyUIC</p><p>Program：E:.exe</p><p>Arguments：-m PyQt5.uic.pyuic $FileName$ -o$FileNameWithoutExtension$.py</p><p>Working directory：$ProjectFileDir$</p><p>意思是该外部工具定义名称为PyUIC，外部工具的地址需要自己手动选择，一般为在Python的安装路径中，Arguments的意思是会把UI文件转成同名的py文件，最后的Workingdirectory设置为当前项目工作目录即可。</p></blockquote><h4 id="第2章-pyqt5-gui-程序框架">第2章 PyQt5 GUI 程序框架</h4><h5 id="pyqt5-gui程序的基本框架">2.1 pyqt5 GUI程序的基本框架</h5><h5 id="可视化设计窗体gui程序">2.2可视化设计窗体GUI程序</h5><ol type="1"><li><p>在QT Designer中可视化设计窗体</p></li><li><p>使用pyUIC将窗体文件转换为python程序文件</p></li><li><p>使用转换后的窗体python类构建GUI应用程序</p></li><li><p>界面与逻辑分离的GUI程序框架</p><ul><li><p>多继承方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## appMain2.py 多继承方法 </span><br><span class="hljs-keyword">import</span> sys <span class="hljs-keyword">from</span> PyQt5.QtWidgets <br><span class="hljs-keyword">import</span> QWidget, QApplication <br><span class="hljs-keyword">from</span> ui_FormHello <span class="hljs-keyword">import</span> Ui_FormHello<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QmyWidget</span>(QWidget,Ui_FormHello): <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>): <br><span class="hljs-built_in">super</span>().__init__(parent) <span class="hljs-comment">#调用父类构造函数，创建QWidget窗体 </span><br>self.Lab=<span class="hljs-string">&quot;多重继承的QmyWidget&quot;</span> <span class="hljs-comment">#新定义的一个 变量 </span><br>        self.setupUi(self) <span class="hljs-comment">#self是QWidget窗体，可作 为参数传给setupUi() </span><br>        self.LabHello.setText(self.Lab) <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>: <br>    app = QApplication(sys.argv) <span class="hljs-comment">#创建app </span><br>    myWidget=QmyWidget() <br>    myWidget.show() <br>    myWidget.btnClose.setText(<span class="hljs-string">&quot;不关闭了&quot;</span>) <br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><ul><li><p>采用多继承的方式定义了一个类QmyWidget，称这个类为窗体的业务逻辑类，它的父类是QWidget和 Ui_FormHello。</p></li><li><p>在这个类的构造函数中，首先用函数super()获取父类，并执行父类的构造函数</p></li><li><p>调用setupUi()函数创建UI窗体</p><p>优点是访问方便，缺点是过于开放，不符合面向对象严格封装的设计思想，不利于界面与业务逻辑分离的。</p></li></ul></li><li><p>单继承与界面独立封装方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## appMain.py 单继承方法，能更好地进行界面与逻辑的分离 </span><br><span class="hljs-keyword">import</span> sys <span class="hljs-keyword">from</span> PyQt5.QtWidgets <br><span class="hljs-keyword">import</span> QWidget, QApplication <br><span class="hljs-keyword">from</span> ui_FormHello <span class="hljs-keyword">import</span> Ui_FormHello <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QmyWidget</span>(<span class="hljs-title class_ inherited__">QWidget</span>): <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>): <br>        <span class="hljs-built_in">super</span>().__init__(parent) <span class="hljs-comment">#调用父类构造函 数，创建QWidget窗体 </span><br>        self.__ui=Ui_FormHello() <span class="hljs-comment">#创建UI对象 </span><br>        self.__ui.setupUi(self) <span class="hljs-comment">#构造UI </span><br>        self.Lab=<span class="hljs-string">&quot;单继承的QmyWidget&quot;</span> <br>        self.__ui.LabHello.setText(self.Lab) <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setBtnText</span>(<span class="hljs-params">self, aText</span>):<br>        self.__ui.btnClose.setText(aText) <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>: <br>    app = QApplication(sys.argv) <span class="hljs-comment">#创建app，用 QApplication类 </span><br>    myWidget=QmyWidget() <br>    myWidget.show() <br>    myWidget.setBtnText(<span class="hljs-string">&quot;间接设置&quot;</span>) <br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><ul><li><p>可视化设计的窗体对象被定义为QmyWidget类的一个私有属性self.__ui，在QmyWidget类的内部对窗体上的组件的访问都通过这个属性实现，而外部无法直接访问窗体上的对象，这更符合面向对象封装隔离的设计思想。</p></li><li><p>窗体上的组件不会与QmyWidget里定义的属性 混淆。</p></li><li><p>当然，也可以定义界面对象为公共属性，即创建界面对象时用下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.ui=Ui_FormHello() <br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h5 id="信号和槽的使用">2.3信号和槽的使用</h5><p><strong>信号（Signal）</strong>就是在特定情况下被发射（emit）的一种通告，例如一个PushButton按钮最常见的信号就是鼠标单击时发射的clicked()信号，一个ComboBox最常见的信号是选择的项变化时发射的CurrentIndexChanged()信号。GUI程序设计的主要内容就是对界面上各组件发射的特定信号进行响应，只需要知道什么情况下发射了哪些信号，然后合理地去响应和处理这些信号就可以了。</p><p>槽（Slot）就是对信号响应的函数。槽实质上是一个函数，它可以被直接调用。槽函数与一般的函数不同的是：槽函数可以与一个信号关联，当信号被发射时，关联的槽函数会被自动执行。Qt的类一般都有一些内建（build-in）的槽函数，例如QWidget有一个槽函数close()，其功能是关闭窗口。如果将一个PushButton按钮的clicked()信号与窗体的close()槽函数关联，那么点击按钮时就会关闭窗口。</p><h5 id="自定义信号的使用">2.4自定义信号的使用</h5><h3 id="二pyqt5-gui应用程序设计">二、PyQt5 GUI应用程序设计</h3><h4 id="第3章-常用-界面组件的使用">第3章 常用 界面组件的使用</h4><h4 id="第4章-modelview结构">第4章 Model/View结构</h4><h4 id="第5章-事件处理">第5章 事件处理</h4><h4 id="第6章-对话框与多窗口设计">第6章 对话框与多窗口设计</h4><h4 id="第7章-数据库">第7章 数据库</h4><h4 id="第8章-绘图">第8章 绘图</h4><h4 id="第9章-文件">第9章 文件</h4><h4 id="第10章-多媒体">第10章 多媒体</h4><h4 id="第11章-gui设计增强技术">第11章 GUI设计增强技术</h4><h3 id="三数据可视化">三、数据可视化</h3><h4 id="第12章-pyqtchart二维绘图">第12章 PyQtChart二维绘图</h4><h4 id="第13章-pyqtdatavisualization三维绘图">第13章PyQtDataVisualization三维绘图</h4><h4 id="第14章-matplotlib数据可视化">第14章 Matplotlib数据可视化</h4>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KRL示例程序</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/kuka%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/kuka%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>Ethernet KRL 的供货范围包括一个服务器程序及多个示例配置和示例程序。利用这些示例配置和示例程序，可以在服务器程序与机器人控制系统之间建立通讯。 7.1 接入服务器程序和示例</p><ol type="1"><li>将 XML 示例配置粘贴到机器人控制系统的目录 C:中。</li><li>将 KRL 示例程序粘贴到机器人控制系统的目录 C: 中。</li><li>启动外部系统上的服务器程序。(&gt;&gt;&gt; 7.2 " 服务器程序操作界面 "页码 44)</li><li>按下菜单按钮。窗口通讯属性打开。(&gt;&gt;&gt; 7.2.1 "在服务器程序中设置通讯参数 " 页码 45)</li><li>只有当外部系统有多个网络接口可用时：输入与机器人控制系统通讯时使用的网络适配器编号（= 网卡索引）。</li><li>关闭窗口通讯属性并按下启动按钮。通讯时可用的 IP地址会显示在信息窗口中。</li><li>在所需的 XML 文件中设置显示的外部系统 IP 地址。</li></ol><table><thead><tr class="header"><th>组件</th><th>目录</th></tr></thead><tbody><tr class="odd"><td>服务器程序：EthernetKRL_Server.exe</td><td>DOC</td></tr><tr class="even"><td>KRL 中的示例程序 <br />BinaryFixed.src <br />BinaryStream.src<br />XmlCallback.src <br />XmlServer.src <br />XmlTransmit.src</td><td>DOC</td></tr><tr class="odd"><td>XML 中的示例配置 <br />BinaryFixed.xml <br />BinaryStream.xml<br />XmlCallBack.xml <br />XmlServer.xml <br />XmlTransmit.xml<br />XmlFullConfig.xml</td><td></td></tr></tbody></table><p>XmlServer示例</p><p><strong>EKI 配置为服务器。只要与外部系统存在连接，$FLAG[1]就处于赋值状态。</strong></p><p>xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ETHERNETKRL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">CONFIGURATION</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">EXTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TYPE</span>&gt;</span>Client<span class="hljs-tag">&lt;/<span class="hljs-name">TYPE</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">EXTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">INTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">IP</span>&gt;</span>x.x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">IP</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PORT</span>&gt;</span>54600<span class="hljs-tag">&lt;/<span class="hljs-name">PORT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ALIVE</span> <span class="hljs-attr">Set_Flag</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">INTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">CONFIGURATION</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Sensor/A&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;BOOL&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/B&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">SEND</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ETHERNETKRL</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src程序文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs KRL">1 DEF XmlServer( )<br>2 Declaration<br>3 INI<br>45<br>RET=EKI_Init(&quot;XmlServer&quot;)<br>6 RET=EKI_Open(&quot;XmlServer&quot;)<br>78<br>; wait until server is conntected<br>9 wait for $FLAG[1<br>10 ; wait until server is deconnected<br>11 wait for $FLAG[1]==FALSE<br>12<br>13 RET=EKI_Clear(&quot;XmlServer&quot;)<br>14 END<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KRL</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/KRL/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/KRL/</url>
    
    <content type="html"><![CDATA[<h1 id="krl程序">1、KRL程序</h1><h2 id="程序的结构与建立">1.1程序的结构与建立</h2><h3 id="程序接口">1.1.1程序接口</h3><p>当KRC1软件被安装在目录<code>“KRC：\R1\MADA\”</code>：时，下列文件可作为标准。</p><table><thead><tr class="header"><th>File</th><th>Meaning</th></tr></thead><tbody><tr class="odd"><td>$MACHINE.DAT</td><td>控制器和机器人的系统数据列表和系统变量</td></tr><tr class="even"><td>$ROBCOR.DAT</td><td>机器人动态模型的系统数据列表和数据</td></tr><tr class="odd"><td>MACHINE.UPG</td><td>用于将来升级的系统文件</td></tr><tr class="even"><td>ROBCOR.UPG</td><td>用于将来升级的系统文件</td></tr></tbody></table><p>下列文件可在目录<code>“KRC：\R1\SYSTEM\”</code>：下找到</p><table><thead><tr class="header"><th>File</th><th>Meaning</th></tr></thead><tbody><tr class="odd"><td>$CONFIG.DAT</td><td>系统数据列表和一般数据</td></tr><tr class="even"><td>BAS.SRC</td><td>运动控制的基本软件包</td></tr><tr class="odd"><td>IR_STOPM.SRC</td><td>故障时服务功能所使用的程序</td></tr><tr class="even"><td>SPS.SUB</td><td>监视使用的提交文件</td></tr></tbody></table><h3 id="文件">1.1.2 文件</h3><p>KRL程序由SRC和DAT文件组成。</p><p><strong>SRC</strong>文件包含实际的程序代码，有两个变量：<strong>DEF</strong>和<strong>DEFFCT</strong>(带返回值)。</p><p><strong>DAT</strong>文件包含特定的程序数据。它们的区别基于<strong>KRL</strong>文件概念：除处理顺序不同外，程序包含工业机器人完成的动作也不同。也可能是特殊的运动顺序，打开和关闭夹手，或复杂的顺序，例如有关焊枪限制的控制。</p><h3 id="文件结构">1.1.3文件结构</h3><p>KRL文件的内部结构由<strong>声明部分、指令部分和最多255个局部子程序和函数</strong>组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs KRL">DEF NAME(x1：IN)<br>声明<br>指令<br>END  <br></code></pre></td></tr></table></figure><ul><li><strong>DEF</strong>:有的文件不带扩展名，因此在声明中前缀<strong>“DEF”</strong>。名称最多可包含24个字符，但不允许包含关键字(见[变量和声明]一节)。所有文件以<strong>“DEF”</strong>开头和<strong>“END”</strong>结束。</li><li><strong>声明</strong>:程序执行前已经检查过声明，即在编译期间检查声明。声明部分不可能有指令,第一个指令开始于指令部分。<br /></li><li><strong>指令</strong>与声明不同，指令是动态的，程序处理过程中执行指令。<br /></li><li><strong>数据列表</strong>一个机器人程序可能仅包含一个单个的程序文件或一个程序文件和相关的数据表。数据表和文件具有相同的公共名，区别仅在于扩展名不同。</li></ul><h2 id="建立和编辑程序">1.2建立和编辑程序</h2><h3 id="新建程序">1.2.1新建程序</h3><p><strong>Module：</strong>包含框架程序的一个SRC文件和DAT文件被创建。<strong>Expert：</strong>仅包含标题DEF…和END的一个SRC文件和DAT文件被创建。<strong>Cell：</strong>此时，仅创建一个包含SRC的框架程序。该程序用于通过中央PLC控制机器人。<strong>Function：</strong>此时，一个包含标题DEF…和END的函数(SRC文件)被创建。<strong>Submit：</strong>创建一个SUB文件的框架程序。Submit文件包含可以使用的指令，例如，用于循环监视(夹手等)。Submit文件工作类似于机器人，由控制器解释程序处理。<strong>ExpertSubmit：</strong>使用Submit模板，创建一个SUB文件，这时仅包含标题DEF…和END。</p><h3 id="编辑编译和链接程序">1.2.2 编辑、编译和链接程序</h3><p>通过菜单<strong>“新建”</strong>建立一个文件后，则可以使用编辑器编辑该文件，可使用软键<strong>“编辑”</strong>完成该操作。关闭编辑器后，则整个程序代码被<strong>编译</strong>，也就是说，原文的KRL代码被转换为能让控制器理解的语言。</p><p><strong>编译：</strong>该处理中，编译器检查代码和语法上的错误，如果检查到错误，则产生对应的消息和拓展名为<strong>“.ERR”.</strong>的错误文件</p><p><strong>链接编辑器：</strong>当通过软件“选择”装入一个程序后，建立程序所需要的所有文件和数据表被链接到一起。链接期间，检查模型是否存在，是否已经被编译和存在错误。当传输参数时，编辑器检查所传输参数的类型兼容性。如果链接期间出现错误，则产生扩展名为<strong>“.ERR”</strong>的错误文件。</p><p>您也可以使用一般文本编辑器写一个KRL程序，然后通过“装载”软键装入系统存储器中。这时，您必须<strong>确保完成所有的必要的初始化（例如：轴速度）。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs KRL">下面的简单程序是一个定义轴速度和加速度的举例<br>DEF PROG1()<br>：-----声明部分----<br>INT J<br>：------指令部分-------<br>$VEL_AXIS[1]=100 ；定义轴速度<br>$VEL_AXIS[2]=100<br>$VEL_AXIS[3]=100<br>$VEL_AXIS[4]=100<br>$VEL_AXIS[5]=100<br>$VEL_AXIS[6]=100<br><br>$ACC_AXIS[1]=100 ；定义轴加速度<br>$ACC_AXIS[2]=100<br>$ACC_AXIS[3]=100<br>$ACC_AXIS[4]=100<br>$ACC_AXIS[5]=100<br>$ACC_AXIS[6]=100<br><br>PTP&#123;A1 0，A2 -90，A3 90，A4 0，A5 0，A6 0&#125;<br><br>FOR J=1 TO 5<br>PTP &#123;A1 4&#125;<br>PTP &#123;A2 -7，A3 5&#125;<br>PTP &#123;A1 0，A2 -9，A3 9&#125;<br>ENDFOR<br><br>PTP &#123;A1 0，A2 -90，A3 90，A4 0，A5 0，A6 0&#125;<br><br>END<br></code></pre></td></tr></table></figure><h2 id="改变程序">1.3改变程序</h2><h3 id="程序修改">1.3.1程序修改</h3><h3 id="编辑器">1.3.2编辑器</h3><h3 id="隐藏程序部分">1.4隐藏程序部分</h3><p>缺省时“折合”是“关闭”的，且只能由专家级别用户“打开”，然后用户才可以在KUKA图形用户界面(KUKAGUI)上看见信息。专家级用户在指示范围内装入相关的声明或指令<strong>“FOLD”</strong>和<strong>“：ENDFOLD”</strong>就可以使KRL块让一般用户看见。</p><p>通过按菜单键“程序”，然后选择“折合”和需要的命令，可以使程序中的折合显示或隐藏。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/29/202111301050211.png"alt="image-20211130105034128" /><figcaption aria-hidden="true">image-20211130105034128</figcaption></figure><p> <strong>Current FOLD opn/cls</strong>打开或关闭编辑光标定位行的折合  <strong>All FOLDs opn</strong>打开程序的所有折合  <strong>All FOLDs cls</strong>关闭程序的所有折合</p><h3 id="程序举例">1.4.1 程序举例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs KRL">DEF FOLDS( )<br><br>：FOLD DECLARATION；%附加信息<br>：---------声明部分--------<br>EXT BAS (BAS_COMMAND：IN，REAL：IN)<br>DECL AXIS HOME<br>INT I<br>：END FOLD<br><br>：FOLD INITIALISATION<br>：----------初始化--------<br>INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM( )<br>INTERRUPT ON 3<br>BAS(#INITMOV，0)初始化速度，<br>：加速度，$BASE，$TOOL，等<br>FOR I=1 TO 16<br>$OUT[I]=FALSE<br>ENDFOR<br>HOME=&#123;AXIS：A10，A2-90，A390，A40，A530，A60&#125;<br>：END FOLD<br><br>：-------------主程序部分-----------<br>PTP HOME：BCO运行<br>LIN&#123;X 540，Y 630，Z 1500，A 0，B 90，C 0&#125;<br>PTP HOME<br><br>END<br></code></pre></td></tr></table></figure><p>该举例程序在屏上幕显示如下</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/29/202111301055117.png"alt="image-20211130105557055" /><figcaption aria-hidden="true">image-20211130105557055</figcaption></figure><p>打开折合时的显示：</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/29/202111301056876.png"alt="image-20211130105626771" /><figcaption aria-hidden="true">image-20211130105626771</figcaption></figure><p>对于编辑器来说“折回”仅仅是一个指令。因为其前面的分号，所以编译器把折合语句看作是一般注释。</p><h2 id="程序运行模式">1.5程序运行模式</h2><p>程序运行模式定义如何执行程序</p><ul><li><p>程序不停止</p></li><li><p>一步一步执行运动指令</p></li><li><p>单步执行。</p><p>所有的程序运行模式如下表说明</p></li></ul><table><thead><tr class="header"><th>运行模式</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><strong>GO</strong></td><td>执行程序中的所有指令，直到程序结束。</td></tr><tr class="even"><td><strong>MSTEP</strong></td><td>运动步(运动指令)程序一次执行一个运动指令，也就是说，每个运动指令后插入一个 STOP。执行的程序不作前置处理。</td></tr><tr class="odd"><td><strong>ISTEP</strong></td><td>增量步进(单步) 程序一步一步执行， 也就是说，每个指令后插入一个STOP（包括空行） 。 执行的程序不作前置处理。</td></tr><tr class="even"><td><strong>PSTEP</strong></td><td>程序单步(程序单步) 子程序被完整地执行。执行的程序不作前置处理。</td></tr><tr class="odd"><td><strong>CSTEP</strong></td><td>连续步进(运动指令)程序一次执行一个运动指令，也就是说，每个运动指令后插入一个STOP且精确定位。 执行的程序作前置处理。也就是说，定位为粗定位。</td></tr></tbody></table><p>可在<strong>KCP</strong>上使用状态键或通过变量“<strong><spanclass="math inline">\(PRO_MODE**”选择程序运行模式**GO，MSTEP和ISTEP**。另一方面，程序运行模式**PSTEP和CSTEP**只能通过变量**“\)</span>PRO_MODE”</strong>来设置。要修改该状态，首先激活菜单函数<strong>“Monitor”--&gt;“Variable”--&gt;“Single”</strong>，然后在“名称”的文本输入框中输入变量“$PRO_MODE”和“新值”文本输入框中输入期望的新值。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/30/202111301138779.png"alt="image-20211130113821701" /><figcaption aria-hidden="true">image-20211130113821701</figcaption></figure><h2 id="错误处理">1.6错误处理</h2><h3 id="view-err">view ERR</h3><p>使用菜单<strong>“监视”→“变量”→“修改”</strong>，您可以在线显示错误号的含义。要这样做的话，在状态窗口的<strong>“Name”</strong>文本输入框中输入字符<strong>“$”</strong>后跟错误号。本例子中，输入<strong>“$2263”</strong>,然后按回车键。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/30/202111301541099.png"alt="image-20211130154138042" /><figcaption aria-hidden="true">image-20211130154138042</figcaption></figure><h3 id="jump-to">jump to</h3><p>如果现在将SRC文件(“ERROR.SRC”存在的条件下)装入编辑器，您必须进行适当的修改。闪烁光标已经自动定位在包含错误的第一行，使得修改非常方便。确保关闭受限制的可见性和可以看见DEF—行。细节可见<strong>[隐藏程序部分]</strong>。</p><h3 id="refresh">Refresh</h3><p>关闭编辑器，存储修改后的文件，按错误列表中的软键“刷新”；如果已经排除完了所有的错误，则错误列表消失。</p><h2 id="注释">1.7注释</h2><p>注释可在程序的任何位置插入。通常在其前面加<code>“：”</code></p><h1 id="变量和声明">2 变量和声明</h1><h2 id="变量和名称">2.1变量和名称</h2><h4 id="名称"><strong>名称</strong></h4><p>KRL中的名称</p><ul><li>最大长度为24个字符。</li><li>可以包含字母（A-Z）、数字（0－9）和符号‘—’和‘$’。</li><li>必须以字母开始。</li><li>不要使用关键字。</li></ul><blockquote><p>因为所有的系统变量（见2.4节）以符号<strong>‘$’</strong>开头，所以该符号在自定义名称中不能作为第一个符号。</p></blockquote><p>变量被看作是一个固定的存储器区域，变量的内容可以通过变量名称来寻址。当执行程序时，变量通过存储器位置（地址）和存储器内容（值）来表示。</p><h4 id="值分配"><strong>值分配</strong></h4><p>使用等号(=)给变量分配值。</p><p>不同的数据对象(见节2.2)有不同的存储器需求，所以变量的数据类型在使用前<strong>必须声明</strong></p><h4 id="变量周期"><strong>变量周期</strong></h4><p>变量的周期即该时间段内变量在存储器内存在。取决于变量是在SRC文件或数据表中声明：</p><p><strong>SRC文件中声明的变量</strong>周期受程序运行时间的限制。执行完成后存储器区域再分配，则变量值丢失。<strong>数据表中声明的变量 (见数据表一章)</strong>周期与程序运行时间无关，只要该数据表存在，该变量就存在。因此这种变量是永久保持的（直到系统关机）</p><h2 id="数据对象">2.2数据对象</h2><h3 id="数据对象的声明和初始化">2.2.1数据对象的声明和初始化</h3><h4 id="decl"><strong>DECL：</strong></h4><p>给一个数据类型分配一个变量名称和保留存储器空间，在KRL中须使用DECL声明来完成。</p><p><code>DECL INT QUANTITY，NUMBER</code></p><p>两个变量<code>QUANTITY</code>和<code>NUMBER</code>为<code>INTEGER</code>数据类型。这样编译器就知道这两个变量和相关的数据类型，当使用该变量时，可检查该数据类型是否允许操作。声明变量，如例子所述，首先是<strong>关键字</strong><code>DECL</code>，其后跟的是<strong>数据类型</strong>和<strong>分配该数据类型的变量列表</strong></p><blockquote><p>当声明变量和阵列为预定数据类型时，关键字DECL可以省略。不包括简单数据类型<code>INT，REAL，CHAR和BOOL</code>(见2.2.2一节)，结构数据类型<code>POS，E6POS，FRAME，AXIS和E6AXIS</code>(见2.2.5一节)是预定的。</p><p>对于数据类型是POS的变量（非阵列），声明可以省略。POS数据类型是变量的标准数据类型。自由可定义结构或列举类型的声明中关键字DECL是包括缺少的。(见节2.2.5和2.2.6)。</p></blockquote><h4 id="初始化"><strong>初始化</strong></h4><p>当变量声明完成后，它的值第一次是不可用的，因为根据存储器位置的不同该值可能不同。要使变量可以开始工作，必须预设定一个特定的值。第一次<strong>给变量分配值</strong>称为初始化。</p><p>分配给变量的值是一个指令，因此不要在声明部分出现。初始化，可在指令的任何部分发生。理想状态下，所有<strong>声明过的变量应该是在声明部分后的初始化部分直接初始化完成</strong>。</p><p><strong>仅数据表中允许直接在声明行中初始化变量。</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/30/202111301609288.png"alt="程序基本结构" /><figcaption aria-hidden="true">程序基本结构</figcaption></figure><h3 id="简单数据类型">2.2.2简单数据类型</h3><table><thead><tr class="header"><th>数据类型</th><th>整数</th><th>实数</th><th>布尔</th><th>字符</th></tr></thead><tbody><tr class="odd"><td>关键字</td><td>INT</td><td>REAL</td><td>BOOL</td><td>CHAR</td></tr><tr class="even"><td>含义</td><td>整数</td><td>浮点数字</td><td>逻辑型</td><td>1个字符</td></tr><tr class="odd"><td>值的范围</td><td>-2<sup>31-2</sup>31-1</td><td>+1.1E-38… ±3.4E+38</td><td>TRUE，FALSE</td><td>ASCII字符</td></tr></tbody></table><h4 id="int">INT</h4><p>如果将一个实数值分配给一个整数型变量，则该值一般被圆整(x.0到.49向下圆整，x.5到x.99向上圆整)。</p><blockquote><p>另外：整数相除的结果从小数点后被切掉，举例：7/4=1</p></blockquote><h4 id="二进制系统-十六进制系统">二进制系统 十六进制系统</h4><p>KRL中可使用反逗号<code>（’）</code>和二进制前缀<strong>B</strong>或十六进制前缀<strong>H</strong>表示二进制或十六进制整数。</p><h4 id="实数">实数</h4><p>以<strong>浮点形式</strong>表示，标准格式将一个数字分成<strong>固定点部分</strong>和一个<strong>指数</strong>。</p><h4 id="布尔">布尔</h4><p>布尔变量用于逻辑状态的说明（例如，输入/输出）。值仅有真或假。</p><h4 id="字符型">字符型</h4><p>字符型变量可以代表符合ASCII字符规定的一个准确的字符。给一个字符型变量分配的ASCII字符，必须位于括号<strong>(”)</strong>内。</p><h3 id="阵列">2.2.3阵列</h3><p>术语“阵列“指的是相同数据类型对象的组合产生的一个数据对象；通过下标可以寻址阵列中的独立的元素。声明如下<code>DECL INT OTTO[7]</code></p><h4 id="阵列指针">阵列指针</h4><p>●阵列可能是任何数据类型。单独的元素也可能有复杂的数据类型(例如，阵列组成的阵列)。●仅整数型数据类型允许作为下标。●除常量和变量外，算术表达式也允许作为下标（见节2.3.1）。●下标起始值通常为1。</p><h4 id="维阵列">2维阵列</h4><p>除已经讨论过的一维阵列，也就是说仅有一个下标，在KRL中还可以使用两维或三维阵列。采用<code>DECL REAL MATRIX[7，3]</code></p><h4 id="三维阵列">三维阵列</h4><p>三维阵列可以看作是一个接一个的一些两维矩阵。第三维指示矩阵所处位置的级别（见图4）。一个三维阵列可简单地声明为一维或两维阵列，例如：<code>DECL BOOL ARRAY_3D[5，3，4]</code></p><h3 id="字符串">2.2.4 字符串</h3><p>使用字符型数据类型，您仅可以存储一个独立的字符。要使用一串字符，例如字，您只需简单地将一个一维阵列的数据类型定义为字符型：<code>DECL CHAR NAME[8]</code></p><p>如同通常一样，您可以寻址阵列NAME[]中的单个的元素，例如：<code>NAME[3]=”G”</code></p><p>当然，您也可以直接输入全部字符串：<code>NAME[ ]=”ABCDEFG”</code></p><h3 id="结构">2.2.5结构</h3><p>使用声明语句<code>STRUC</code>，预先定义好的不同数据类型或预定数据类型的组合构成一个新的复合数据类型</p><h4 id="stru">STRU</h4><p>复合使用的一个典型例子是标准数据类型POS。它由文件$OPERATE.SRC中声明的6个实数值和2个整数值组成：<code>STRUC POS REAL X，，Y，Z，A，B，C，INT S，T</code></p><h4 id="点分离">点分离</h4><p>如果，例如您现在使用结构数据类型的一个POSITION变量，您可以使用分离点给个别的元素分配值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">POSITION.X</span>=<span class="hljs-number">34.4</span><br><span class="hljs-attr">POSITION.Y</span>=-<span class="hljs-number">23.2</span><br><span class="hljs-attr">POSITION.Z</span>=<span class="hljs-number">100.0</span><br><span class="hljs-attr">POSITION.A</span>=<span class="hljs-number">90</span><br><span class="hljs-attr">POSITION.B</span>=<span class="hljs-number">29.5</span><br><span class="hljs-attr">POSITION.C</span>=<span class="hljs-number">3.5</span><br><span class="hljs-attr">POSITION.S</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">POSITION.T</span>=<span class="hljs-number">6</span>  <br></code></pre></td></tr></table></figure><h4 id="集合">集合</h4><p>或使用所谓的集合共同分配值：<code>POSITION=&#123;X34.4，Y-23.2，Z100.0，A90，B29.5，C3.5，S2，T6&#125;</code></p><p>● 集合的值可以是简单的常量或它们自己的集合。 ●不是必须在集合中指定结构中的所有组成。 ●成分的指定顺序不必依照它们定义的顺序。 ● 集合中每个成分可能只包含一次。● 在由结构组成阵列的情况下，一个集合定义一个单独的阵列元素的值。 ●结构类型的名称可在一个集合的开头指定-以冒号分开。</p><blockquote><p>对于POS、E6POS、AXIS、E6AXIS和FRAME结构缺少的成分不能被改变。而对于其它集合，则不存在的成分被设置为无效的成分</p></blockquote><p>建立您自己的结构变量的步骤使用下列例子解释：</p><p>变量S_PARA必须由3个不同数据类型的元素组成。首先，必须建立一个满足这个要求的新的数据类型：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">STRUC WELDTYPE <span class="hljs-type">REAL</span> V_WIRE，<span class="hljs-type">INT</span> CHARAC，<span class="hljs-type">BOOL</span> ARC<br></code></pre></td></tr></table></figure><p>建立了一个名称为<code>WELDTYPE</code>的新的数据类型(<code>WELDTYPE</code>不是一个变量!)。<strong>WELDTYPE</strong>由<code>V_WIRE、CHARAC和ARC</code>三个成分组成。您现在可以任何新数据类型的变量，例如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DECL WELDTYPE S_PARA</span><br></code></pre></td></tr></table></figure><p>这样您就建立了一个数据类型为WELDTYPE的变量S_PARA。可以通过点分开单独寻址各个成分和通过集合－如上说明来寻址。</p><blockquote><p>为了更容易区分自定义数据类型和变量，新数据类型的名称以…TYPE结束。</p></blockquote><h4 id="预定义结构">预定义结构</h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/30/202111302104582.png"alt="image-20211130210427516" /><figcaption aria-hidden="true">image-20211130210427516</figcaption></figure><h4 id="几何数据类型">几何数据类型</h4><p><strong>AXIS，E6AXIS，POS，E6POS和FRAME</strong>的类型也称为几何数据类型，因为它们提供编程师一个简单的方法用来说明几何关系。</p><h3 id="列举类型">2.2.6列举类型</h3><p>ENUM</p><p>#符号</p><h2 id="数据处理">2.3数据处理</h2><h3 id="操作">2.3.1操作</h3><h4 id="算术操作">2.3.1.1算术操作</h4><table><thead><tr class="header"><th>操作</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>+</td><td>加法或正号</td></tr><tr class="even"><td>-</td><td>减法或负号</td></tr><tr class="odd"><td>*</td><td>乘法</td></tr><tr class="even"><td>/</td><td>除法</td></tr></tbody></table><h4 id="几何操作">2.3.1.2几何操作</h4><p>KRL中几何操作以冒号<code>：</code>表示。完成数据类型为<strong>FRAME</strong>和<strong>POS</strong>的操作数的框架联接（<strong>逻辑操作</strong>）。</p><h4 id="框架连接">框架连接</h4><p>框架操作是求左和右的值。<strong>最右边的结果</strong>的数据类型往往是操作数的数据类型（见表5）。</p><table><thead><tr class="header"><th>左边操作数(参考CS)</th><th>操作</th><th>右边操作数(目标CS)</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>POS</td><td>：</td><td>POS</td><td>POS</td></tr><tr class="even"><td>POS</td><td>：</td><td>FRAME</td><td>FRAME</td></tr><tr class="odd"><td>FRAME</td><td>：</td><td>POS</td><td>POS</td></tr><tr class="even"><td>FRAME</td><td>：</td><td>FRAME</td><td>FRAME</td></tr></tbody></table><blockquote><p>如果左边的操作数的数据类型是POS，进行类型匹配。POS结构指定的位置被转换为框架。意思是系统检查该位置的刀具框架。</p></blockquote><h5 id="举例">举例</h5><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/30/202111302139127.png"alt="image-20211130213917050" /><figcaption aria-hidden="true">image-20211130213917050</figcaption></figure><p>现在的任务就是定义工件坐标系和房间坐标系的相对关系。首先必须先定义下列框架变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">FRAME <span class="hljs-selector-tag">TABLE</span>，WORKPIECE，BASE<br></code></pre></td></tr></table></figure><p>房间坐标系已经由系统明确地指定。桌子坐标系和工件坐标系现在根据给定的约束初始化。</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tp">TABLE=&#123;<span class="hljs-keyword">X</span><span class="hljs-number">450</span>，<span class="hljs-keyword">Y</span><span class="hljs-number">600</span>，<span class="hljs-keyword">Z</span><span class="hljs-number">800</span>，A<span class="hljs-number">0</span>，B<span class="hljs-number">0</span>，C<span class="hljs-number">0</span>&#125;<br>WORKPIECE=&#123;<span class="hljs-keyword">X</span><span class="hljs-number">80</span>，<span class="hljs-keyword">Y</span><span class="hljs-number">110</span>，<span class="hljs-keyword">Z</span><span class="hljs-number">55</span>，A<span class="hljs-number">-40</span>，B<span class="hljs-number">180</span>，C<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>使用几何操作得到工件坐标系和房间坐标系的相对关系</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">BASE</span><span class="hljs-operator">=</span>TABLE：WORKPIECE<br></code></pre></td></tr></table></figure><p>在我们的案例中，BASE定义如下：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tp">BASE=&#123;<span class="hljs-keyword">X</span><span class="hljs-number">530</span>，<span class="hljs-keyword">Y</span><span class="hljs-number">710</span>，<span class="hljs-keyword">Z</span><span class="hljs-number">855</span>，A<span class="hljs-number">140</span>，B<span class="hljs-number">0</span>，C<span class="hljs-number">-180</span>&#125;<br>另一个可能是：<br>BASE=&#123;<span class="hljs-keyword">X</span><span class="hljs-number">530</span>，<span class="hljs-keyword">Y</span><span class="hljs-number">710</span>，<span class="hljs-keyword">Z</span><span class="hljs-number">855</span>，A<span class="hljs-number">-40</span>，B<span class="hljs-number">180</span>，C<span class="hljs-number">0</span>&#125;  <br></code></pre></td></tr></table></figure><h4 id="关系操作">2.3.1.3关系操作</h4><table><thead><tr class="header"><th>操作</th><th>说明</th><th>允许的数据类型</th></tr></thead><tbody><tr class="odd"><td>==</td><td>等于</td><td>INT，REAL，CHAR，ENUM，BOOL</td></tr><tr class="even"><td>&lt;&gt;</td><td>不等于</td><td>INT，REAL，CHAR，ENUM，BOOL</td></tr><tr class="odd"><td>&gt;</td><td>大于</td><td>INT，REAL，CHAR，ENUM</td></tr><tr class="even"><td>&lt;</td><td>小于</td><td>INT，REAL，CHAR，ENUM</td></tr><tr class="odd"><td>&gt;=</td><td>大于或等于</td><td>INT，REAL，CHAR，ENUM</td></tr><tr class="even"><td>&lt;=</td><td>小于或等于</td><td>INT，REAL，CHAR，ENUM</td></tr></tbody></table><h4 id="逻辑操作">2.3.1.4逻辑操作</h4><table><thead><tr class="header"><th>操作</th><th>操作数数量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>NOT</td><td>1</td><td>非</td></tr><tr class="even"><td>AND</td><td>2</td><td>逻辑与</td></tr><tr class="odd"><td>OR</td><td>2</td><td>逻辑或</td></tr><tr class="even"><td>EXOR</td><td>2</td><td>异或</td></tr></tbody></table><table><thead><tr class="header"><th>操作</th><th>NOT A</th><th>A AND B</th><th>A OR B</th><th>A EXOR B</th><th></th></tr></thead><tbody><tr class="odd"><td>A=TRUE</td><td>B=TRUE</td><td>FALSE</td><td>TRUE</td><td>TRUE</td><td>FALSE</td></tr><tr class="even"><td>A=TRUE</td><td>B=FALSE</td><td>FALSE</td><td>FALSE</td><td>TRUE</td><td>TRUE</td></tr><tr class="odd"><td>A=FALSE</td><td>B=TRUE</td><td>TRUE</td><td>FALSE</td><td>TRUE</td><td>TRUE</td></tr><tr class="even"><td>A=FALSE</td><td>B=FALSE</td><td>TRUE</td><td>FALSE</td><td>FALSE</td><td>FALSE</td></tr></tbody></table><h4 id="位操作">2.3.1.5位操作</h4><table><thead><tr class="header"><th>操作</th><th>操作数数量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>B_NOT</td><td>1</td><td>一位一位反</td></tr><tr class="even"><td>B_AND</td><td>2</td><td>一位一位与</td></tr><tr class="odd"><td>B_OR</td><td>2</td><td>一位一位或</td></tr><tr class="even"><td>B_EXOR</td><td>2</td><td>一位一位异或</td></tr></tbody></table><h4 id="操作优先级">2.3.1.6操作优先级</h4><table><thead><tr class="header"><th>优先级</th><th>操作</th></tr></thead><tbody><tr class="odd"><td>1</td><td>NOT B_NOT</td></tr><tr class="even"><td>2</td><td>* /</td></tr><tr class="odd"><td>3</td><td>+ -</td></tr><tr class="even"><td>4</td><td>AND B_AND</td></tr><tr class="odd"><td>5</td><td>EXOR B_EXOR</td></tr><tr class="even"><td>6</td><td>OR B_OR</td></tr><tr class="odd"><td>7</td><td>== &lt;&gt; &lt; &gt; &gt;= &lt;=</td></tr></tbody></table><h3 id="标准函数">2.3.2标准函数</h3><table style="width:100%;"><thead><tr class="header"><th>说明</th><th>函数</th><th>函数的数 据类型</th><th>函数值的范围</th><th>函数的数 据类型</th><th>结果的范围</th></tr></thead><tbody><tr class="odd"><td><strong>绝对值</strong></td><td><strong>ABS(X)</strong></td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong></td><td><strong>REAL</strong></td><td><strong>0…+∞</strong></td></tr><tr class="even"><td><strong>平方根</strong></td><td><strong>SQRT(X)</strong></td><td><strong>REAL</strong></td><td><strong>0…+∞</strong></td><td><strong>REAL</strong></td><td><strong>0…+∞</strong></td></tr><tr class="odd"><td><strong>正弦</strong></td><td><strong>SIN(X)</strong></td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong></td><td><strong>REAL</strong></td><td><strong>-1…+1</strong></td></tr><tr class="even"><td><strong>余弦</strong></td><td><strong>COS(X)</strong></td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong></td><td><strong>REAL</strong></td><td><strong>-1…+1</strong></td></tr><tr class="odd"><td><strong>正切</strong></td><td><strong>TAN(X)</strong></td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong>*</td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong></td></tr><tr class="even"><td><strong>反余弦</strong></td><td><strong>ACOS(x)</strong></td><td><strong>REAL</strong></td><td><strong>-1…+1</strong></td><td><strong>REAL</strong></td><td><strong>00…180</strong></td></tr><tr class="odd"><td><strong>反正切</strong></td><td><strong>ATAN2(Y，X)</strong></td><td><strong>REAL</strong></td><td><strong>--∞…+∞</strong></td><td><strong>REAL</strong></td><td><strong>-900…+900</strong></td></tr><tr class="even"><td><strong><em>900的倍数，也就是说.X≠(2k-1)</em>90，K∈N</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="系统变量和系统文件">2.4系统变量和系统文件</h2><blockquote><p>所有预定变量的列表见单独资料[系统变量]</p></blockquote><h3 id="计时器">计时器</h3><p>16个计时器变量<strong><spanclass="math inline">\(TIMER[1]…\)</span>TIMER[16]</strong>可用于测量时间顺序，可用作“秒表”。开始和停止计时使用系统变量<strong><spanclass="math inline">\(TIMER_STOP[1]…\)</span>TIMER_STOP[16]：</strong></p><p><strong>开始计时器4</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$TIMER</span>_STOP[<span class="hljs-number">4</span>]=<span class="hljs-literal">FALSE</span> <br></code></pre></td></tr></table></figure><p><strong>关闭计时器4</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$TIMER</span>_STOP[<span class="hljs-number">4</span>]=<span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>使用一般变量分配可在任何时候复位有关的计时器变量。举例来说：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$TIMER</span>[4]=0</span><br></code></pre></td></tr></table></figure><p>如果计时器变量值从负向正变化，对应的标记则设置为TRUE(暂停条件)，举例来说：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$TIMER</span>_FLAG[<span class="hljs-number">4</span>]=<span class="hljs-literal">TRUE</span><br></code></pre></td></tr></table></figure><p>当控制器启动时，所有的计时器变量预设置为0，标记 <strong><spanclass="math inline">\(TIMER_FLAG[1]……\)</span>TIMER_FLAG[16]</strong>预设置为<strong>FALSE</strong></p><p>变量<strong><spanclass="math inline">\(TIMER_STOP[1]……\)</span>TIMER_STOP[16]</strong>预设置为<strong>TRUE</strong>。计时器变量的单位是毫秒(ms)。<strong><spanclass="math inline">\(TIMER[1]……\)</span>TIMER[16]和<spanclass="math inline">\(TIMER_FLAG[1]……\)</span>TIMER_FLAG[16]</strong>以12ms循环更新。</p><h3 id="标记">标记</h3><p>1024个标记<strong><spanclass="math inline">\(FLAG[1]…\)</span>FLAG[1024]</strong>被用作全局标记。这些布尔变量预设置为<strong>FALSE</strong>。您可以随时在用户界面上通过“监视”菜单看标记的当前值</p><h3 id="循环标记">循环标记</h3><p>KRC...中可用32个循环标记<strong><spanclass="math inline">\(CYCFLAG[1]…\)</span>CYCFLAG[32]</strong>，控制器启动后预设为<strong>FALSE</strong>。</p><h3 id="符号">$符号</h3><p>预定变量一般选择一个容易记忆的名称。以$符号开始和有意义的英文缩写组成。</p><p>有的预定变量针对整个KRC...控制器(例如<strong><spanclass="math inline">\(ALARM_STOP**用于定义输出到到PLC的急停信号PLC).其它，然而仅用于机器人(例如**\)</span>BASE</strong>用于基本坐标系)。</p><p>机器人驱动器中有关控制的数据存储在目录<strong>“Steu”</strong>中，有关机器人的数据存储在目录<strong>“R1”</strong>中，并可在KUKAGUI上显示。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112011504129.png"alt="image-20211201150449034" /><figcaption aria-hidden="true">image-20211201150449034</figcaption></figure><p>在KRC...中还有KUKA定义的和控制软件一起的数据表。这些数据表被称为预定数据表，主要包含预定变量。</p><h4 id="machine.dat">$MACHINE.DAT</h4><p>是预定数据表，包含专有的系统变量。适配控制器和所连接机器人(运动信息，控制参数等)的机床数据。控制系统和机器人系统中都有一个$MACHINE.DAT，您不可以新建或删除现存的。例如：</p><div class="line-block"><strong>$ALARM_STOP</strong> | <strong>急停信号(控制器特有)</strong> |<br />--------------- | ----------------------------- |<br /><strong>$NUM_AX</strong> | <strong>机器人轴数 （机器人特有）</strong>|</div><h4 id="custom.dat">$CUSTOM.DAT</h4><p>仅在控制系统中存在的数据表。包含可以配置或参数化特定控制函数的数据。编程师仅可以改变预定变量的值。不可以新建或删除现存的。例如：</p><div class="line-block"><strong>$PSER_1</strong> |<strong>串行接口1的协议参数</strong> |<br />------------ | ------------------------ |<br /><strong>$IBUS_ON</strong> | <strong>激活可选的联络母线组</strong>|</div><h4 id="config.dat">$CONFIG.DAT</h4><p>KUKA预定的数据表，不包含任何系统变量，然而，在控制级和机器人级都有一个<strong>$CONFIG.DAT</strong>可用。其中可定义长时间有效的变量、结构、通道和信号，对许多程序普通重要。数据表分为以下几个程序块：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- BAS</span><br><span class="hljs-comment">-- AUTOEXT</span><br><span class="hljs-comment">-- GRIPPER</span><br><span class="hljs-comment">-- PERCEPT</span><br><span class="hljs-comment">-- SPOT</span><br>A10<br>A50<br>A20<br><span class="hljs-comment">-- TOUCHSENSE</span><br><span class="hljs-comment">-- USER  </span><br></code></pre></td></tr></table></figure><p>用户的全局声明应该输入USER程序块，因为仅该处的声明在以后的软件升级中被转移。</p><h4 id="robcor.dat">$ROBCOR.DAT</h4><p>文件<strong>$ROBCOR.DAT</strong>包含特定机器人的机器人动态模型的数据。在轨迹计划编排中需要这些数据。在文件中您不可以新建一个新变量或删除现存的。</p><h1 id="运动编程">3运动编程</h1><h2 id="不同坐标系的应用">3.1不同坐标系的应用</h2><p>最基本的坐标系时<strong>连接（轴指定）坐标系和笛卡尔坐标系</strong></p><p>KRC...中定义的角度A、B和C是绕坐标轴Z、Y和X的旋转角度。旋转的顺序必须保留。</p><ol type="1"><li>绕Z轴的旋转角度为A</li><li>绕Y轴的旋转角度为B</li><li>绕X轴的旋转角度为C</li></ol><p>这个旋转顺序与众所周知的航空领域的roll--pitch—yaw角度一致。角度C对应于roll，角度B对应于pitch，角度A对应于yaw。</p><p>KRC...中预定了下列<strong>笛卡儿坐标系</strong></p><table><thead><tr class="header"><th>坐标系</th><th>系统变量</th><th>状态</th></tr></thead><tbody><tr class="odd"><td>全局坐标系</td><td>$WORLD</td><td>写保护</td></tr><tr class="even"><td>机器人坐标系</td><td><span class="math inline">\(ROBROOT | 写保护(可在R1/MADA/\)</span>MA CHINE.DAT中改 变)</td><td></td></tr><tr class="odd"><td>工具坐标系</td><td>$TOOL*</td><td>可写</td></tr><tr class="even"><td>基本(工件)坐标系</td><td>$BASE*</td><td>可写</td></tr></tbody></table><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112011649243.png"alt="image-20211201164943160" /><figcaption aria-hidden="true">image-20211201164943160</figcaption></figure><h3 id="world坐标系">world坐标系</h3><p>全局坐标系是固定的(=当机器人移动时坐标系不动)坐标系，用作机器人系统（机器人、支撑部分或工具）的根本坐标系。是机器人系统和单元外围装备的参考系统。</p><h3 id="机器人坐标系">机器人坐标系</h3><p>机器人坐标系位于机器人底部，是机器人机械结构的参考坐标系。起源于全局坐标系且当机器人系统交货时机器人坐标系与全局坐标系一致。与<spanclass="math inline">\(WORLD的偏置关系可使用\)</span>ROBROOT定义。</p><h3 id="工具坐标系">工具坐标系</h3><p>工具坐标系的原点在刀尖上。可以以下列方法选择方位，坐标系的X轴与工具的工作方向一致，X轴的方向远离工具。工具坐标系随工具的移动而移动</p><h3 id="基坐标系">基坐标系</h3><p>基坐标系是用来定义工件位置的参考坐标系。机器人在基坐标系中编程，全局坐标系作为它的参考坐标系。在交货时，<strong><spanclass="math inline">\(BASE=\)</span>WORLD</strong>。可以改变<strong>$BASE</strong>，例如当使用相同的程序加工不同位置的许多相同的工件时。</p><h2 id="点到点运动ptp">3.2点到点运动PTP</h2><p>PTP:点到点运动是将刀尖（刀具中心点：TCP）从当前位置移动到编程终点位置的最快方法。控制器计算各轴必要的角度差别。</p><h3 id="一般说明">3.2.1一般说明</h3><p>使用下列系统变量： ●<strong><spanclass="math inline">\(VEL_AXIS[轴数]:编程的最大轴速度****●\)</span>ACC_AXIS[轴数]:编程的最大轴加速度</strong>机床数据中所有的输入以最大值的百分比给定。对于所有轴来说，如果还没有编程这两个系统变量，执行程序则会产生相关的错误消息。</p><blockquote><p>由于在笛卡儿坐标系中的PTP运动通常不知道哪一个轴是主导轴，所以明智的做法是将所有轴设置同样的加速度和速度值。</p></blockquote><h3 id="更高级的运动轮廓">3.2.2更高级的运动轮廓</h3><h3 id="运动命令">3.2.3运动命令</h3><blockquote><p>程序中首先定义轴的速度和加速度，必须在执行点到点运动前分配这些值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs KRL">DEFPTP_AXIS( ) ;程序名是PTP_AXIS<br>$VEL_AXIS[1]=100 ；定义轴速度<br>$VEL_AXIS[2]=100<br>$VEL_AXIS[3]=100<br>$VEL_AXIS[4]=100<br>$VEL_AXIS[5]=100<br>$VEL_AXIS[6]=100<br><br>$ACC_AXIS[1]=100 ；定义轴加速度<br>$ACC_AXIS[2]=100<br>$ACC_AXIS[3]=100<br>$ACC_AXIS[4]=100<br>$ACC_AXIS[5]=100<br>$ACC_AXIS[6]=100<br>PTP&#123;AXIS：A1 0，A2 –90，A3 90，A4 0，A5 0，A6 0&#125;<br>END<br></code></pre></td></tr></table></figure><h4 id="ptp">PTP</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PTP</span>&#123;A3 <span class="hljs-number">45</span>&#125;  <br></code></pre></td></tr></table></figure><p>PTP指令中定义的角度值是绝对值。因此机器人并不是旋转45度，而是旋转到45度。</p><h4 id="ptp_rel">PTP_REL</h4><p>相对运动，使用指令PTPREL。例如要旋转轴1和4都是35度，简单编程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs KRL">PTP REL PTP REL &#123;A1 35，A4 35&#125;  <br></code></pre></td></tr></table></figure><p>通过POS结构在笛卡儿坐标系中输入值，如同下面的举例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gams">DEF PTP_POS( )<br><br><span class="hljs-meta"><span class="hljs-keyword">$BASE</span>=$WORLD ;设置基本坐标系</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$TOOL</span>=$NULLFRAME  ；设置工具坐标系</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[1]=100 ；定义轴速度</span><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[2]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[3]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[4]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[5]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$VEL</span>_AXIS[6]=100</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[1]=100 ；定义轴加速度</span><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[2]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[3]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[4]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[5]=100</span><br><span class="hljs-meta"><span class="hljs-keyword">$ACC</span>_AXIS[6]=100</span><br><br>PTP&#123;POS：X <span class="hljs-number">1025</span>，Y <span class="hljs-number">0</span>，Z <span class="hljs-number">1480</span>，A <span class="hljs-number">0</span>，B <span class="hljs-number">90</span>，C <span class="hljs-number">0</span>，S ’B010’，T ’B000010’&#125;<br>END<br></code></pre></td></tr></table></figure><h4 id="坐标系">坐标系</h4><p>笛卡儿坐标系中使用<strong>几何操作</strong>可以直接在运动命令中进行框架联接，这种方法，例如可以不修改系统变量<strong>$BASE</strong>而初始化与基本坐标系的偏置。</p><blockquote><p>而且，通过冒号操作指定一个基本偏置比重新定义<spanclass="math inline">\(BASE更有优势：运动指令中出现偏置操作，则必须在运动指令前设置\)</span>BASE。以该方法，即使停止了程序后选择后续的程序段，运动总是选择了正确的基本坐标系。</p><p>因此， <span class="math inline">\(BASE 和\)</span>TOOL仅可以被设置一次，例如，在程序的初始化部分。然后可以使用几何操作进行后续的偏置。</p></blockquote><h4 id="ini">INI</h4><p>在这个例子中，速度和加速度及<spanclass="math inline">\(BASE和\)</span>TOOL坐标系的分配不是“手动”进行，而时由标准基本软件包中的“BAS.SRC”来完成，要这样做，必须首先使用EXT指令使程序认识。初始化命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs KRL">INI BAS(#INITMOV，0)<br></code></pre></td></tr></table></figure><p>然后分配缺省值给所有重要的系统变量。</p><h4 id="bco">BCO</h4><blockquote><p>明智的做法是编程一个“Home”作为第一个运动指令；移动机器人到一个明确定义的位置，这样就确立了程序段一致性。机器人在程序的结束应返回该位置。</p></blockquote><h4 id="s和t">S和T</h4><p>POS定义中的“S”和“T”用于选择一个特定的，明确定义的空间中需要许多轴定位的同一个点的机器人位置 。</p><p>程序的第一个运动指令必须总是一个定义了状态和转的完整的PTP指令(或一个完整的使用轴坐标系的PTP指令)。在后续的PTP指令中，只要不需要特定轴定位，例如要要避开障碍时可以省略“S”和“T”，机器人保持最短轴轨迹使用的S和T值，则在第一个PTP指令中编程“S”和 “T”后，每次程序运行时，机器人的轨迹都相同 。</p><h4 id="turn">Turn</h4><p>属性包含“Turn”属性的扩展笛卡儿位置，可以在不需要特殊移动策略（例如辅助点）时，轴的移动角度大于+1800或小于－1800。对于旋转轴，轴值前面的各位决定符号，如下：位x=0：轴的角度 ≥00 位x=1：轴的角度＜00</p><p><strong>值T‘B10011’意思是指轴1、2、5的角度是负值，而轴3、4、6是正值(高位是0可以省略)。</strong></p><h4 id="status">Status</h4><p>状态S当轴位置不明确时使用(见图18)。S根据当前机器人运动系统的不同而不同</p><h2id="连续轨迹运动cp运动连续轨迹">3.3连续轨迹运动(CP运动=连续轨迹)</h2><h3 id="速度和加速度">3.3.1速度和加速度</h3><p>与PTP运动不同，在连续轨迹运动中不是只定义起点和终点，还需要定义这些点之间沿直线和圆弧轨迹的TCP运动。输入的速度和加速率对于单独的轴或TCP的运动不再有关系，对于平移运动、旋转角和旋转的角度<strong>必须编程速度和加速度</strong>。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012138244.png"alt="image-20211201213842160" /><figcaption aria-hidden="true">image-20211201213842160</figcaption></figure><p>当调用基本软件包的初始化顺序时，CP运动的缺省设置速度和加速率也被预设为机床数据<strong><spanclass="math inline">\(CONFIG.DAT**定义的最大值。CP运动的轴速度和加速度被监视，监视范围在系统变量**\)</span>ACC_ACT_MA和<spanclass="math inline">\(VEL_ACT_MA**定义，如果超过该范围，则触发制动反应，同时产生错误消息。标准范围是法向轴加速度的250%和法向轴速度的110%。这些监控范围对所有操作模式和手动移动都有效。要预防超过监控范围引起的反应（制动反应），可以使用系统变量**\)</span>CP_VEL_TYPE</strong>降低轴进给速、加速度和速度。该变量的缺省设置是<strong>#CONSTANT</strong>，I也就是说，在程序模式降速是不激活的。如果要在T1模式（T1模式使用更低的速度和加速度）使用该功能，必须设置值<strong>#VAR_T1</strong>，而对于所有操作模式则要设置值<strong>#VAR_ALL</strong>。在JOG模式总是激活降速。在测试模式如果降低轨迹速度，系统变量<strong>$CPVELREDMELD</strong>会产生错误消息，要这样做的话，必须分配该值为“1”。</p><h3 id="方位控制">3.3.2方位控制</h3><p>如果轨迹运动期间，要改变工具在空间中的方位，可以使用系统变量<strong>$ORI_TYPE</strong>设置为方位控制模式(见图21)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs KRL">$ORI_TYPE=#CONSTANT 轨迹运动期间方位保持不变；对于使用的起点和终点，编程的方位被忽略。<br>$ORI_TYPE=#VAR 轨迹运动期间从最初的方位到最终的方位，方位连续变化。 该值在初始化期间通过BAS(#INITMOV，0)来设置。<br></code></pre></td></tr></table></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012151012.png"alt="image-20211201215128891" /><figcaption aria-hidden="true">image-20211201215128891</figcaption></figure><p>对于圆弧运动，固定的和变化的方位外，还需要选择空间相关的方位和轨迹相关的方位</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$CIRC_TYPE=#BASE 在圆弧运动期间执行空间相关的方位控制。该值也要在初始化期间通过BAS(#INITMOV，<span class="hljs-number">0</span>)来设置。<br>$CIRC_TYPE=#PATH  在圆弧运动期间执行轨迹相关的方位控制。<br></code></pre></td></tr></table></figure><h4 id="固定方位轨迹相关">固定方位＋轨迹相关</h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012156936.png"alt="image-20211201215601814" /><figcaption aria-hidden="true">image-20211201215601814</figcaption></figure><h4 id="变化的方位轨迹相关">变化的方位+轨迹相关</h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012157417.png"alt="image-20211201215729303" /><figcaption aria-hidden="true">image-20211201215729303</figcaption></figure><h4 id="固定方位空间相关">固定方位＋空间相关</h4><p><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012158373.png" /></p><h4 id="变化的方位空间相关">变化的方位＋空间相关</h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112012158738.png"alt="image-20211201215811638" /><figcaption aria-hidden="true">image-20211201215811638</figcaption></figure><h3 id="线性运动">3.3.3线性运动</h3><h4 id="line">LINE</h4><p>使用关键字LIN或LIN_REL及终点定义来编程一个线性运动，类似于PTP编程。线性运动的终点以笛卡儿坐标输入。仅允许使用数据类型<strong>FRAME或POS</strong>.</p><h4 id="circle">CIRCLE</h4><p>要明确地定义空间中的一个圆和圆弧运动，需要互相不在一条直线的三个不同点。圆弧运动的起点也是当前位置，同PTP中的LIN。</p><h4 id="continue">CONTINUE</h4><h2 id="使用逼近定位的运动">3.5使用逼近定位的运动</h2><h1 id="程序执行控制">5.程序执行控制</h1><h2 id="程序分支">5.1程序分支</h2><h3 id="跳跃分支">5.1.1跳跃分支</h3><h4 id="goto"><strong>GOTO</strong></h4><h3 id="条件分支">5.1.2条件分支</h3><h4 id="if"><strong>IF</strong></h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021002076.png"alt="image-20211202100224989" /><figcaption aria-hidden="true">image-20211202100224989</figcaption></figure><h3 id="转换">5.1.3转换</h3><h4 id="switch">SWITCH</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">DEF MAIN（）<br>…<br>SIGNAL PROG_NR <span class="hljs-variable">$IN</span>[1] <span class="hljs-keyword">TO</span> <span class="hljs-variable">$IN</span>[4]；期望的程序号现在通过PLC存储在INT变量PROG_NO中<br>…<br>SWITCH PROG_NO<br>CASE 1 ；如果<span class="hljs-attribute">PROG_NO</span>=1<br>PART_1（）<br>CASE 2 ；如果<span class="hljs-attribute">PROG_NO</span>=2<br>PART_2（）<br>PART_2A（）<br>CASE3，4，5 ；如果<span class="hljs-attribute">PROG_NO</span>=3，4或5<br><span class="hljs-variable">$OUT</span>[3]=<span class="hljs-literal">TRUE</span><br>PART_345（）<br><span class="hljs-built_in">DEFAULT </span>；如果PROG_NO&lt;&gt;1，2，3，4或5<br>ERROR_UP（）<br>ENDSWITCH<br>…<br>END<br></code></pre></td></tr></table></figure><h2 id="循环">5.2循环</h2><h3 id="计数循环">5.2.1计数循环</h3><h4 id="for">FOR</h4><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021008354.png"alt="image-20211202100830271" /><figcaption aria-hidden="true">image-20211202100830271</figcaption></figure><p>计数器中输入整数类型的表达式作为<strong>Start和End</strong>的值。循环开始时对该表达式求值。</p><p>以起始值预先定义整数型变量<strong>Counter</strong>(必须提前声明)，然后该值在每次循环执行后增加或减少编程的增量。</p><p><strong>Increment</strong>既不能是一个变量，也不能是零。如果没有指定增量，则使用缺省值1。允许使用负的增量值。</p><p>每个FOR语句必须以一个<strong>ENDFOR</strong>语句结束。</p><h3 id="跳出循环">5.2.2跳出循环</h3><h4 id="while">WHILE</h4><p>WHILE循环在重复开始时请求一个执行条件。它是一个跳出循环，它不是单次运行，直到开始设置的执行条件满足时才跳出。WHILE循环语法如下:</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021012568.png"alt="image-20211202101229494" /><figcaption aria-hidden="true">image-20211202101229494</figcaption></figure><h3 id="非一跳出循环">5.2.3非一跳出循环</h3><h4 id="repeat">REPEAT</h4><p>与WHILE循环相对应的是REPEAT循环。REPEAT,直到循环结束时才检查结束条件。因此REPEAT循环总是运行一次，即使在循环开始前结束条件已经满足。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021013437.png"alt="image-20211202101317355" /><figcaption aria-hidden="true">image-20211202101317355</figcaption></figure><h3 id="无穷循环">5.2.4无穷循环</h3><p>只能使用EXIT语句结束指令程序段的重复执行</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021014670.png"alt="image-20211202101457595" /><figcaption aria-hidden="true">image-20211202101457595</figcaption></figure><h3 id="循环的退出">5.2.5循环的退出</h3><p>使用<strong>EXIT语句</strong>可以提前结束任何循环。通过在循环的指令程序段内调用EXIT，循环运行立即结束，程序在循环结束语句后重新开始。</p><p>在REPEAT和WHILEl循环中选择合理的结束和执行条件而不必主要依靠使用EXIT语句。但是对于无穷循环，仅可以使用EXIT结束循环的执行。</p><h2 id="等待指令">5.3等待指令</h2><h3 id="等待一个事件">5.3.1等待一个事件</h3><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021019289.png"alt="image-20211202101902218" /><figcaption aria-hidden="true">image-20211202101902218</figcaption></figure><p>如果在调用WAIT时逻辑表达式条件已经为TRUE，则不会停止程序的执行(但是触发提前运行停止)。如果条件为FALSE，则停止执行程序直到表达式的值为TRUE才继续执行程序。</p><h4 id="数字值">数字值</h4><table><thead><tr class="header"><th>WAIT FOR...</th><th>消息窗口中的消息</th><th>含义</th></tr></thead><tbody><tr class="odd"><td><strong><span class="math inline">\(IN[5]** | **Waiting for input5**| **等待直到输入5为TRUE** | | **\)</span>OUT[5]==FALSE</strong></td><td><strong>Waiting for not output5</strong></td><td><strong>等待直到输入5为FALSE</strong></td></tr><tr class="even"><td><strong><span class="math inline">\(TIMER[5]&gt;=300** | **Waitinguntil timer5&gt;=300** | **等待直到计时器5至少达到 300ms** | |**\)</span>TIMER_FLAG[5]</strong></td><td><strong>Waiting for Timer_Flag5</strong></td><td><strong>等待直到计时器标志5为TRUE</strong></td></tr><tr class="odd"><td><strong><span class="math inline">\(FLAG[5]==FALSE** | **Waiting fornot flag5** | **等待直到标志5为FALSE** | |**\)</span>CYCFLAG[5]</strong></td><td><strong>Waiting for cyclical flag5</strong></td><td><strong>等待直到循环标志5为TRUE</strong></td></tr><tr class="even"><td><strong>I[5]==9</strong></td><td><strong>Waiting for counter5==9</strong></td><td><strong>等待直到计时器5的值等于 “9</strong></td></tr></tbody></table><h4 id="变量值">变量值</h4><p>一个变量被转换为一个数字。该变量必须在数据表(<em>.dat)中声明。在源文件(</em>.src)中的声明则是定义该变量的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs KRL">数据表：            源文件：<br>DEFDAT PROG1      DEF PROG1( )<br>…                 …<br>DECL INT          INT VAR INT VAR=7<br>…                 …<br></code></pre></td></tr></table></figure><p>长文本</p><p>信号声明</p><h3 id="等待时间">5.3.2 等待时间</h3><p><strong>WAIT SEC</strong>语句允许使用秒来编程等待时间：</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021031150.png"alt="image-20211202103119076" /><figcaption aria-hidden="true">image-20211202103119076</figcaption></figure><h2 id="停止程序">5.4停止程序</h2><p><strong>HALT</strong> 如果要中断程序执行和停止处理，编程如下指令</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021031846.png"alt="image-20211202103151778" /><figcaption aria-hidden="true">image-20211202103151778</figcaption></figure><h2 id="确认消息">5.5 确认消息</h2><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/01/202112021034743.png"alt="image-20211202103413677" /><figcaption aria-hidden="true">image-20211202103413677</figcaption></figure><h1 id="输入输出指令">6 输入输出指令</h1><h2 id="一般说明-1">6.1一般说明</h2><p>KRC…可以识别1026个输入和1024个输出。在标准的KUKA控制柜中，用户可以使用X11连接器的下列输入和输出（MFC模块）：输入 1…16</p><p>其它输入/输出可以随意配置，例如使用区域总线。可以读输入和写输出。它们通过系统变量<strong><spanclass="math inline">\(IN[No]或\)</span>OUT[No]</strong>寻址。未使用的输出可以当作标记使用。MFC模块可在文件<strong>“ IOSYS.INI”</strong>重新分配输入/输出。</p><h1 id="子程序和函数">7.子程序和函数</h1><h2 id="声明">7.1声明</h2><h3 id="def">DEF</h3><p>所有的子程序与主程序的声明方法一样，使用DEF声明加上名字，以END结束，举例说明：<imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021121367.png"alt="image-20211202112145283" /></p><h3 id="deffct">DEFFCT</h3><p>函数是子程序类型中的一种；不同的是，程序名同时也是一个指定数据类型的变量。函数的结果可以通过简单地给变量分配一个值来传递。因此，当使用关键字DEFFCT声明函数时，函数的数据类型和函数的名字都要指定。函数以ENDFCT指令结束。因为函数假设为传递一个值，所以必须在ENDFCT语句前使用RETURN语句指定该值。例子:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">DEFFCT <span class="hljs-built_in">INT</span> <span class="hljs-function"><span class="hljs-keyword">FUNCTION</span></span>（）<br>…<br><span class="hljs-keyword">RETURN</span>（X）<br>ENDFCT  <br></code></pre></td></tr></table></figure><h3 id="局部函数">局部函数</h3><p>主程序和子程序或函数在同一个SRC文件中。该文件与主程序名相同。</p><h3 id="全局函数">全局函数</h3><p>全局子程序和函数以单独的SRC文件存储。以该方法，则如果被其它程序调用，则每个调用的程序都变成了子程序</p><p>有在主程序的数据表中声明过的变量都可以在子程序和函数中被识别。主程序（SRC文件）中已经声明过的变量称为“runtime变量”，仅可以在主程序中使用。试图在子程序中使用这些变量会产生相应的错误消息。主程序中声明过的变量也不能在全局子程序和函数中被识别。子程序或函数中声明过的变量在主程序中不能被识别。主程序不能存储其它主程序的局部子程序和函数。局部子程序/函数名的最大长度是24个字符。全局子程序/函数名的最大长度是20个字符（由于有文件扩展名）。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021525430.png"alt="image-20211202152503328" /><figcaption aria-hidden="true">image-20211202152503328</figcaption></figure><h2id="子程序和函数的调用和参数传递">7.2子程序和函数的调用和参数传递</h2><p>通过输入子程序名加上圆括号调用子程序。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">SUBPRO<span class="hljs-name">G1</span>（）  <br></code></pre></td></tr></table></figure><h3 id="参数表">参数表</h3><p><strong>值调用（IN）</strong></p><p><strong>参考调用(OUT)</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021533478.png"alt="image-20211202153337386" /><figcaption aria-hidden="true">image-20211202153337386</figcaption></figure><p>在子程序或函数中通过在参数表的每个变量后输入关键字<strong>IN</strong>输入“通过值调用”。通过输入字<strong>OUT</strong>得到“通过参考调用”，<strong>OUT</strong>也是缺省设置。例如：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">DEF CALCULATE（<span class="hljs-keyword">X</span>：OUT，<span class="hljs-keyword">Y</span>：IN，<span class="hljs-keyword">Z</span>：IN，B）  <br></code></pre></td></tr></table></figure><p>当传输一个阵列时，在子程序和函数中也必须声明该阵列，但是没有索引。</p><h1 id="中断处理">8中断处理</h1><p>可能产生中断的原因和系统将对它们采取的措施，必须在中断可以被激活前定义好。INTERRUPT使用中断声明完成该操作，给每个中断分配一个优先级、事件和调用的中断程序。完整的语句是：<imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021553548.png"alt="image-20211202155355478" /></p><table><thead><tr class="header"><th>自变量</th><th>数据类型</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>Priority</td><td>INT</td><td>指定中断优先级的算术表达式，可以使用的优先级为 1…39和81…128。值40…80为机器人系统的自动优先级分配保留。</td></tr><tr class="even"><td>Event</td><td>BOOL</td><td>定义中断事件的逻辑表达式。下列是允许的： 一个布尔常数 一个布尔变量一个信号名 一个比较</td></tr><tr class="odd"><td>Subprogram</td><td></td><td>当事件发生时要执行的中断程序的名字</td></tr></tbody></table><blockquote><p>中断声明是一条指令，因此， 千万不要在声明部分中使用。</p></blockquote><ul><li>一个声明可能在任何时候被另一个声明重写。</li><li>GLOBAL中断不同于一般的中断，即使声明的子程序在左边仍然保持有效。</li><li>一次最多可以声明32个中断。</li><li>在中断条件下不能存储结构变量和成分。</li><li>除GLOBAL变量和数据表中声明的变量外，实时变量不能当作中断程序参数被传输。</li></ul><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021600081.png"alt="image-20211202160020982" /><figcaption aria-hidden="true">image-20211202160020982</figcaption></figure><h2 id="中断的激活">8.2中断的激活</h2><h3 id="打开中断">打开中断</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INTERRUPT</span> <span class="hljs-literal">ON</span> <span class="hljs-number">4</span>  开优先级为<span class="hljs-number">4</span>的中断  <br><span class="hljs-attribute">INTERRUPT</span> <span class="hljs-literal">ON</span>开所有中断<br></code></pre></td></tr></table></figure><h3 id="边缘触发">边缘触发</h3><p>检查是边缘触发型的，也就是说一个中断仅在逻辑条件从FALSE状态变化为TRUE状态时被触发，反之如果当开中断时条件已经是TRUE则不触发。</p><h3 id="关闭中断">关闭中断</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">与开的方法相同，中断可以单独或所有一起被关：<br>INTERRUPT <span class="hljs-keyword">OFF</span> <span class="hljs-number">4</span><br>或<br>INTERRUPT <span class="hljs-keyword">OFF</span>  <br></code></pre></td></tr></table></figure><h3 id="禁止使能">禁止/使能</h3><p>使用关键字<strong>ENABLE和DISABLE</strong>，已经打开的中断可以被单独或全部使能或禁止。禁止命令可以在被中断前保护程序的某些部分。一个禁止的中断可以被识别和存储，但是不能被执行。仅当被使能后，已经发生的中断才以它们的优先级顺序被执行。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DISABLE</span> <span class="hljs-number">4</span><br>或<br><span class="hljs-keyword">DISABLE</span><br></code></pre></td></tr></table></figure><blockquote><p>触发一个中断的前提条件是： ●中断必须是声明过的（ INTERRUPT DECL…）●中断必须被打开（ INTERRUPT ON） ●中断必须是没有被禁止的●对应的事件必须已经发生（边缘触发）</p></blockquote><h3 id="优先级">优先级</h3><h2 id="停止现在的运动">8.3停止现在的运动</h2><p>如果必要的话，在中断程序中使用BRAKE语句，则可以在中断事件中停止已经正在执行的机器人的运动</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BRAKE</span>  <br></code></pre></td></tr></table></figure><blockquote><p>BRAKE 指令仅可以在中断程序中使用，在其它程序中使用则会导致一个错误引起的停止。</p></blockquote><h2 id="取消中断事务">8.4取消中断事务</h2><p>KRC...中机器人运动的取消是可能的，使用语句：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">RESUME</span><br></code></pre></td></tr></table></figure><p>RESUME可以取消当前中断被声明的级别和以下级别的所有运行的中断程序和子程序。</p><blockquote><p>同 BRAKE 语句，RESUME 仅允许在中断程序中使用。当激活 RESUME语句时，提前运行指针千万不要在中断被声明的级别，至少应低一个级别。</p></blockquote><h2 id="循环标记的使用">8.5循环标记的使用</h2><p>在中断声明指令中不允许使用逻辑操作因此，要定义复杂的事件，您必须使用使用程序如下;</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-variable">$CYCFLAG</span><span class="hljs-selector-attr">[3]</span>=<span class="hljs-variable">$IN</span><span class="hljs-selector-attr">[1]</span> AND（<span class="hljs-selector-attr">[$IN[2]</span> OR <span class="hljs-variable">$IN</span><span class="hljs-selector-attr">[3]</span>）<br>INTERRUPT DECL <span class="hljs-number">10</span> WHEN <span class="hljs-variable">$CYCFLAG</span><span class="hljs-selector-attr">[3]</span> DO IR_PROG（）<br>INTERRUPT ON <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>您可以同时监视和逻辑组合3个输入。</p><h1 id="触发轨迹相关的开关动作">9 触发轨迹相关的开关动作</h1><h2 id="在轨迹的起点或终点开关动作">9.1在轨迹的起点或终点开关动作</h2><h3 id="trigger">TRIGGER</h3><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021655596.png"alt="image-20211202165500522" /><figcaption aria-hidden="true">image-20211202165500522</figcaption></figure><table><thead><tr class="header"><th>自变量</th><th>数据类型</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>Switching point</td><td>INT</td><td>对于单独的程序段， DISTANCE=0指明为下一个运动的起点，属性DISTANCE=1则为终点。 对于逼近程序段，DISTANCE=1表示后续逼近定位圆 弧的中点。如果前一个程序段也是一个逼近程序段， DISTANCE=0表示前述逼近定位 圆弧的终点。</td></tr><tr class="even"><td>Time</td><td>INT</td><td>使用属性DELAY，可以延迟或提前开关动作某些时 间。开关点仅可以在有关程序段保持有效时被延迟 或提前。 单位是毫秒。</td></tr><tr class="odd"><td>Instruction</td><td></td><td>指令可以是 一个子程序调用 变量值的分配一个输出指令（也可以是脉冲）。</td></tr><tr class="even"><td>Priority</td><td>INT</td><td>使用子程序调用的每个TRIGGER语句必须定义一个优先级。允许值为1...39和81...128。优先级的使用与中断中的一样。（见章8）。值40...80为机器人自动优先级分配保留。如果要 使用，编程PRIO=－1。</td></tr></tbody></table><h2 id="在轨迹的任何点开关动作">9.2在轨迹的任何点开关动作</h2><h3 id="trigger-1">TRIGGER</h3><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021658812.png"alt="image-20211202165850725" /><figcaption aria-hidden="true">image-20211202165850725</figcaption></figure><table><thead><tr class="header"><th>自变量</th><th>数据类型</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>Distance</td><td>INT</td><td>触发后， 您可以在从编程的终点起指定一个期望的 距离。如果该终点是一个被逼近的点， 指定开关动作的期望距离从逼近定位范围中紧靠终点位置算起。 通过指定一个负的距离，开关点可以最远被移回到 起点。如果该起点是一个逼近定位点，开关点可以最远被移到逼近定位范围的起点。 通过指定一个正的距离，则最远移到编程的下一个 精确定位点 单位是毫米。</td></tr><tr class="even"><td>Time</td><td>INT</td><td>使用属性DELAY，可以延迟(+)或提前(-)轨迹中开 关点某些时间。开关点仅可以在上述给定（最远到下一个精确定位点）开关范围内被延迟或提前。逼近定位运动中。开关点至多可以被提前到开始逼近定位的起点。 单位是毫秒。</td></tr><tr class="odd"><td>Instruction</td><td></td><td>指令可以是 一个子程序调用 变量值的分配一个输出指令（也可以是脉冲）。</td></tr><tr class="even"><td>Priority</td><td>INT</td><td>使用子程序调用的每个TRIGGER语句必须定义一个优先级。允许值为1...39和81...128。优先级的使用与中断中的一样。（见章8）。值40...80为机器人自动优先级分配保留。如果要 使用，编程PRIO=－1。</td></tr></tbody></table><h2 id="触发语句重叠">9.3触发语句重叠</h2><ul><li>手动给两个触发语句分配各自的优先级；</li><li>分配两个触发语句的优先级都为“--1”，然后由系统自动分配正确的优先级。</li></ul><h1 id="数据表">10 数据表</h1><h2 id="局部数据表">10.1局部数据表</h2><p>数据表用于特殊编程准备和更高级别声明。包含点的消息，例如坐标：●一个数据表可能为每个SRC文件草拟。数据表与SRC文件具有相同的文件名并以“.DAT”作为扩展名。●数据表仅可能由声明和初始化组成。 ● 一行由声明和初始化组成。●不接受系统变量。</p><h3 id="defdat">DEFDAT</h3><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021705632.png"alt="image-20211202170512546" /><figcaption aria-hidden="true">image-20211202170512546</figcaption></figure><p>在数据表中允许使用下列声明： ● SRC文件中使用子程序和函数的外部声明。● 导入变量的导入声明。 ● SRC文件中使用变量的声明和初始化。 ●SRC文件中使用信号和通道名的声明。 ●数据表或SRC文件中使用数据的声明和列举类型（ Struc，Enum）。</p><h2 id="全局数据表">10.2全局数据表</h2><p>数据表中定义的变量可被“别的”主程序接受 。</p><h3 id="public">PUBLIC</h3><p>数据表必须在开头行以关键字PUBLIC定义为“公共可接受”。</p><p>如果要使用变量OTTO，从以上数据表PROG_1中导入到PROG_2（），可以在PROG_2（）中编程下列导入声明，与数据表中的关键字PUBLIC一样：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">IMPORT</span> <span class="hljs-keyword">INT</span> OTTO_2 IS <span class="hljs-regexp">/R1/</span>PROG_1..OTTO<br></code></pre></td></tr></table></figure><p>目录/R1下的数据表PROG_1.DAT中的变量OTTO现在是程序PROG_2（）中的OTTO_2</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021711185.png"alt="image-20211202171155090" /><figcaption aria-hidden="true">image-20211202171155090</figcaption></figure><h3 id="global">GLOBAL</h3><p>变量被声明为“全局变量”，例如<code>DECL GLOBAL INTOTTO=0</code>，可不使用导入命令而被所有别的主程序接受。如果一个全局变量已经被声明，就不能在别的主程序中改变该全局变量名。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/12/02/202112021712719.png"alt="image-20211202171258641" /><figcaption aria-hidden="true">image-20211202171258641</figcaption></figure><blockquote><p>仅允许在数据表中声明全局变量。 如果要在SRC或SUB文件中声明，则会产生错误消息。</p><p>对许多程序有用的长时间有效的、一般意义的变量、结构、通道和信号可以提前定义在$CONFIG.DAT中</p></blockquote><h1 id="外部编辑器">11外部编辑器</h1>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KRL编程示例</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/kuka%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/kuka%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="ethernet-krl">Ethernet KRL</h1><h2 id="配置以太网连接">1.配置以太网连接</h2><p>通过 <strong>XML</strong>文件配置以太网连接。针对每个连接，必须在机器人控制系统的目录 **C:*中定义一个配置文件。在连接初始化时将读入该配置。</p><h2 id="数据交换">2.数据交换</h2><p>数据接收 基本流程 :</p><ol type="1"><li>外部系统发送数据，通过协议传输数据并由 <strong>EKI</strong>接收。</li><li>数据以一定的结构储存在数据存储器中。</li><li>从 KRL 程序以一定的结构存取数据。利用 KRL 指令读取数据并复制到KRL变量中。</li></ol><p>数据发送 基本流程 :</p><ol type="1"><li>利用 KRL 指令将数据以一定的结构写入数据存储器中。</li><li>用 KRL 指令从存储器中读取数据。</li><li><strong>EKI</strong> 通过协议将数据发送给外部系统</li></ol><h2 id="数据保存">数据保存</h2><h2 id="客户端---服务器运行模式">3.客户端 - 服务器运行模式</h2><p>机器人控制系统和外部系统作为客户端和服务器相互连接。其中，外部系统可以是客户端或服务器。激活的连接数量限制在16 个。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2021/11/02/202111022024637.png"alt="image-20211102202431544" /><figcaption aria-hidden="true">image-20211102202431544</figcaption></figure><p>将 <strong>EKI</strong>配置为服务器时，只能有一个单独的客户端与服务器连接。如果需要多个连接，则还要创建多台EKI 服务器。可以同时在 EKI 内部运行多个客户端和服务器</p><h3 id="编程">4.编程</h3><p>在机器人控制系统的目录 **C:* 中定义一个配置文件。XML 文件都是 “区分大小写 ” 的。必须注意区分大小写。</p><p>XML 文件的名称同时也是 KRL 的访问密钥。 示例：<strong>….XML —&gt;EKI_INIT("EXT")</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ETHERNETKRL</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">CONFIGURATION</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">EXTERNAL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">EXTERNAL</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">INTERNAL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">INTERNAL</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;/<span class="hljs-name">CONFIGURATION</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">ELEMENTS</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ELEMENTS</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">SEND</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;<span class="hljs-name">ELEMENTS</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ELEMENTS</span>&gt;</span><br><br>​<span class="hljs-tag">&lt;/<span class="hljs-name">SEND</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ETHERNETKRL</span>&gt;</span> <br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>阶段</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><code>&lt;CONFIGURATION&gt; … &lt;/CONFIGURATION&gt;</code></td><td>配置外部系统和 EKI 之间的连接参数<strong>-&gt;4.1</strong></td></tr><tr class="even"><td><code>&lt;RECEIVE&gt; … &lt;/RECEIVE&gt;</code></td><td>配置机器人控制系统接收的接收结构<strong>-&gt;4.2</strong></td></tr><tr class="odd"><td><code>&lt;SEND&gt; … &lt;/SEND&gt;</code></td><td>配置机器人控制系统发送的发送结构<strong>-&gt;4.3</strong></td></tr></tbody></table><h3 id="连接属性的xml结构">4.1连接属性的XML结构</h3><h4 id="在段落-external-external-中定义外部系统的设置">在段落<code>&lt;EXTERNAL &gt; … &lt;/EXTERNAL &gt;</code>中定义外部系统的设置：</h4><ul><li><table><thead><tr class="header"><th>元素</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><strong>TYPE</strong></td><td><strong>Server</strong>：外部系统是服务器。<br><strong>Client</strong>：外部系统是客户端。<br>默认值： 服务器</td></tr><tr class="even"><td><strong>IP</strong></td><td><strong>外部系统定义为服务器</strong>时的 IP 地址。<br>如果 TYPE =客户端，将忽略 IP 地址</td></tr><tr class="odd"><td>PORT</td><td>外部系统定义为服务器时的端口号<br><strong>1 … 65534</strong></td></tr></tbody></table></li></ul><h4 id="在段落-internal-internal-中定义-eki-的设置">在段落<code>&lt;INTERNAL&gt; … &lt;/INTERNAL&gt;</code> 中定义 EKI的设置：</h4><table><thead><tr class="header"><th>元素</th><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><strong>ENVIRONMENT</strong></td><td>---</td><td>将删除连接与操作相结合 （可选）<br /><strong>Program</strong>：在机器人解释器操作后删除<br><strong>Submit</strong>：在提交解释器操作后删除<br /><strong>System</strong>：在系统操作后删除<br />默认值：<strong>Program</strong></td></tr><tr class="even"><td><strong>BUFFERING</strong></td><td>Mode</td><td>处理所有数据存储器的方法 （可选）<br /><strong>FIFO</strong>：先进先出<br /><strong>LIFO</strong>：后进先出 <br />默认值：<strong>FIFO</strong></td></tr><tr class="odd"><td></td><td>Limit</td><td>数据存储器能够容纳的数据元素最大数量 （可选） 1 … 512 默认值：<strong>16</strong></td></tr><tr class="even"><td><strong>BUFFSIZE</strong></td><td>Limit</td><td>能够接收而无需解释的字节最大数量 (可选) 1 … 65534 字节 默认值：<strong>16384</strong> 字节</td></tr><tr class="odd"><td><strong>TIMEOUT</strong></td><td>Connect</td><td>尝试建立连接的时间，超过这段时间后将中止 尝试 （可选）<strong>0 …65534 ms</strong> 默认值： 2000 ms</td></tr><tr class="even"><td><strong>ALIVE</strong></td><td>Set_Out/Set_Flag</td><td>连接成功时给输出端或旗标赋值 （可选）<br />输出端编号： <strong>1 …4096</strong> <br />旗标编号： <strong>1 … 1024</strong><br />只要有与外部系统的连接处于激活状态，旗标或输出端就处于已赋值状态。如果与外部系统的连接中止，则输出端或旗标将被删除。</td></tr><tr class="odd"><td></td><td>Ping</td><td>发送监控与外部系统连接的 Ping 命令的周期 （可选） <strong>1 …65534</strong></td></tr><tr class="even"><td><strong>IP</strong></td><td>---</td><td><strong>EKI 定义为服务器</strong>时的 IP 地址 <br>（EXTERNAL/TYPE =客户端）<br> 如果 EXTERNAL/TYPE = 服务器，将忽略 IP 地 址。</td></tr><tr class="odd"><td><strong>PORT</strong></td><td>---</td><td>EKI 定义为服务器时的端口号<br><strong>54600-54615</strong></td></tr><tr class="even"><td><strong>PROTOCOL</strong></td><td>---</td><td>传输协议 （可选）<br/><strong>TCP</strong> <br/><strong>UPD</strong><br/>默认值： <strong>TCP</strong> 建议始终使用 <strong>TCP/IP</strong>协议。</td></tr><tr class="odd"><td><strong>MESSAGES</strong></td><td>Logging</td><td>禁用在 EKI 日志中写入信息（可选）。<br /><strong>warning</strong>：记录警告信息和错误信息。<br /><strong>error</strong>：仅记录错误信息。<br /><strong>disabled</strong>：记录已禁用。<br />默认值：<strong>错误</strong></td></tr><tr class="even"><td></td><td>显示屏</td><td>禁用 smartHMI 上的输出信息。<br />默认值： 错误</td></tr></tbody></table><p><strong>实例</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">CONFIGURATION</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">EXTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">IP</span>&gt;</span>172.1.10.5<span class="hljs-tag">&lt;/<span class="hljs-name">IP</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PORT</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">PORT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TYPE</span>&gt;</span>Server<span class="hljs-tag">&lt;/<span class="hljs-name">TYPE</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">EXTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">INTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ENVIRONMENT</span>&gt;</span>Program<span class="hljs-tag">&lt;/<span class="hljs-name">ENVIRONMENT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BUFFERING</span> <span class="hljs-attr">Mode</span>=<span class="hljs-string">&quot;FIFO&quot;</span> <span class="hljs-attr">Limit</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BUFFSIZE</span> <span class="hljs-attr">Limit</span>=<span class="hljs-string">&quot;16384&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TIMEOUT</span> <span class="hljs-attr">Connect</span>=<span class="hljs-string">&quot;60000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ALIVE</span> <span class="hljs-attr">Set_Out</span>=<span class="hljs-string">&quot;666&quot;</span> <span class="hljs-attr">Ping</span>=<span class="hljs-string">&quot;200&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">IP</span>&gt;</span>192.1.10.20<span class="hljs-tag">&lt;/<span class="hljs-name">IP</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PORT</span>&gt;</span>54600<span class="hljs-tag">&lt;/<span class="hljs-name">PORT</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PROTOCOL</span>&gt;</span>TCP<span class="hljs-tag">&lt;/<span class="hljs-name">PROTOCOL</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MESSAGES</span> <span class="hljs-attr">Logging</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">Display</span>=<span class="hljs-string">&quot;disabled&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">INTERNAL</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">CONFIGURATION</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用于数据接收的-xml-结构">4.2用于数据接收的 XML 结构</h3><p>配置取决于是接收 XML 数据还是二进制数据。</p><ul><li><p>如果是接收 XML 数据，必须定义 XML结构：<code>&lt;XML&gt; … &lt;/XML&gt;</code></p></li><li><p>如果是接收二进制数据，必须定义原始数据：<code>&lt;RAW&gt; … &lt;/RAW&gt;</code></p><h4 id="xml-结构-xml-xml-的元素中的属性">XML 结构<code>&lt;XML&gt; … &lt;/XML&gt;</code> 的元素中的属性：</h4></li></ul><table><thead><tr class="header"><th>元素</th><th>属性</th><th></th></tr></thead><tbody><tr class="odd"><td><strong>ELEMENT</strong></td><td>日</td><td><strong>元素名称 在此定义用于接收数据的 XML 结构（XPath）-&gt;4.4</strong></td></tr><tr class="even"><td><strong>ELEMENT</strong></td><td><code>TYPE</code></td><td>元素的数据类型<br><code>STRING</code><br/><code>REAL</code><br/><code>INT</code><br/><code>BOOL</code><br/><code>FRAME</code><br />提示：当标签仅用于事件信息时，可选。在这种情况下不为该元素预留存储空间。事件旗标示例：<code>&lt;ELEMENT Tag="Ext" Set_Flag="56"/&gt;</code></td></tr><tr class="odd"><td><strong>ELEMENT</strong></td><td><code>Set_Out/Set_Flag</code></td><td>接收到元素时给输出端或旗标赋值 （可选）<br/>输出端编号:<br><strong>1-4096</strong><br/>旗标编号：<br/><strong>1-1024</strong></td></tr><tr class="even"><td><strong>ELEMENT</strong></td><td><code>Mode</code></td><td>处理数据存储器中的数据组的方法<br /><code>FIFO</code>：先进先出<br /><code>LIFO</code>：后进先出<br />只有当处理各个数据组的方法与<strong>BUFFERING</strong> 下 为 EKI 配置的不同时才相关。</td></tr></tbody></table><h4 id="原始数据-raw-raw-中的元素的属性">原始数据<code>&lt;RAW&gt; … &lt;/RAW&gt;</code> 中的元素的属性：</h4><table><thead><tr class="header"><th>元素</th><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><strong>ELEMENT</strong></td><td></td><td>元素名称</td></tr><tr class="even"><td><strong>ELEMENT</strong></td><td><strong>TYPE</strong></td><td>元素的数据类型<br /><code>BYTE</code>：有固定长度的二进制数据组。<br /><code>STREAM：</code>有可变末尾字符串和可变长度的二进制数据组</td></tr><tr class="odd"><td><strong>ELEMENT</strong></td><td><code>Set_Out/Set_Flag</code></td><td>接收到元素时给输出端或旗标赋值（可选）<br />输出端编号：<br /><strong>1 …4096</strong><br />旗标编号：<br /><strong>1 … 1024</strong></td></tr><tr class="even"><td><strong>ELEMENT</strong></td><td><strong>EOS</strong></td><td>基本信息的末尾字符串 （只有当 Type = "STREAM" 时，才相关)<br />ASCII编码： <strong>1 … 32 个字符</strong><br />备选结尾通过符号“|"隔开。<br />&lt;ELEMENT … EOS="123,134,21"/&gt;<br />&lt;ELEMENT …EOS="123,134,21Ι13,10"/&gt;</td></tr><tr class="odd"><td><strong>ELEMENT</strong></td><td>Size</td><td>当 Type = "BYTE" 时，信息的固定大小<br /><strong>1 … 3600字节</strong></td></tr></tbody></table><h4 id="实例">实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Str&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;STRING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Pos/XPos&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;REAL&quot;</span> <span class="hljs-attr">Mode</span>=<span class="hljs-string">&quot;LIFO&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Pos/YPos&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;REAL&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Pos/ZPos&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;REAL&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Temp/Cpu&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;REAL&quot;</span> <span class="hljs-attr">Set_Out</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Temp/Fan&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;REAL&quot;</span> <span class="hljs-attr">Set_Flag</span>=<span class="hljs-string">&quot;14&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Integer/AState&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;INT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Integer/BState&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;INT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Boolean/CState&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;BOOL&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Frames/Frame1&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;FRAME&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Attributes/@A1&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;STRING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext/Attributes/@A2&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;INT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Ext&quot;</span> <span class="hljs-attr">Set_Flag</span>=<span class="hljs-string">&quot;56&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RAW</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;RawData&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;BYTE&quot;</span> <span class="hljs-attr">Size</span>=<span class="hljs-string">&quot;1408&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">Set_Flag</span>=<span class="hljs-string">&quot;14&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RAW</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RAW</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;MyStream&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;STREAM&quot;</span> <span class="hljs-attr">EOS</span>=<span class="hljs-string">&quot;123,134,21&quot;</span> <span class="hljs-attr">Size</span>=<span class="hljs-string">&quot;836&quot;</span> <span class="hljs-attr">Set_Flag</span>=<span class="hljs-string">&quot;14&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RAW</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用于发送数据的-xml-结构">4.3用于发送数据的 XML 结构</h3><p>配置取决于是发送 XML 数据还是二进制数据。</p><ul><li><p>如果是发送 XML 数据，必须定义 XML结构：<code>&lt;XML&gt; … &lt;/XML&gt;</code></p></li><li><p>发送二进制数据直接在 KRL 编程中实现。无须指定配置。</p></li></ul><table><thead><tr class="header"><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>ELEMENT</td><td>元素名称 在此定义用于发送数据的 XML 结构 （XPath）。</td></tr></tbody></table><h4 id="示例">示例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@X&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@Y&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@Z&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@A&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@B&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@C&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Status&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Mode&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Complex/Tickcount&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/RobotType/Robot/Type&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">SEND</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="按照-xpath-框架配置">4.4按照 XPath 框架配置</h3><p>使用 XML 进行数据交换时，交换的 XML 文件必须按照相同框架构建。Ethernet KRL 使用 <strong>XPath</strong> 框架进行 XML文件的描述和读取。</p><p>根据 XPath 需区分下列情况：</p><ul><li>描述和读取元素</li><li>描述和读取属性<br /></li><li><strong>元素写法</strong></li><li><strong>保存的用于发送数据</strong>的 XML 文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Robot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Mode</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">Mode</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RobotLamp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">GrenLamp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LightOn</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">LightOn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">GrenLamp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RobotLamp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Robot</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>为<strong>发送数据所配置</strong>的 XML <strong>结构</strong>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Mode&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/RobotLamp/GrenLamp/LightOn&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>元素写法</strong></li><li><strong>保存的用于发送数据</strong>的 XML<strong>文件</strong>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Robot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Data</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ActPos</span> <span class="hljs-attr">X</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ActPos</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LastPos</span> <span class="hljs-attr">A</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">B</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">C</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">X</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">Y</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">Z</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LastPos</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Data</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Robot</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/LastPos/@X&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/LastPos/@Y&quot;</span> /&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Robot/Data/ActPos/@X&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SEND</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="用于数据交换的函数">5.用于数据交换的函数</h2><p>Ethernet KRL将相应的函数提供给机器人控制系统和外部系统之间的数据交换。</p><p><strong>函数的详细说明可参见KST_Ethemet附录</strong>。 (&gt;&gt;&gt;10.4 " 指令参考 " 页码 92)</p><table><thead><tr class="header"><th>初始化、打开、关闭和删除连接</th></tr></thead><tbody><tr class="odd"><td>EKI_STATUS = EKI_Init(CHAR[])</td></tr><tr class="even"><td>EKI_STATUS = EKI_Open(CHAR[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_Close(CHAR[])</td></tr><tr class="even"><td>EKI_STATUS = EKI_Clear(CHAR[])</td></tr></tbody></table><table><thead><tr class="header"><th>发送数据</th></tr></thead><tbody><tr class="odd"><td>EKI_STATUS = EKI_Send(CHAR[], CHAR[], INT)</td></tr></tbody></table><table><thead><tr class="header"><th>写入数据</th></tr></thead><tbody><tr class="odd"><td>EKI_STATUS = EKI_SetReal(CHAR[], CHAR[], REAL)</td></tr><tr class="even"><td>EKI_STATUS = EKI_SetInt(CHAR[], CHAR[], INT)</td></tr><tr class="odd"><td>EKI_STATUS = EKI_SetBool(CHAR[], CHAR[], BOOL)</td></tr><tr class="even"><td>EKI_STATUS = EKI_SetFrame(CHAR[], CHAR[], FRAME)</td></tr><tr class="odd"><td>EKI_STATUS = EKI_SetString(CHAR[], CHAR[], CHAR[])</td></tr></tbody></table><table><thead><tr class="header"><th>读取数据</th></tr></thead><tbody><tr class="odd"><td>EKI_STATUS = EKI_GetBool(CHAR[], CHAR[], BOOL)</td></tr><tr class="even"><td>EKI_STATUS = EKI_GetBoolArray(CHAR[], CHAR[], BOOL[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_GetInt(CHAR[], CHAR[], INT)</td></tr><tr class="even"><td>EKI_STATUS = EKI_GetIntArray(CHAR[], CHAR[], INT[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_GetReal(CHAR[], CHAR[], REAL)</td></tr><tr class="even"><td>EKI_STATUS = EKI_GetRealArray(CHAR[], CHAR[], REAL[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_GetString(CHAR[], CHAR[], CHAR[])</td></tr><tr class="even"><td>EKI_STATUS = EKI_GetFrame(CHAR[], CHAR[], FRAME)</td></tr><tr class="odd"><td>EKI_STATUS = EKI_GetFrameArray(CHAR[], CHAR[], FRAME[])</td></tr></tbody></table><table><thead><tr class="header"><th>检查函数是否出现错误</th></tr></thead><tbody><tr class="odd"><td>EKI_CHECK(EKI_STATUS, EKrlMsgType, CHAR[])</td></tr></tbody></table><table><thead><tr class="header"><th>删除、禁用、解禁、检查数据存储器</th></tr></thead><tbody><tr class="odd"><td>EKI_STATUS = EKI_Clear(CHAR[])</td></tr><tr class="even"><td>EKI_STATUS = EKI_ClearBuffer(CHAR[], CHAR[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_Lock(CHAR[])</td></tr><tr class="even"><td>EKI_STATUS = EKI_Unlock(CHAR[])</td></tr><tr class="odd"><td>EKI_STATUS = EKI_CheckBuffer(CHAR[], CHAR[])</td></tr></tbody></table><h3 id="提示">5.1提示</h3><ul><li>建议为每个发送和接收任务打开一个单独的通道。<br /></li><li>使用 KUKA.MultiSubmitInterpreter时，上述发送和接收特性同样适用。</li><li>在预进中执行 EKI 指令！</li></ul><h3 id="初始化和删除连接">5.2初始化和删除连接</h3><p>必须用函数 <code>EKI_Init()</code>创建连接并初始化。此时将读入函数中给出的连接配置。既可在机器人解释器，也可在提交解释器中创建连接。可在机器人或提交解释器中通过函数<code>EKI_Clear()</code>重新删除连接。此外，删除连接可与机器人或提交解释器的操作或系统操作对接。（可通过连接配置中的<code>&lt;ENVIRONMENT&gt;</code> 元素配置）</p><h3 id="打开和关闭连接">5.3打开和关闭连接</h3><p><strong>通过一个 KRL 程序建立与外部系统的连接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs KRL">1 DEF Connection()<br>2 ...<br>3 RET=EKI_Init(&quot;Connection&quot;) //将 EKI 与外部系统连接的通道初始化。<br>4 RET=EKI_Open(&quot;Connection&quot;) //打开通道。<br>5 ...                      //用于将数据写入存储器、发送数据或访问已接收的数据的 KRL指令<br>6 Write data, send data or get received data<br>7 ...<br>8 RET=EKI_Close(&quot;Connection&quot;) //关闭通道<br>9 RET=EKI_Clear(&quot;Connection&quot;) //删除通道<br>10 ...<br>11 END<br></code></pre></td></tr></table></figure><p>编程时须注意 EKI 是配置为服务器还是客户端。</p><p><strong>服务器运行模式</strong></p><ul><li>当外部系统配置为客户端时，<code>EKI_Open()</code> 会将 EKI （=服务器）置于监听状态。服务器等待客户端的连接问询，但不中断程序运行。如果配置文件中未描述元素<code>&lt;TIMEOUT Connect="…"/&gt;</code>，服务器将一直等待，直至客户端请求连接为止。</li><li>客户端的连接问询通过访问 EKI 或通过事件信息表示，例如通过元素<code>&lt;ALIVE</code> <code>SET_OUT="…"/&gt;</code>。<br /></li><li>如果在服务器期待连接问询的过程中要中断程序运行，必须编程设定一个事件旗标或输出端，例如 <code>WAIT FOR $OUT[…]</code>。</li></ul><p><strong>建议在服务器运行模式下不要使用<code>EKI_Close()</code>。在服务器运行模式下，将从外部客户端关闭通道。</strong></p><h3 id="发送数据">5.4发送数据</h3><p>根据配置和编程不同，可用 <code>EKI_Send()</code> 发送下列数据</p><p><strong>通过 XML 结构通讯时：</strong></p><ul><li>完整的 XML 结构<br /></li><li>XML 结构的一部分<br /></li><li>可变长度的任意字符串</li></ul><p><strong>通过原始数据通讯时：</strong></p><ul><li>对于有固定长度的二进制数据组 （属性 Type ="BYTE"）：有固定长度的任意字符串<ul><li>用字节表示的字符串大小必须与配置的属性 Size（大小）完全相符。超出时将输出错误信息，低于时将输出警告信息。<br /></li><li>必须在 KRL 程序中用 <code>CAST_TO()</code>读入固定长度的二进制数据组。只可读取类型为 REAL （4 字节）的数据，非Double （双精度）型</li></ul></li></ul><h4 id="发送-xml-数据">5.4.1 发送 XML 数据：</h4><h5 id="发送完整的-xml-结构">发送完整的 XML 结构</h5><ul><li>保存的用于发送数据的 XML 结构：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Robot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ActPos</span> <span class="hljs-attr">X</span>=<span class="hljs-string">&quot;1000.12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ActPos</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Status</span>&gt;</span>12345678<span class="hljs-tag">&lt;/<span class="hljs-name">Status</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Robot</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs KRL">DECL EKI_STATUS RET<br>RET=EKI_Send(&quot;Channel_1&quot;,&quot;Robot&quot;)<br></code></pre></td></tr></table></figure><ul><li>发送的 XML 结构：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">Robot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ActPos</span> <span class="hljs-attr">X</span>=<span class="hljs-string">&quot;1000.12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ActPos</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Status</span>&gt;</span>12345678<span class="hljs-tag">&lt;/<span class="hljs-name">Status</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Robot</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="发送-xml-结构的一部分">发送 XML 结构的一部分：</h5><ul><li><p>保存的用于发送数据的 XML 结构与之前相同</p></li><li><p>编程</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">DECL EKI_STATUS <span class="hljs-keyword">RET</span><br><span class="hljs-keyword">RET</span>=EKI_Send(<span class="hljs-string">&quot;Channel_1&quot;</span>,<span class="hljs-string">&quot;Robot/ActPos&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>发送的 XML 结构</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Robot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ActPos</span> <span class="hljs-attr">X</span>=<span class="hljs-string">&quot;1000.12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ActPos</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Robot</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="直接发送字符串">5.4.2直接发送字符串：</h4><h4 id="发送二进制数据">5.4.3发送二进制数据：</h4><h5 id="发送固定长度-10字节的二进制数据组">发送固定长度（10字节）的二进制数据组</h5><h5id="发送有末尾字符串和可变长度的二进制数据组">发送有末尾字符串和可变长度的二进制数据组：</h5><h5id="发送有末尾字符串和可变长度限制为字符最大值的二进制数据组">发送有末尾字符串和可变长度、限制为字符最大值的二进制数据组：</h5><h3 id="读取数据">5.5读取数据</h3><p>​ 读取数据时，必须通过数值赋值等方式，将相应的 KRL 变量初始化。</p><ul><li><p>​ 如要读取 XML 数据，可使用所有存取函数 <code>EKI_Get…</code>()。</p></li><li><p>​如要从存储器中读取二进制数据组，必须使用存储函数<code>EKI_GetString()</code>。</p></li></ul><h4 id="读取-xml-数据">读取 XML 数据：</h4><p><strong>用于数据接收的 XML 结构</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RECEIVE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Sensor/Message&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;STRING&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ELEMENT</span> <span class="hljs-attr">Tag</span>=<span class="hljs-string">&quot;Sensor/Status/IsActive&quot;</span> <span class="hljs-attr">Type</span>=<span class="hljs-string">&quot;BOOL&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RECEIVE</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编程：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs KRL">; Declaration<br>INT i<br>DECL EKI_STATUS RET<br>CHAR valueChar[256]<br>BOOL valueBOOL<br><br>; Initialization<br>FOR i=(1) TO (256)<br>valueChar[i]=0<br>ENDFOR<br>valueBOOL=FALSE<br><br>RET=EKI_GetString(&quot;Channel_1&quot;, &quot;Sensor/Message&quot;, valueChar[])<br>RET=EKI_GetBool(&quot;Channel_1&quot;, &quot;Sensor/Status/IsActive&quot;, valueBOOL)<br></code></pre></td></tr></table></figure><p><strong>用传感器数据描述的 XML 文件 （已接收的数据）：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">Sensor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span>Example message<span class="hljs-tag">&lt;/<span class="hljs-name">Message</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Status</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">IsActive</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">IsActive</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Status</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Sensor</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>读取二进制数据组</strong></p><h3 id="删除数据存储器">5.6删除数据存储器</h3><ul><li><p>通过 <code>EKI_Clear()</code>删除：删除所有数据存储器，退出以太网连接</p></li><li><p>通过 <code>EKI_ClearBuffer()</code>删除：删除特定数据存储器，不退出以太网连接</p></li></ul><h3 id="eki_status-函数特定返回值的结构">5.7EKI_STATUS –函数特定返回值的结构</h3><p>EKI 的每项函数都会返回函数特定的数值。EKI_STATUS 是这些数值写入的全局结构变量。</p><h3 id="配置事件信息">5.8配置事件信息</h3><p>通过给输出端或旗标赋值，可报告下列事件：</p><ul><li>连接已激活。</li><li>出现一个单独的 XML 元素。</li><li>出现一个完整的 XML 结构或一个完整的二进制数据组。</li></ul><h3 id="收完整的-xml-数据组">5.9 收完整的 XML 数据组</h3><p>5.10 处理不完整数据组</p><p>6.2.11 EKI_CHECK() – 检查函数是否有错误</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冗余、工件优化</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E5%86%97%E4%BD%99%E3%80%81%E5%B7%A5%E4%BB%B6%E4%BC%98%E5%8C%96/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E5%86%97%E4%BD%99%E3%80%81%E5%B7%A5%E4%BB%B6%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一冗余自由度">一、冗余自由度</h1><p>刀具路径由离散的CLS数据组成， <span class="math display">\[CLS=(x,y,z,i,j,k)\]</span>其中<strong>x,y,z</strong>为刀具位置，<strong>i,j,k</strong>为刀轴方向的单位向量</p><h2 id="cls对应的末端姿态">1、CLS对应的末端姿态</h2><h3 id="方法一">方法一：</h3><p>引用文献中的方法</p><blockquote><p>Peng J, Ding Y, Zhang G, 等. Smoothness-oriented path optimizationfor robotic milling processes[J]. Science China Technological Sciences,2020, 63(9): 1751–1763.</p></blockquote><p>由cls可以生成刀具姿态，但是刀具姿态并不唯一，定义初始机器人任务姿态为：</p><p><spanclass="math inline">\(o_i=(x,y,z)\)</span>为刀具姿态矩阵的位置，z轴向量为<span class="math display">\[z_i = （i，j，k）\]</span> x轴向量为 <span class="math display">\[x_i=y_i \times z_i\]</span> y轴向量可以有下式计算得来 <span class="math display">\[y_i= \frac{z_i \times \overline{o_{i+1} o_{i}} } {\lVert {z_i \times\overline{o_{i+1} o_{i}}} \lVert}\\对于最后一个cls点\\y_i= \frac{z_i \times \overline{o_{i-1} o_{i}} } {\lVert {z_i \times\overline{o_{i-1} o_{i}}} \lVert}\\\]</span>由此可以得到机器人末端初始姿态矩阵，因为绕刀具轴的旋转对铣刀定位没有影响，因此对于一个CLS，存在无数的可行机器人姿态，可由绕刀轴旋转得到。<span class="math display">\[T(\gamma_i) = T_i \cdot Rot(\hat{z},\gamma_i)\\T_i = \begin{bmatrix}x_i&amp;y_i&amp;z_i&amp;o_i\\0&amp;0&amp;0&amp;1\end {bmatrix}\\\]</span> 其中<spanclass="math inline">\(T_i\)</span>为cls对应的初始末端矩阵，<spanclass="math inline">\(\gamma \in[-\pi,\pi]\)</span>为冗余自由度，这样就可以得到CLS任意冗余自由度对应的末端姿态矩阵。</p><blockquote><p>这种方法会导致刀具轨迹弯折时机器人姿态变化较大</p></blockquote><h3 id="方法二">方法二：</h3><blockquote><p>[1]Zhu W, Qu W, Cao L, 等. An off-line programming system for roboticdrilling in aerospace manufacturing[J]. The International Journal ofAdvanced Manufacturing Technology, 2013, 68(9–12): 2535–2545.</p></blockquote><p>定义与上一个的方法一样，<span class="math inline">\(z_i =[i,j,k]\)</span>，而<spanclass="math inline">\(x_i\)</span>是三个标准单位向量<spanclass="math inline">\([1,0,0],[0,1,0],[0,0,1]\)</span>在由<spanclass="math inline">\([x,y,z]和[i,j,k]\)</span>决定的平面上的最长投影的归一化向量，<spanclass="math inline">\(y_i\)</span>是<spanclass="math inline">\(z_i\)</span>和<spanclass="math inline">\(x_i\)</span>的叉积。</p><h3 id="方法三">方法三:</h3><blockquote><p>[1]熊刚. 机器人铣削加工的误差补偿和力控制方法研究[D]. 上海交通大学,2019.</p></blockquote><figure><imgsrc="%E5%86%97%E4%BD%99%E3%80%81%E5%B7%A5%E4%BB%B6%E4%BC%98%E5%8C%96/image-20220513120231244.png"alt="image-20220513120231244" /><figcaption aria-hidden="true">image-20220513120231244</figcaption></figure><h3 id="方法四">方法四：</h3><p>计算刀轴向量和 基座标系Z轴之间的变换矩阵</p><p>将两个向量之间的变换视为绕某一轴的旋转某一角度的螺旋运动，旋转角为两个向量之间的夹角，而旋转轴则是两个向量之间的叉积。</p><p>已知单位向量，将其绕某一轴<spanclass="math inline">\(\omega\)</span>旋转<spanclass="math inline">\(\theta\)</span>，通过使用<strong>罗德里格斯公式</strong>可以计算其旋转矩阵。<span class="math display">\[R(\omega,\theta) =I +sin\theta[\omega]+(1-cos\theta)[\omega]^2\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">方法一：<br><span class="hljs-comment">#使用轴角法求取向量之间的变换矩阵，和上一个函数是一样的方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotation_matrix_from_vectors2</span>(<span class="hljs-params">vec2</span>):<br>    vec1 = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>    <span class="hljs-comment">#规范化两个向量</span><br>    a, b = (vec1 / np.linalg.norm(vec1)).reshape(<span class="hljs-number">3</span>), (vec2 / np.linalg.norm(vec2)).reshape(<span class="hljs-number">3</span>)<br>    <span class="hljs-comment">#求两个向量变换的旋转轴</span><br>    v = np.cross(a, b)<br>    s = np.linalg.norm(v)<br>    v = v / s<br>    <span class="hljs-comment">#求旋转角度</span><br>    c = np.dot(a, b)<br>    theta = math.acos(c)<br>    <span class="hljs-comment">#使用mr库求取轴角法的旋转矩阵，用的是罗德里格斯公式</span><br>    omegaHat = mr.VecToso3(v)<br>    so3mat = omegaHat * theta<br>    matrix = mr.MatrixExp3(so3mat)<br>    <span class="hljs-comment">#求矩阵对应的欧拉角</span><br>    r = R.from_matrix(matrix)<br>    euler = r.as_euler(<span class="hljs-string">&#x27;ZYX&#x27;</span>,degrees=<span class="hljs-literal">True</span>)<br>    matrix = r.as_matrix()<br>    <span class="hljs-keyword">return</span> matrix<br><br>方法二：本质上都是一样的<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotation_matrix_from_vectors</span>(<span class="hljs-params">vec1,vec2</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Find the rotation matrix that aligns vec1 to vec2</span><br><span class="hljs-string">    :param vec1: A 3d &quot;source&quot; vector</span><br><span class="hljs-string">    :param vec2: A 3d &quot;destination&quot; vector</span><br><span class="hljs-string">    :return mat: A transform matrix (3x3) which when applied to vec1, aligns it with vec2.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    a, b = (vec1 / np.linalg.norm(vec1)).reshape(<span class="hljs-number">3</span>), (vec2 / np.linalg.norm(vec2)).reshape(<span class="hljs-number">3</span>)<br>    v = np.cross(a, b)<br>    c = np.dot(a, b)<br>    s = np.linalg.norm(v)<br>    kmat = np.array([[<span class="hljs-number">0</span>, -v[<span class="hljs-number">2</span>], v[<span class="hljs-number">1</span>]], [v[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>, -v[<span class="hljs-number">0</span>]], [-v[<span class="hljs-number">1</span>], v[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>]])<br>    rotation_matrix = np.eye(<span class="hljs-number">3</span>) + kmat + kmat.dot(kmat) * ((<span class="hljs-number">1</span> - c) / (s ** <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> rotation_matrix<br></code></pre></td></tr></table></figure><h2 id="末端姿态对应的欧拉角">2、末端姿态对应的欧拉角</h2><p>末端到基座标的旋转角ABC，是绕动坐标系旋转的ZYX欧拉角，KRC中定义角度A、B和C是绕Z、Y和X的旋转角度，旋转顺序也必须遵从：</p><ol type="1"><li>绕Z轴旋转角度为A</li><li>绕Y轴旋转角度为B</li><li>绕X轴旋转角度为C</li></ol><figure><imgsrc="%E5%86%97%E4%BD%99%E3%80%81%E5%B7%A5%E4%BB%B6%E4%BC%98%E5%8C%96/image-20220504214148968-16516717171351.png"alt="image-20220504214148968" /><figcaption aria-hidden="true">image-20220504214148968</figcaption></figure><p>由机器人导论中的方法，对旋转矩阵求逆解 <span class="math display">\[R_{ZYX}=R_Z(\alpha)R_Y(\beta)R_X(\gamma)=\begin {bmatrix} r11 &amp; r12&amp;r13\\r21&amp;r22&amp;r23\\r31&amp;r32&amp;r33\end {bmatrix}\\\beta=Atan2(-r_{31},\sqrt{r_{11}^2 + r_{21}^2})\\\alpha=Atan2(\frac {r_{21}}{c\beta},\frac {r_{11}}{c\beta})\\\gamma = Atan2(\frac{r_{32}}{c\beta},\frac {r_{33}}{c\beta})\]</span> 虽然存在第二个解，但是在上式中取<spanclass="math inline">\(\beta\)</span>的正根以得到单解，满足<spanclass="math inline">\(-90\le \beta \le90\)</span>，以此获取各种姿态表示法之间一一对应的映射函数。如果等于+-90，解的结果就退化了，这个时候一般取<spanclass="math inline">\(\alpha = 0\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人运动学笔记</title>
    <link href="/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BF%90%E5%8A%A8%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/23/note/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BF%90%E5%8A%A8%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一机器人学">一、机器人学</h1><h2 id="poe">1.POE</h2><p>（1）</p><p>（2）</p><h3 id="刚体运动">（3）刚体运动</h3><h4 id="旋转与角速度">3.1旋转与角速度</h4><h5 id="旋转矩阵">1.旋转矩阵</h5><p><span class="math display">\[R=Rot(\hat{\omega},\theta)\]</span></p><p>满足以下条件</p><ul><li>正则条件</li><li>正交条件</li><li>坐标系三个坐标轴遵循右手定则</li></ul><p>3*3旋转矩阵组成的集合被称为<strong>特殊正交群SO(3)</strong></p><p><strong>特性</strong></p><ul><li>封闭性</li><li>结合律</li><li>幺元性</li><li>可逆性</li></ul><p><strong>用途</strong></p><ol type="1"><li>表示姿态</li><li>进行坐标系转换</li><li>对向量和坐标系进行旋转变换</li></ol><p><strong>左乘</strong>旋转矩阵会得到绕固定坐标系中的转轴转动，<strong>右乘</strong>会得到绕<strong>物体坐标系</strong>中转轴的转动。</p><h5 id="角速度">2.角速度</h5><p><span class="math display">\[\omega=\hat{\omega}\dot{\theta}\]</span></p><p><strong>反对称矩阵</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131149688.png"alt="image-20220113114954584" /><figcaption aria-hidden="true">image-20220113114954584</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131154664.png"alt="image-20220113115432581" /><figcaption aria-hidden="true">image-20220113115432581</figcaption></figure><p>在<strong>空间坐标系中的角速度</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131156862.png"alt="image-20220113115601787" /><figcaption aria-hidden="true">image-20220113115601787</figcaption></figure><p><strong>物体坐标系下的角速度</strong> <span class="math display">\[[\omega_b]=R^{-1}\dot{R}\]</span> <span class="math inline">\(\omega \inR^3\)</span>是角速度的向量表达形式，<spanclass="math inline">\([\omega]\in so(3)\)</span>是3*3矩阵表示形式。</p><h5 id="转动的指数坐标表示">3.转动的指数坐标表示</h5><p><strong>转动的三参数指数坐标</strong></p><p>向量<span class="math inline">\(\dot\omega \theta \inR^3\)</span>就是转动的三参数指数坐标形式，单独写就是<strong>转动的轴-角表示法</strong></p><p><strong>刚体转动的指数坐标</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131206828.png"alt="image-20220113120650698" /><figcaption aria-hidden="true">image-20220113120650698</figcaption></figure><p><strong>刚体转动的矩阵对数</strong></p><p>若<span class="math inline">\(\dot\omega \theta \inR^3\)</span>表示旋转矩阵R的指数坐标，那么反对称矩阵<spanclass="math inline">\([\hat{\omega }\theta]=[\hat{\omega }]\theta \inso(3)\)</span>就是矩阵R的矩阵对数。矩阵对数是矩阵指数的可逆形式。正像矩阵指数是矩阵形式的角速度<spanclass="math inline">\([\hat{\omega }]\theta \inso(3)\)</span>在单位时间（ 1秒）内的定积分，使刚体运动到给定姿态<spanclass="math inline">\(R\inSO(3)\)</span>—样，矩阵对数则是对R进行微分，以找到一个常值角速度<spanclass="math inline">\([\hat{\omega }]\theta \inso(3)\)</span>的矩阵表示形式。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131209425.png"alt="image-20220113120944350" /><figcaption aria-hidden="true">image-20220113120944350</figcaption></figure><h4 id="刚体运动与运动旋量">3.2刚体运动与运动旋量</h4><p><strong>齐次变换矩阵T</strong>与旋转矩阵R相对应，螺旋轴S与旋转轴<spanclass="math inline">\(\hat\omega\)</span>相对应，运动旋量V(可表示成<spanclass="math inline">\(S\dot\theta\)</span>）与角速度<spanclass="math inline">\([\hat{\omega }\theta]=[\hat{\omega }]\theta \inso(3)\)</span>相对应，而用于描述刚体位移的指数坐标<spanclass="math inline">\(S\theta \in R^6\)</span>与刚体转动的指数坐标<spanclass="math inline">\(\hat \omega \theta \in R^3\)</span>相对应。</p><p><strong>特殊欧氏群SE(3)</strong>亦称刚体运动群或齐次变换矩阵群，是所有4×4实矩阵T的集合。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131220066.png"alt="image-20220113122058967" /><figcaption aria-hidden="true">image-20220113122058967</figcaption></figure><h5 id="运动旋量">运动旋量</h5><p>将<spanclass="math inline">\(\omega_b、v_b\)</span>合在一起组成一个六维向量形式。为此定义为物体坐标系中的速度，简称为物体运动旋量。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131223399.png"alt="image-20220113122343318" /><figcaption aria-hidden="true">image-20220113122343318</figcaption></figure><p>如前所述，角速度可以很方便的写成反对称矩阵形式，同样，运动旋量也能写成矩阵形式。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131224771.png"alt="image-20220113122453691" /><figcaption aria-hidden="true">image-20220113122453691</figcaption></figure><p>同样，基于空间坐标系，写出<strong>空间运动旋量</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131225887.png"alt="image-20220113122557812" /><figcaption aria-hidden="true">image-20220113122557812</figcaption></figure><p><strong>物体运动旋量和空间运动旋量的关系</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131912510.png"alt="image-20220113191257419" /><figcaption aria-hidden="true">image-20220113191257419</figcaption></figure><h5 id="运动旋量的螺旋释义">运动旋量的螺旋释义</h5><p>运动旋量<span class="math inline">\(V\)</span>也可以写成螺旋轴<spanclass="math inline">\(S\)</span>与绕该轴转动的速度<spanclass="math inline">\(\dot\theta\)</span>组合形式</p><p><span class="math inline">\(S=(\omega,v)\)</span>的矩阵表达式为</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201131919608.png"alt="image-20220113191916493" /><figcaption aria-hidden="true">image-20220113191916493</figcaption></figure><h4 id="刚体运动的指数坐标表达">3.3刚体运动的指数坐标表达</h4><p>Chasles_Mozzi定理:任何刚体运动都可通过绕空间某—固定螺旋轴S的运动来实现。</p><p>类似转动情况，定义矩阵指数和矩阵对数</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132009805.png"alt="image-20220113200946730" /><figcaption aria-hidden="true">image-20220113200946730</figcaption></figure><p>将<strong>矩阵指数</strong>进行级数展开</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132010299.png"alt="image-20220113201053208" /><figcaption aria-hidden="true">image-20220113201053208</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132011775.png"alt="image-20220113201119701" /><figcaption aria-hidden="true">image-20220113201119701</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132011509.png"alt="image-20220113201152416" /><figcaption aria-hidden="true">image-20220113201152416</figcaption></figure><p><strong>矩阵对数</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132012511.png"alt="image-20220113201249415" /><figcaption aria-hidden="true">image-20220113201249415</figcaption></figure><h4 id="力旋量">3.4力旋量</h4><p>将力矩与力合成为—个六维的空间力（spatiallOrce）,称为力旋量（wrench）。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132014522.png"alt="image-20220113201406454" /><figcaption aria-hidden="true">image-20220113201406454</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132015219.png"alt="image-20220113201507129" /><figcaption aria-hidden="true">image-20220113201507129</figcaption></figure><h4 id="函数">3.5函数</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span>计算旋转矩阵的逆<br>invR = <span class="hljs-constructor">RotInv(R)</span><br><br><span class="hljs-number">2.</span>将三维向量转换为<span class="hljs-number">3</span>*<span class="hljs-number">3</span>反对称矩阵<br>so3mat = <span class="hljs-constructor">VecToso3(<span class="hljs-params">omg</span>)</span><br><br><span class="hljs-number">3.</span>将<span class="hljs-number">3</span>*<span class="hljs-number">3</span>反对称矩阵转换为三维向量<br>omg = so3<span class="hljs-constructor">ToVec(<span class="hljs-params">so3mat</span>)</span><br><br><span class="hljs-number">4.</span>从旋转的三维指数坐标中提取出轴线和角度<br><span class="hljs-literal">[<span class="hljs-identifier">omghat</span>,<span class="hljs-identifier">theta</span>]</span> = <span class="hljs-constructor">AxisAng3(<span class="hljs-params">expc3</span>)</span><br><br><span class="hljs-number">5.</span>计算矩阵指数对应的旋转矩阵<br>R = <span class="hljs-constructor">MatrixExp3(<span class="hljs-params">so3mat</span>)</span><br><br><span class="hljs-number">6.</span>计算旋转矩阵对应的矩阵对数<br>so3mat = <span class="hljs-constructor">MatrixLog3(R)</span><br><br><span class="hljs-number">7.</span>M到SO（<span class="hljs-number">3</span>）旋转矩阵的空间距离的度量<br>d = <span class="hljs-constructor">DistanceToSO3(<span class="hljs-params">mat</span>)</span><br><br><span class="hljs-number">8.</span>判断M是否为旋转矩阵<br>judge = <span class="hljs-constructor">TestIfSO3(<span class="hljs-params">mat</span>)</span><br><br><span class="hljs-number">9.</span>返回与M最近的旋转矩阵<br>R = <span class="hljs-constructor">ProjectToSO3(<span class="hljs-params">mat</span>)</span><br><br><span class="hljs-number">10.</span>将旋转矩阵和位置向量转换wei<br>T = <span class="hljs-constructor">RpToTrans(R,<span class="hljs-params">p</span>)</span><br><br><span class="hljs-number">11.</span>从变换矩阵中分离出旋转矩阵和位置向量<br><span class="hljs-literal">[R,<span class="hljs-identifier">p</span>]</span> = <span class="hljs-constructor">TransToRp(T)</span><br><br><span class="hljs-number">12.</span>变换矩阵求逆<br>invT = <span class="hljs-constructor">TransInv(T)</span><br><br><span class="hljs-number">13.</span>构造与六维向量形式的运动旋量V对应的<br>se3mat = <span class="hljs-constructor">VecTose3(V)</span><br><br><span class="hljs-number">14.</span>构造与se(<span class="hljs-number">3</span>)矩阵对应的六维向量形式的运动旋量V<br>V = se3<span class="hljs-constructor">ToVec(<span class="hljs-params">se3mat</span>)</span><br><br><span class="hljs-number">15.</span>计算变换矩阵T的<span class="hljs-number">6</span>*<span class="hljs-number">6</span>的伴随矩阵<br>AdT = <span class="hljs-constructor">Adjoint(T)</span><br><br><span class="hljs-number">16.</span>返回正则化的螺旋轴表达式<br>S = <span class="hljs-constructor">ScrewToAxis(<span class="hljs-params">q</span>,<span class="hljs-params">s</span>,<span class="hljs-params">h</span>)</span><br><br><span class="hljs-number">17.</span>从六位向量形式的指数坐标中提取出螺旋轴和沿轴线移动的距离<br><span class="hljs-literal">[S,<span class="hljs-identifier">theta</span>]</span> = <span class="hljs-constructor">AxisAng6(<span class="hljs-params">expc6</span>)</span><br><br><span class="hljs-number">18.</span>计算矩阵指数对应的变换矩阵<br>T = <span class="hljs-constructor">MatrixExp6(<span class="hljs-params">se3mat</span>)</span><br><br><span class="hljs-number">19.</span>计算变换矩阵对应的矩阵对数<br>se3mat = <span class="hljs-constructor">MatrixLog6(T)</span><br><br><span class="hljs-number">20.</span>M到变换矩阵的空间距离<br>d = <span class="hljs-constructor">DistanceToSE3(<span class="hljs-params">mat</span>)</span><br><br><span class="hljs-number">21.</span>判断是否为SE3变换矩阵<br>judge = <span class="hljs-constructor">TestIfSE3(<span class="hljs-params">mat</span>)</span><br><br><span class="hljs-number">22.</span>离M最近的变换矩阵<br>T = <span class="hljs-constructor">ProjectToSE3(<span class="hljs-params">mat</span>)</span><br></code></pre></td></tr></table></figure><h3 id="正向运动学">（4）正向运动学</h3><h4 id="指数积公式">4.1指数积公式</h4><p>现在假定关节<spanclass="math inline">\(n\)</span>对应的关节变量为<spanclass="math inline">\(\theta\)</span>末端坐标系<spanclass="math inline">\(M\)</span>的位移可写成</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132024851.png"alt="image-20220113202419767" /><figcaption aria-hidden="true">image-20220113202419767</figcaption></figure><p>式中，<span class="math inline">\(T \inSO(3)\)</span>为末端的新位形’，<spanclass="math inline">\(S=(\omega_n，v_n)\)</span>为表示在基坐标系中的关节<spanclass="math inline">\(n\)</span>的旋量坐标。若关节<spanclass="math inline">\(n\)</span>是转动副（对应的是零节距的螺旋运动），则叫<spanclass="math inline">\(\omega_n \inR^3\)</span>是沿关节轴正向的单位向量，<spanclass="math inline">\(v_n=-\omega_n\times q_n\)</span>，<spanclass="math inline">\(q_n\)</span>为关节轴上任一点，坐标值在基坐标系中进行度量。若关节<spanclass="math inline">\(n\)</span> 是移动副，则叫<spanclass="math inline">\(\omega_n=0 ，v_n\inR^3\)</span>是沿关节轴正向的单位向量，<spanclass="math inline">\(\theta_n\)</span>表示移动的距离。</p><p><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132057833.png" /></p><p>上述方程就是指数积公式的<strong>空间坐标表达形式</strong></p><p>同样也可以导出<strong>物体坐标系的指数积公式</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/13/202201132059436.png"alt="image-20220113205917313" /><figcaption aria-hidden="true">image-20220113205917313</figcaption></figure><h4 id="函数-1">4.2函数</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">末端坐标系下。给定初始形位，关节旋量以及关节值，计算末端坐标系<br>T = <span class="hljs-constructor">FKinBody(M,Blist,<span class="hljs-params">thetalist</span>)</span><br>空间坐标系下。给定初始形位，关节旋量以及关节值，计算末端坐标系<br>T = <span class="hljs-constructor">FKinSpace(M,Slist,<span class="hljs-params">thetalist</span>)</span><br></code></pre></td></tr></table></figure><h4 id="库卡kr60-3运动学建模">4.3库卡KR60-3运动学建模</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> modern_robotics <span class="hljs-keyword">as</span> mr<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><br><br>omega_1 = np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>])<br>omega_2=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br>omega_3=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br>omega_4=np.array([-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br>omega_5=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br>omega_6=np.array([-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br><br>q1=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br>q2=np.array([<span class="hljs-number">350</span>,<span class="hljs-number">0</span>,<span class="hljs-number">815</span>])<br>q3=np.array([<span class="hljs-number">1200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">815</span>])<br>q4=np.array([<span class="hljs-number">2020</span>,<span class="hljs-number">0</span>,<span class="hljs-number">960</span>])<br>q5=np.array([<span class="hljs-number">2020</span>,<span class="hljs-number">0</span>,<span class="hljs-number">960</span>])<br>q6=np.array([<span class="hljs-number">2020</span>,<span class="hljs-number">0</span>,<span class="hljs-number">960</span>])<br><br>M=np.array([[ <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,  <span class="hljs-number">2190</span>],<br>            [ <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>],<br>            [-<span class="hljs-number">1</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,   <span class="hljs-number">960</span>],<br>            [ <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,     <span class="hljs-number">1</span>]])<br><br><span class="hljs-comment"># thetalist = np.array([0,-pi/2,pi/2,0,0,0])</span><br>thetalist = np.array([-<span class="hljs-number">2.410000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">57.230000</span> / <span class="hljs-number">180</span> * pi, <span class="hljs-number">112.080000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">0.780000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">54.890000</span> / <span class="hljs-number">180</span> * pi,<br>     <span class="hljs-number">1.440000</span> / <span class="hljs-number">180</span> * pi])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vcaculate</span>(<span class="hljs-params">omega,q</span>):<br>    v=np.cross(-omega,q)<br>    <span class="hljs-keyword">return</span> v<br>v1=vcaculate(omega_1,q1)<br>v2=vcaculate(omega_2,q2)<br>v3=vcaculate(omega_3,q3)<br>v4=vcaculate(omega_4,q4)<br>v5=vcaculate(omega_5,q5)<br>v6=vcaculate(omega_6,q6)<br><br>s1=np.append(omega_1,v1)<br>s2=np.append(omega_2,v2)<br>s3=np.append(omega_3,v3)<br>s4=np.append(omega_4,v4)<br>s5=np.append(omega_5,v5)<br>s6=np.append(omega_6,v6)<br><br>Slist=np.array([s1,s2,s3,s4,s5,s6]).T<br><span class="hljs-comment"># print(M)</span><br><span class="hljs-comment"># print(v)</span><br><span class="hljs-comment"># print(thetalist)</span><br><br><br><br>T = mr.FKinSpace(M,Slist,thetalist)<br><span class="hljs-built_in">print</span>(T)<br></code></pre></td></tr></table></figure><h3 id="一阶运动学和静力学">（5）一阶运动学和静力学</h3><p>机器人正运动学可以写成 <span class="math display">\[x(t)=f(\theta(t))\]</span> 对上式关于时间t求导 <span class="math display">\[\dot{x}=\frac {\partial f(\theta) } {\partial \theta }\frac{d(\theta(t)) } {dt }=\frac{\partial f(\theta)} {\partial \theta} =J(\theta)\dot{\theta}\]</span></p><p>式中，<spanclass="math inline">\(J(\theta)\)</span>被称为雅可比，表示末端执行器速度相对关节速度的线性敏感度，时关于关节变量<spanclass="math inline">\(\theta\)</span>的函数。在某些形位上，雅可比矩阵会变成奇异阵，相应的形位被称为奇异形位，特征主要表现在机器人在末端的某些方向上的速度不能实现。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/11/202201121058202.png"alt="image-20220112105856088" /><figcaption aria-hidden="true">image-20220112105856088</figcaption></figure><p>雅可比矩阵可以用来将关节转速的边界映射到<spanclass="math inline">\(v_{tip}\)</span>的边界中，如图5.2所示。不是如图那样将关节速度通过雅可比矩阵映射成多边形，而是在<spanclass="math inline">\(\dot{\theta}_1-\dot{\theta}_2\)</span>平面内将关节速度映射成—个单位圆。这个圆表示关节速度空间的等廓线，其中驱动器的共同作用可考虑为关节速度的平方和。通过映射，单位圆映射成末端速度的—个椭球，这个椭球称为<strong>可操作度椭球</strong>。当操作手的位形接近奇异位形时，椭球将退化成一个线段，末端沿某方向运动的能力将会丧失。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/11/202201121059357.png"alt="image-20220112105936263" /><figcaption aria-hidden="true">image-20220112105936263</figcaption></figure><p>假设用于机器人运动的功忽略不计，机器人末端施加的功应与关节处产生的功相等，末端力向量记作<spanclass="math inline">\(f_{tip}\)</span>关节力矩向量记作<spanclass="math inline">\(\tau\)</span> 根据能量守恒定律可得</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121101165.png"alt="image-20220112110135107" /><figcaption aria-hidden="true">image-20220112110135107</figcaption></figure><p>由于<spanclass="math inline">\(v_{tip}=J(\theta)\dot{\theta}\)</span>，因此等式改写为</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121103149.png"alt="image-20220112110301093" /><figcaption aria-hidden="true">image-20220112110301093</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121103392.png"alt="image-20220112110319339" /><figcaption aria-hidden="true">image-20220112110319339</figcaption></figure><p>用于生成末端力<spanclass="math inline">\(f_{tip}\)</span>的关节力矩<spanclass="math inline">\(\tau\)</span>可以通过上式计算得到。如果机器人处于非奇异形位，雅可比矩阵及其转置矩阵可逆，可以写成</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121105901.png"alt="image-20220112110510849" /><figcaption aria-hidden="true">image-20220112110510849</figcaption></figure><p>同样，类似于可操作度椭球，可以通过雅可比矩阵的逆转置，将<spanclass="math inline">\(\tau_{1}-\tau_{2}\)</span>平面内的一个等廓单位圆映射成<spanclass="math inline">\(f_{1}-f_{2}\)</span>末端力平面的一个椭球，这个椭球被称为<strong>力椭球</strong>。表示生成不同方向力的难易程度。</p><p>由可操作度椭球和力椭球明显可以看出，若在某—方向上比较容易地产生末端速度，该方向产生力就变得比较困难，反之亦然，具体如图5.6所示。事实上，对于给定的机器人位形，可操作度椭球与力椭球的主轴方问完全重合，但力椭球的主轴长度与可操作度椭球的主轴长度正好相反</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121111698.png"alt="image-20220112111100587" /><figcaption aria-hidden="true">image-20220112111100587</figcaption></figure><h4 id="机器人雅可比">5.1机器人雅可比</h4><h5 id="空间雅可比">5.1.1空间雅可比</h5><p>考虑一个n杆的开链机器人，其正向运动学的指数积公式为</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121120401.png"alt="image-20220112112031348" /><figcaption aria-hidden="true">image-20220112112031348</figcaption></figure><p>空间速度<span class="math inline">\(V_S\)</span>可以写成<spanclass="math inline">\([V_S]=\dot{T}T^{-1}\)</span>，其中</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121123354.png"alt="image-20220112112305290" /><figcaption aria-hidden="true">image-20220112112305290</figcaption></figure><p>可计算得</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121123837.png"alt="image-20220112112349776" /><figcaption aria-hidden="true">image-20220112112349776</figcaption></figure><p>可通过伴随映射写成向量形式</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121125669.png"alt="image-20220112112525617" /><figcaption aria-hidden="true">image-20220112112525617</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121126434.png"alt="image-20220112112612377" /><figcaption aria-hidden="true">image-20220112112612377</figcaption></figure><p>矩阵<spanclass="math inline">\(J_S(\theta)\)</span>即为空间固定坐标形式下得雅可比矩阵，简称为<strong>空间雅可比</strong>。</p><p><span class="math inline">\(J_{si}(\theta)\)</span>得第i列为</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121131118.png"alt="image-20220112113104059" /><figcaption aria-hidden="true">image-20220112113104059</figcaption></figure><p>​ 第<span class="math inline">\(i\)</span>列的结构形式为<spanclass="math inline">\(J_{si}(\theta)=Ad_{T_{i-1}}(S_{i})\)</span>其中<spanclass="math inline">\(T_{i-1}=e^{[S_1\theta_1]}\cdotse^{[S_{i-1}\theta_{i-1}]}\)</span>。回顾<spanclass="math inline">\(S_i\)</span>为机器人处于零位时第i个关节相对固定坐标系的旋量坐标，因此<spanclass="math inline">\(Ad_{T_{i-1}}(S_{i})\)</span>为该机器人经历刚体位移<spanclass="math inline">\(T_{i-1}\)</span>之后的第i个关节相对固定坐标系的旋量坐标。物理上，这与前面的i-l个关节从零位到当前值theta1...theta_i-1时的旋量坐标是等效的。因此,<spanclass="math inline">\(J_{s}(\theta)\)</span>的第i列<spanclass="math inline">\(J_{si}(\theta)\)</span>只是描述第i个关节轴相对固定坐标系的旋量，同时也是关节变量theta1...theta_i-1的函数。不过是取任意的<spanclass="math inline">\(\theta\)</span>值而不是<spanclass="math inline">\(\theta\)</span>＝0。</p><h5 id="物体雅可比">5.1.2物体雅可比</h5><p>物体坐标系下，<spanclass="math inline">\([V_b]=T^{-1}\dot{T}\)</span>，正运动学公式为</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121526689.png"alt="image-20220112152636620" /><figcaption aria-hidden="true">image-20220112152636620</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121527403.png"alt="image-20220112152702328" /><figcaption aria-hidden="true">image-20220112152702328</figcaption></figure><p>由此计算可得</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121527124.png"alt="image-20220112152734065" /><figcaption aria-hidden="true">image-20220112152734065</figcaption></figure><p>以矩阵形式表示</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121528730.png"alt="image-20220112152800670" /><figcaption aria-hidden="true">image-20220112152800670</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121528944.png"alt="image-20220112152824883" /><figcaption aria-hidden="true">image-20220112152824883</figcaption></figure><p>矩阵<spanclass="math inline">\(J_{b}(\theta)\)</span>即为物体坐标系下得雅可比行列式，简称<strong>物体雅可比</strong></p><h5 id="几何解释">5.1.3几何解释</h5><h5id="空间雅可比和物体雅可比的关系">5.1.4空间雅可比和物体雅可比的关系</h5><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121550301.png"alt="image-20220112155025242" /><figcaption aria-hidden="true">image-20220112155025242</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121550487.png"alt="image-20220112155033433" /><figcaption aria-hidden="true">image-20220112155033433</figcaption></figure><h5id="几何雅可比和解析雅可比的关系">5.1.5几何雅可比和解析雅可比的关系</h5><h4 id="开链机器人静力学">5.2开链机器人静力学</h4><h4 id="奇异性分析">5.3奇异性分析</h4><p>​如在某个或者多个方向同时失去运动能力的位姿，我们称之为运动学奇异（kinematicsingularjty），或者简称为奇异（singularity）。数学上,奇异位姿意味着雅可比矩阵<spanclass="math inline">\(J(\theta)\)</span>不再满秩 。</p><p>​ 当<spanclass="math inline">\(J(\theta)\)</span>的阶数降到最大值以下，奇异位姿对应此时的<spanclass="math inline">\(\theta\)</span>。奇异位姿下末端坐标系丧失掉在某—维或多维方向的瞬时空间速度，这种奇异下损失的自由度同时伴随产生了与之对应方向上的约束力旋量。</p><ul><li>2个旋转轴共轴</li><li>3各平面转动副轴线平行</li><li>4各转动副轴线共点</li><li>4个转动副轴线共面</li><li>6个转动副都与一条线相交</li></ul><h4 id="可操作度">5.4 可操作度</h4><p>对于一个通用的″关节开链机器人，任务空间的坐标为q，可操作度椭球对应的是当关节速率满足<spanclass="math inline">\(|\dot{\theta}|=1\)</span>时末端执行器的速度。在n维关节速度空间内的一个单元球。假设<spanclass="math inline">\(J\)</span>可逆,单位关节速度条件数可以写成</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121606174.png"alt="image-20220112160630103" /><figcaption aria-hidden="true">image-20220112160630103</figcaption></figure><p>由线性代数可知，上式定义m维空间椭球。椭球主轴方向为<spanclass="math inline">\(v_i\)</span>，主轴半径长为<spanclass="math inline">\(\sqrt{\lambda_i}\)</span>。<strong>椭球的体积</strong>V与主轴半径长的乘积成正比。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121613793.png"alt="image-20220112161318734" /><figcaption aria-hidden="true">image-20220112161318734</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121614018.png"alt="image-20220112161412935" /><figcaption aria-hidden="true">image-20220112161412935</figcaption></figure><p>角速度与线速度的量纲不同，于是将雅可比矩阵分开。由此可以得到两个三维可操作度椭球:一个表示角速度,另—个表示线速度。这两个可操作度椭球都有与A的特征向量相对应的主轴，长度为其特征值的平方根。其中，对于角速度可操作度椭球<spanclass="math inline">\(J=J_\omegaJ_\omega^T\)</span>，对于线速度可操作度椭球,<spanclass="math inline">\(J=J_v J_v^T\)</span></p><p>当在计算线速度可操作度椭球时’使用<strong>物体雅可比<spanclass="math inline">\(J_b\)</span></strong>更合适些,因为我们<strong>通常对末端坐标系原点的速度更感兴趣</strong>而非固定坐标系原点的速度。</p><p>除了可操作度椭球的几何特征之外,还有一种方法是定义可操作度椭球的<strong>最长轴半径与最短轴半径的比值</strong></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121658649.png"alt="image-20220112165811585" /><figcaption aria-hidden="true">image-20220112165811585</figcaption></figure><p>当<spanclass="math inline">\(\mu_1(A)\)</span>接近1时,可操作度椭球接近球形或者各向同性。意味着该机器人沿任何方向都同样容易，这是理想情况。相反,当机器人接近奇异时<spanclass="math inline">\(\mu_1(A)\)</span>趋于无穷大 。</p><p>类似的，可以定义<span class="math inline">\(\mu_2(A)\)</span>为<spanclass="math inline">\(\mu_1(A)\)</span>的平方，又称为矩阵A的<strong>条件数</strong>，该值越小越理想。矩阵的条件数普遍用于衡量矩阵与向量相乘后的敏感度误差减少的程度。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121701971.png"alt="image-20220112170104912" /><figcaption aria-hidden="true">image-20220112170104912</figcaption></figure><p>最后一种度量方法是简单利用<strong>可操作度椭球的体积</strong>，这种情况是越大越好。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121702087.png"alt="image-20220112170213023" /><figcaption aria-hidden="true">image-20220112170213023</figcaption></figure><p>与可操作度椭球类似，可以定义<strong>力椭球</strong>。由单位关节力矩满足<span class="math inline">\(||{\tau}||=1\)</span>，得到与上述类似的结果</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201121705838.png"alt="image-20220112170545776" /><figcaption aria-hidden="true">image-20220112170545776</figcaption></figure><p>因此，力椭球的主轴长度为可操作椭球长度的倒数。</p><h4 id="软件函数">5.5软件函数</h4><p>给定物体坐标系下描述的各关节旋量<spanclass="math inline">\(B_i\)</span>及关节角，计算物体雅可比<spanclass="math inline">\(J_B(\theta)\)</span></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Jb</span>=JacobianBody(Blist,thetalist)<br></code></pre></td></tr></table></figure><p>给定物体坐标系下描述的各关节旋量$ S_i<spanclass="math inline">\(及关节角，计算物体雅可比\)</span>J_S()$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">J=JacobianBody(Slist,thetalist)<br></code></pre></td></tr></table></figure><h3 id="逆运动学">（6）逆运动学</h3><h4 id="解析解">6.1解析解</h4><h5 id="几何法">6.1.1几何法</h5><h4 id="section"></h4><p>1.求解<span class="math inline">\(\theta_1 、\theta_2、\theta_3\)</span> <span class="math display">\[g_s(\theta)=e^{[S_1]\theta_1}\cdots e^{[S_{6}]\theta_{6}}M\]</span> 右乘初始位姿<spanclass="math inline">\(M\)</span>的逆矩阵，设<spanclass="math inline">\(g_s(\theta)*M^{-1}=g\)</span>，得到 <spanclass="math display">\[g=e^{[S_1]\theta_1}\cdots e^{[S_{6}]\theta_{6}}\]</span> 根据螺旋理论，位于螺旋轴上的<spanclass="math inline">\(q\)</span>点，无论旋转多少角度，<spanclass="math inline">\(q\)</span>点的位置保持不变，即 <spanclass="math display">\[e^{[S]\theta}*q=q\]</span> 因此将上式右乘关节4、5、6的共同交点<spanclass="math inline">\(q_6\)</span>，得 <span class="math display">\[g*q_6=e^{[S_1]\theta_1}\cdots e^{[S_{3}]\theta_{3}}*q_6=(A,B,C,1)\]</span> <imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122127723.png"alt="image-20220112212739637" /></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122129863.png"alt="image-20220112212908790" /><figcaption aria-hidden="true">image-20220112212908790</figcaption></figure><p>可知kukakr60后三轴相交于一点，符合pieper准则，具有封闭解。可知(A,B,C)为机器人相应姿态下的腕部中心坐标p，即4，5，6关节的共同交点。所以，前三轴决定机器人腕部中心的位置，后三轴决定机器人腕部中心的姿态。<span class="math display">\[q6 =[2020, 0, 960,1]\]</span> 首先，使用几何法求解前三个关节。</p><p>通常情况下，库卡机器人前三轴具有四组逆运动学逆解，分别如图所示，左图对应的是左向位置（肘部向上和向下）,右图对应的是右向位置（肘部向上和向下）</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051854731.png"alt="image-20220305185457224" /><figcaption aria-hidden="true">image-20220305185457224</figcaption></figure><p>对于关节1，运动学逆解有两个，如图所示。</p><p><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051856658.jpg"alt="img" /> <span class="math display">\[\theta_{11} = atan2d(-py,px)；\theta_{12} = atan2d(-py,px) + 180\]</span> 对于关节2和3有两组解</p><p>情况一、</p><p><img src="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051901311.jpg" alt="img" style="zoom:67%;" /></p><figure><imgsrc="file:///E:\qq记录\760088941\Image\C2C\E9B35D92825145DD7A275F895DBD70F0.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>情况二、</p><figure><imgsrc="file:///E:\qq记录\760088941\Image\C2C\970C64AC3887162C3074A0375214A803.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051903391.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>由此，机器人前三关节的四组逆解就可以求出来了。</p><p>接下来使用POE正运动学公式，求出后三个关节的运动学逆解。</p><p>将机器人运动学模型式两边同右乘初始位姿，可得</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051906784.png"alt="image-20220305190640702" /><figcaption aria-hidden="true">image-20220305190640702</figcaption></figure><p>根据螺旋理论，位于转轴上的 q 点，无论旋转多少角度，q点的位置保持不变，即</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051907522.png"alt="image-20220305190718446" /><figcaption aria-hidden="true">image-20220305190718446</figcaption></figure><p>因此将式（22）两边同时右乘关节 4、5、6 的共同 交点 q6，得</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051908182.png"alt="image-20220305190804100" /><figcaption aria-hidden="true">image-20220305190804100</figcaption></figure><p>点P的坐标(A,B,C)即机器人腕部中心在相应姿态下的坐标，求出前三轴坐标后，带入公式</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051911006.png"alt="image-20220305191108924" /><figcaption aria-hidden="true">image-20220305191108924</figcaption></figure><p>然后在转轴 ω6 上取一点 <span class="math inline">\(p_6 =[0;0;960;1]\)</span>，并且该点不在 ω4、ω5 上， 于是得</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051911170.png"alt="image-20220305191147083" /><figcaption aria-hidden="true">image-20220305191147083</figcaption></figure><p>由POE正运动学公式可得</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051912112.png"alt="image-20220305191258029" /><figcaption aria-hidden="true">image-20220305191258029</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051913317.png"alt="image-20220305191307219" /><figcaption aria-hidden="true">image-20220305191307219</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051913130.png"alt="image-20220305191319051" /><figcaption aria-hidden="true">image-20220305191319051</figcaption></figure><p>T4*T5为</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051915325.png"alt="image-20220305191531245" /><figcaption aria-hidden="true">image-20220305191531245</figcaption></figure><p>T4XT5XP6为</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051920132.png"alt="image-20220305192042032" /><figcaption aria-hidden="true">image-20220305192042032</figcaption></figure><p>等式两边一一而对应，即可求出<spanclass="math display">\[\theta_4,\theta_5\]</span></p><p>求得 θ4、θ5。又将 θ4、θ5代入正运动学公式并整理得</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051924463.png"alt="image-20220305192405383" /><figcaption aria-hidden="true">image-20220305192405383</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203051924930.png"alt="image-20220305192435842" /><figcaption aria-hidden="true">image-20220305192435842</figcaption></figure><p><spanclass="math inline">\(利用等式两边一一对应即可求出\theta_6\)</span></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;clear;<br>X=[     <span class="hljs-number">0.995869</span>,    <span class="hljs-number">-0.025686</span>,    <span class="hljs-number">-0.087090</span>,  <span class="hljs-number">1480.441492</span> ;<br>      <span class="hljs-number">0.024499</span>,     <span class="hljs-number">0.999592</span>,    <span class="hljs-number">-0.014667</span>,    <span class="hljs-number">60.437411</span> ;<br>      <span class="hljs-number">0.087431</span>,     <span class="hljs-number">0.012473</span>,     <span class="hljs-number">0.996092</span>,  <span class="hljs-number">2212.432130</span> ;<br>      <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span> ];<br><br><br><span class="hljs-comment">% X=[    -0.000000,    -0.000000,     1.000000,  1340.000000 ;</span><br><span class="hljs-comment">%      -0.000000,     1.000000,     0.000000,    -0.000000 ;</span><br><span class="hljs-comment">%      -1.000000,    -0.000000,    -0.000000,  1810.000000 ;</span><br><span class="hljs-comment">%       0.000000,     0.000000,     0.000000,     1.000000 ];</span><br><br>M=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2190</span>;<br>   <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>  <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">960</span>;<br>   <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>   ]<br><br><span class="hljs-comment">%前三轴旋转轴</span><br>s1=[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]<br>s2=[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-815</span>;<span class="hljs-number">0</span>;<span class="hljs-number">350</span>]<br>s3=[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-815</span>;<span class="hljs-number">0</span>;<span class="hljs-number">1200</span>]<br>s4=[<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-960</span>;<span class="hljs-number">0</span>]<br>s5=[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-960</span>;<span class="hljs-number">0</span>;<span class="hljs-number">2020</span>]<br>s6=[<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-960</span>;<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">%轴上任意一点</span><br>q1 = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]&#x27;<br>q2 = [<span class="hljs-number">350</span>, <span class="hljs-number">0</span>, <span class="hljs-number">815</span>]&#x27;<br>q3 =[<span class="hljs-number">1200</span>, <span class="hljs-number">0</span>, <span class="hljs-number">815</span>]&#x27;<br>q4 = [<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">960</span>]&#x27;<br>q5 = [<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">960</span>]&#x27;<br>q6 =[<span class="hljs-number">2020</span>, <span class="hljs-number">0</span>, <span class="hljs-number">960</span>]&#x27;<br>q6_1 = [q6;<span class="hljs-number">1</span>]<br>p = X  / M  *[q6;<span class="hljs-number">1</span>]<br>px =p(<span class="hljs-number">1</span>)<br>py =p(<span class="hljs-number">2</span>)<br>pz =p(<span class="hljs-number">3</span>)<br><span class="hljs-comment">% px=1399.48736528</span><br><span class="hljs-comment">% py=58.90058846400001</span><br><span class="hljs-comment">% pz=942.73081665274</span><br><span class="hljs-comment">% px=1528.692;</span><br><span class="hljs-comment">% py=133.743;</span><br><span class="hljs-comment">% pz=931.186;</span><br>o2a=<span class="hljs-number">850</span>;<br>ab=<span class="hljs-number">145</span>;<br>bp=<span class="hljs-number">820</span>;<br><br><br>theta1_1 = atan2d(-py,px)<br>theta1_2 = atan2d(-py,px) + <span class="hljs-number">180</span><br><br>ap=<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">145</span>^<span class="hljs-number">2</span>+<span class="hljs-number">820</span>^<span class="hljs-number">2</span>);<br>o2w=<span class="hljs-built_in">sqrt</span>(px^<span class="hljs-number">2</span>+py^<span class="hljs-number">2</span>)<span class="hljs-number">-350</span>;<br>pw=pz<span class="hljs-number">-815</span>;<br>o2p=<span class="hljs-built_in">sqrt</span>(o2w^<span class="hljs-number">2</span>+pw^<span class="hljs-number">2</span>);<br>angle_ao2p=<span class="hljs-built_in">acosd</span>((o2a^<span class="hljs-number">2</span>+o2p^<span class="hljs-number">2</span>-ap^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*o2a*o2p));<br>angle_po2w=<span class="hljs-built_in">acosd</span>((o2p^<span class="hljs-number">2</span>+o2w^<span class="hljs-number">2</span>-pw^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*o2p*o2w));<br>theta2_1=-(angle_ao2p+angle_po2w)<br><br>angle_PO2W = <span class="hljs-built_in">acosd</span>((o2p^<span class="hljs-number">2</span>+o2w^<span class="hljs-number">2</span>-pw^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*o2p*o2w));<br>angle_PO2A = <span class="hljs-built_in">acosd</span>((o2p^<span class="hljs-number">2</span>+o2a^<span class="hljs-number">2</span>-ap^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*o2p*o2a));<br>theta2_2 = angle_PO2A - angle_PO2W<br><br><span class="hljs-comment">%</span><br>angle_bap = atan2d(bp,ab);<br>angle_o2ap=<span class="hljs-built_in">acosd</span>((o2a^<span class="hljs-number">2</span>+ap^<span class="hljs-number">2</span>-o2p^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*o2a*ap));<br>theta3_1 = <span class="hljs-number">270</span>- angle_bap-angle_o2ap<br><br><br>o2c = o2w/<span class="hljs-built_in">cosd</span>(-theta2_2);<br>wc = o2w*<span class="hljs-built_in">tand</span>(-theta2_2);<br>ac=o2c-o2a;<br>pc = pw-wc;<br>pw;<br>ap;<br><br>angle_PAC = <span class="hljs-built_in">acosd</span>((ap^<span class="hljs-number">2</span>+ac^<span class="hljs-number">2</span>-pc^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*ap*ac));<br>angle_BAP = atan2d(bp,ab);<br>theta3_2 = <span class="hljs-number">90</span>-(angle_PAC + angle_BAP)<br><br><span class="hljs-comment">%后三轴计算</span><br><br><br><span class="hljs-comment">% theta4=-0.78</span><br><span class="hljs-comment">% theta5=-54.89</span><br><span class="hljs-comment">% theta6=1.44</span><br><br>T1=trans(s1,theta1_1)<br>T2=trans(s2,theta2_1)<br>T3=trans(s3,theta3_1)<br><span class="hljs-comment">% T4=trans(s4,theta4)</span><br><span class="hljs-comment">% T5=trans(s5,theta5)</span><br><span class="hljs-comment">% T6=trans(s6,theta6)</span><br><br>T_0 = inv(T3)*inv(T2)*inv(T1)*X*inv(M)*[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>;<span class="hljs-number">1</span>]<br>costheta5 = <span class="hljs-number">1</span>-T_0(<span class="hljs-number">1</span>)/<span class="hljs-number">2020</span><br>theta5=atan2d(-<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-costheta5^<span class="hljs-number">2</span>),costheta5)<br>T5=trans(s5,theta5)<br><br>costheta4 = (T_0(<span class="hljs-number">3</span>) - <span class="hljs-number">960</span>)/(<span class="hljs-number">2020</span>*<span class="hljs-built_in">sind</span>(theta5))<br>theta4=atan2d(-<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-costheta4^<span class="hljs-number">2</span>),costheta4)<br>T4=trans(s4,theta4)<br><br>T_1 = inv(T5)*inv(T4)*inv(T3)*inv(T2)*inv(T1)*X*inv(M)<br>theta6=<span class="hljs-built_in">acosd</span>(T_1(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">T</span>=<span class="hljs-title">trans</span><span class="hljs-params">(s,theta)</span></span><br>    se3mat = VecTose3(s);<br>    theta = theta /180 * <span class="hljs-built_in">pi</span>;<br>    se3mat = se3mat * theta;<br>    T = MatrixExp6(se3mat);<br><span class="hljs-keyword">end</span><br><br><br></code></pre></td></tr></table></figure><h5 id="pk子问题解法">6.1.2 pk子问题解法</h5><p>求解分为两部，第一部分求解前三轴关节角，第二部分求解后三轴关节角。</p><p>为了便于求解后三轴关节角，将机器人初始位姿定位[0,0,0,0,90,0],即第五轴旋转90度，使后三轴交于一点的同时互相正交。同时求解出来的关节角结果的第五轴需要加上90度。</p><p>第五轴90度旋转后的初始形位为</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">M=[    -<span class="hljs-number">1.000000</span>,    -<span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,  <span class="hljs-number">2020</span>.<span class="hljs-number">000000</span> <span class="hljs-comment">;</span><br>     -<span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span> <span class="hljs-comment">;</span><br>     -<span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,    -<span class="hljs-number">1.000000</span>,   <span class="hljs-number">790</span>.<span class="hljs-number">000000</span> <span class="hljs-comment">;</span><br>      <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span> ]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101315105.png"alt="image-20220310131507999" /><figcaption aria-hidden="true">image-20220310131507999</figcaption></figure><h6 id="前三轴">前三轴</h6><p>因为前三轴并不相交，所以只能把前三轴分解为三个子问题1进行求解。</p><p><strong>图中坐标系情况与实际情况不同</strong></p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101239978.png"alt="image-20220310123952833" /><figcaption aria-hidden="true">image-20220310123952833</figcaption></figure><p>​p1为腕部中心坐标，正运动学公式两边同时乘以初始形位下机器人腕部中心坐标r4=[2020;0;960]，可以求解出来目标形位下腕部中心坐标为p1=（px,py,pz）</p><p>​从图中可以看出o1（不一定是o点）与p1共面，同时，o1位于关节轴1上，所以o1的坐标为o1=[0;0;pz]；</p><p>​ p2也与p1共面，也与o2共面，由|p1o1| = |p2o2|，即可求解出<spanclass="math inline">\(p_2=[(-)\sqrt{(px^2+py^2)},0,pz]\)</span>,p2有两种情况。</p><p>​ <spanclass="math inline">\(o_2=[350;0;815],o_3=[1200;0;815]\)</span>，<spanclass="math inline">\(由|r_4o_3|=|p_3o_3|,|p_2o_2|=|p_3o_2|\)</span>，可以求出p3点的坐标。</p><p>​ 将前三关节角分解为三个子问题1，前三个关节螺旋运动表示为</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101301144.png"alt="image-20220310130135051" /><figcaption aria-hidden="true">image-20220310130135051</figcaption></figure><p>​ <strong>pk子问题1</strong>如图所示</p><figure><imgsrc="%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%BF%90%E5%8A%A8%E5%AD%A6%E7%AC%94%E8%AE%B0/202203101303943.png"alt="image-20220310130306836" /><figcaption aria-hidden="true">image-20220310130306836</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101303570.png"alt="image-20220310130357483" /><figcaption aria-hidden="true">image-20220310130357483</figcaption></figure><p>等价于</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101304060.png"alt="image-20220310130408968" /><figcaption aria-hidden="true">image-20220310130408968</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101304772.png"alt="image-20220310130430678" /><figcaption aria-hidden="true">image-20220310130430678</figcaption></figure><p>关节角<span class="math inline">\(\theta\)</span>可以由公式求出</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101305846.png"alt="image-20220310130531750" /><figcaption aria-hidden="true">image-20220310130531750</figcaption></figure><p>由此，前三个关节角即可求出。</p><blockquote><p>注意：有些形位p3点的坐标求出来是虚数，即第二轴求解可能会有无解的情况，虽然理论上机器人前三轴有4组解，但是有些位置关节角可能无法达到，可能不足4组解。在程序中，遇到p3坐标为虚数的情况就跳出此次循环，进入下一循环。</p></blockquote><h6 id="后三轴">后三轴</h6><p>在公式中将求解的前三个关节角右移</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101316676.png"alt="image-20220310131653586" /><figcaption aria-hidden="true">image-20220310131653586</figcaption></figure><p>乘以一个在轴6上但不在45轴上的点p=[2020;0;0;1]。可以消去第六轴的旋转。</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101322146.png"alt="image-20220310132230969" /><figcaption aria-hidden="true">image-20220310132230969</figcaption></figure><p>因为4，5轴交于一点r4，即可使用PK子问题2对关节45进行求解。</p><p><strong>pk子问题2</strong></p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101324623.png"alt="image-20220310132449524" /><figcaption aria-hidden="true">image-20220310132449524</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101325327.png"alt="image-20220310132531218" /><figcaption aria-hidden="true">image-20220310132531218</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101325885.png"alt="image-20220310132543800" /><figcaption aria-hidden="true">image-20220310132543800</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101326703.png"alt="image-20220310132600617" /><figcaption aria-hidden="true">image-20220310132600617</figcaption></figure><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101326825.png"alt="image-20220310132609735" /><figcaption aria-hidden="true">image-20220310132609735</figcaption></figure><p>令z为</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101326770.png"alt="image-20220310132634685" /><figcaption aria-hidden="true">image-20220310132634685</figcaption></figure><p>则</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101326595.png"alt="image-20220310132646514" /><figcaption aria-hidden="true">image-20220310132646514</figcaption></figure><p><span class="math inline">\(\alpha 和\beta即可通过公式求出\)</span></p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101327532.png"alt="image-20220310132731429" /><figcaption aria-hidden="true">image-20220310132731429</figcaption></figure><p>同时<span class="math inline">\(\gamma有两组解\)</span>，对应于后三轴有两组解的情况</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101328535.png"alt="image-20220310132855436" /><figcaption aria-hidden="true">image-20220310132855436</figcaption></figure><p>求出z后，子问题2就转换为两个子问题1，可以使用子问题一进行求解。</p><p>求解出关节45后，带入公式，两端乘以不在轴6上的一点p7=[2021;0;0]</p><figure><imgsrc="file:///F:\SynologyDrive\nas_cloud\机器人\记录\imagebed-master\images\202203101331662.png"alt="image-20220310133139562" /><figcaption aria-hidden="true">image-20220310133139562</figcaption></figure><p>同样使用子问题1进行求解出关节6</p><p>求解完所有的关节后，将<strong>关节五加上90度</strong>，即为实际情况的关节角。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;clear;<br><span class="hljs-comment">%目标形位</span><br>X=[     <span class="hljs-number">0.829242</span>,    <span class="hljs-number">-0.423859</span>,     <span class="hljs-number">0.364283</span>,   <span class="hljs-number">546.623076</span> ;<br>      <span class="hljs-number">0.407748</span>,     <span class="hljs-number">0.904588</span>,     <span class="hljs-number">0.124342</span>,   <span class="hljs-number">282.228651</span> ;<br>     <span class="hljs-number">-0.382230</span>,     <span class="hljs-number">0.045426</span>,     <span class="hljs-number">0.922950</span>,  <span class="hljs-number">1798.527619</span> ;<br>      <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span> ];<br><br><span class="hljs-comment">% X=[    -0.000000,    -0.000000,     1.000000,  1340.000000 ;</span><br><span class="hljs-comment">%      -0.000000,     1.000000,     0.000000,    -0.000000 ;</span><br><span class="hljs-comment">%      -1.000000,    -0.000000,    -0.000000,  1810.000000 ;</span><br><span class="hljs-comment">%       0.000000,     0.000000,     0.000000,     1.000000 ];</span><br><br><span class="hljs-comment">% M=[0, 0, 1, 2190;</span><br><span class="hljs-comment">%    0, 1, 0, 0;</span><br><span class="hljs-comment">%   -1, 0, 0, 960;</span><br><span class="hljs-comment">%    0, 0, 0, 1   ]</span><br><span class="hljs-comment">%初始形位，不是所有的关节为零，第五关节旋转90°，在最后计算角度时，第五轴应减去90°</span><br>M=[    <span class="hljs-number">-1.000000</span>,    <span class="hljs-number">-0.000000</span>,     <span class="hljs-number">0.000000</span>,  <span class="hljs-number">2020.000000</span> ;<br>     <span class="hljs-number">-0.000000</span>,     <span class="hljs-number">1.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span> ;<br>     <span class="hljs-number">-0.000000</span>,     <span class="hljs-number">0.000000</span>,    <span class="hljs-number">-1.000000</span>,   <span class="hljs-number">790.000000</span> ;<br>      <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">0.000000</span>,     <span class="hljs-number">1.000000</span> ];<br><br><span class="hljs-comment">%前三轴旋转轴</span><br>s(<span class="hljs-number">1</span>)=&#123;[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]&#125;<br>s(<span class="hljs-number">2</span>)=&#123;[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-815</span>;<span class="hljs-number">0</span>;<span class="hljs-number">350</span>]&#125;<br>s(<span class="hljs-number">3</span>)=&#123;[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-815</span>;<span class="hljs-number">0</span>;<span class="hljs-number">1200</span>]&#125;<br>s(<span class="hljs-number">4</span>)=&#123;[<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-960</span>;<span class="hljs-number">0</span>]&#125;<br>s(<span class="hljs-number">5</span>)=&#123;[<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-960</span>;<span class="hljs-number">0</span>;<span class="hljs-number">2020</span>]&#125;<br><br>w1 = [<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">-1</span>]<br>w2 = [<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>]<br>w3 = [<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>]<br>w4 = [<span class="hljs-number">-1</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]<br>w5 = [<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;<span class="hljs-number">0</span>]<br><span class="hljs-comment">%旋转90后</span><br>w6 = [<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">1</span>]<br><span class="hljs-comment">%轴上任意一点</span><br>q(<span class="hljs-number">1</span>) = &#123;[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]&#125;<br>q(<span class="hljs-number">2</span>) = &#123;[<span class="hljs-number">350</span>;<span class="hljs-number">0</span>;<span class="hljs-number">815</span>]&#125;<br>q(<span class="hljs-number">3</span>) =&#123;[<span class="hljs-number">1200</span>;<span class="hljs-number">0</span>;<span class="hljs-number">815</span>]&#125;<br>q(<span class="hljs-number">4</span>) = &#123;[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>]&#125;<br>q(<span class="hljs-number">5</span>) = &#123;[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>]&#125;<br>q(<span class="hljs-number">6</span>) =&#123;[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>]&#125;<br><span class="hljs-comment">%腕部中心</span><br>q6_1 = [q&#123;<span class="hljs-number">6</span>&#125;;<span class="hljs-number">1</span>]<br>p0 = X  / M  *q6_1<br>px =p0(<span class="hljs-number">1</span>)<br>py =p0(<span class="hljs-number">2</span>)<br>pz =p0(<span class="hljs-number">3</span>)<br><span class="hljs-comment">%前三轴计算</span><br>o1=[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;pz]<br>o2=[<span class="hljs-number">350</span>;<span class="hljs-number">0</span>;<span class="hljs-number">815</span>]<br>o3=[<span class="hljs-number">1200</span>;<span class="hljs-number">0</span>;<span class="hljs-number">815</span>]<br>r4 = [<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>]<br>p1=[px;py;pz]<br>p1o1=o1 - p1<br>r4o3=o3-r4<br>anglenum=<span class="hljs-number">0</span>  <span class="hljs-comment">%关节角组数</span><br><span class="hljs-keyword">for</span> p2num = <span class="hljs-number">1</span>:<span class="hljs-number">2</span><br>    <span class="hljs-comment">%前三轴可分解为三个pk子问题1进行计算</span><br>    <span class="hljs-comment">%两种p2情况</span><br>    p2(p2num) = &#123;[(<span class="hljs-number">-1</span>)^(p2num+<span class="hljs-number">1</span>)*<span class="hljs-built_in">sqrt</span>(px^<span class="hljs-number">2</span>+py^<span class="hljs-number">2</span>);<span class="hljs-number">0</span>;pz]&#125;<br>    p2o1(p2num)=&#123;o1 - p2&#123;p2num&#125;&#125;<br>    p2o2(p2num)=&#123;o2 - p2&#123;p2num&#125;&#125;<br>     <span class="hljs-comment">%关节1</span><br>    theta1(p2num) = atan2d(w1&#x27; * (<span class="hljs-built_in">cross</span>(p2o1&#123;p2num&#125;,p1o1)), p2o1&#123;p2num&#125;&#x27;*p1o1)<br>    x(p2num)=( norm(r4o3)^<span class="hljs-number">2</span>-norm(p2o2&#123;p2num&#125;)^<span class="hljs-number">2</span><span class="hljs-number">-1200</span>^<span class="hljs-number">2</span>+<span class="hljs-number">350</span>^<span class="hljs-number">2</span> ) /(<span class="hljs-number">-1700</span>)<br>    <br>    <span class="hljs-comment">%每个p2对应两个p3</span><br>    <span class="hljs-keyword">for</span> p3num = (<span class="hljs-number">2</span>*p2num<span class="hljs-number">-1</span>):(<span class="hljs-number">2</span>*p2num)<br>        <span class="hljs-comment">%若求解出来的是虚数，说明这组关节角无解，跳出此次循环，进行下一组关节角计算</span><br>        <span class="hljs-keyword">if</span> ~<span class="hljs-built_in">isreal</span>(<span class="hljs-built_in">sqrt</span>( <span class="hljs-number">820</span>^<span class="hljs-number">2</span>+<span class="hljs-number">145</span>^<span class="hljs-number">2</span>-(x(p2num)<span class="hljs-number">-1200</span>)^<span class="hljs-number">2</span> ))<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">end</span><br>        z(p3num) = <span class="hljs-number">815</span> + (<span class="hljs-number">-1</span>)^(p3num+<span class="hljs-number">1</span>)*<span class="hljs-built_in">sqrt</span>( <span class="hljs-number">820</span>^<span class="hljs-number">2</span>+<span class="hljs-number">145</span>^<span class="hljs-number">2</span>-(x(p2num)<span class="hljs-number">-1200</span>)^<span class="hljs-number">2</span> )<br>        <span class="hljs-comment">%求出p3点</span><br>        p3(p3num)=&#123;[x(p2num);<span class="hljs-number">0</span>;z(p3num)]&#125;<br>        p3o2(p3num) =&#123;o2 - p3&#123;p3num&#125;&#125;<br>        p3o3(p3num) = &#123;o3 - p3&#123;p3num&#125;&#125;<br>        <span class="hljs-comment">%关节2</span><br>        theta2(p3num) = atan2d(w2&#x27; * (<span class="hljs-built_in">cross</span>(p3o2&#123;p3num&#125;,p2o2&#123;p2num&#125;)), <span class="hljs-built_in">dot</span>(p3o2&#123;p3num&#125;,p2o2&#123;p2num&#125;)) <br>        <span class="hljs-comment">%关节3</span><br>        theta3(p3num) = atan2d(w3&#x27; * (<span class="hljs-built_in">cross</span>(r4o3,p3o3&#123;p3num&#125;)), <span class="hljs-built_in">dot</span>(r4o3,p3o3&#123;p3num&#125;))<br>        <br>        <span class="hljs-comment">%求后三轴</span><br>        T1=trans(s&#123;<span class="hljs-number">1</span>&#125;,theta1(p2num))<br>        T2=trans(s&#123;<span class="hljs-number">2</span>&#125;,theta2(p3num))<br>        T3=trans(s&#123;<span class="hljs-number">3</span>&#125;,theta3(p3num))<br>        <span class="hljs-comment">%将后三轴分解为一个pk子问题2和一个pk子问题1</span><br>        <span class="hljs-comment">%首先求解一个子问题2</span><br>        <span class="hljs-comment">%乘以在6轴上但是不在45轴上的一点</span><br>        T_0 = inv(T3)*inv(T2)*inv(T1)*X*inv(M)*[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">1</span>]<br>        q = T_0(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br>        p=[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]<br>        r=[<span class="hljs-number">2020</span>;<span class="hljs-number">0</span>;<span class="hljs-number">960</span>]<br>        u=p-r<br>        v=q-r<br>        u50 = u - w5*w5&#x27;*u<br>        v40=v-w4*w4&#x27;*v<br>        alpha = ((w4&#x27;*w5)*w5&#x27;*u - w4&#x27;*v)/( (w4&#x27;*w5)^<span class="hljs-number">2</span> - <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">beta</span> = ((w4&#x27;*w5)*w4&#x27;*v - w5&#x27;*u)/( (w4&#x27;*w5)^<span class="hljs-number">2</span> - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> znum = <span class="hljs-number">1</span>:<span class="hljs-number">2</span><br>            <span class="hljs-comment">%gama有两个解，所以z点也有两个解</span><br>            gama(znum)=(<span class="hljs-number">-1</span>)^(znum+<span class="hljs-number">1</span>)*<span class="hljs-built_in">sqrt</span>(( (norm(u))^<span class="hljs-number">2</span> - alpha^<span class="hljs-number">2</span> - <span class="hljs-built_in">beta</span>^<span class="hljs-number">2</span> <span class="hljs-number">-2</span>*alpha*<span class="hljs-built_in">beta</span>*w4&#x27;*w5 )/( norm(<span class="hljs-built_in">cross</span>(w4,w5)) )^<span class="hljs-number">2</span>)<br>            z1(znum)= &#123;alpha * w4 + <span class="hljs-built_in">beta</span> * w5 + gama(znum) * (<span class="hljs-built_in">cross</span>(w4,w5))&#125;<br>            z0(znum) = &#123;z1&#123;znum&#125; - w5*w5&#x27;*z1&#123;znum&#125;&#125;<br>            <span class="hljs-comment">%第五轴</span><br>            theta5(znum) = atan2d(w5&#x27; * (<span class="hljs-built_in">cross</span>(u50,z0&#123;znum&#125; )), <span class="hljs-built_in">dot</span>(u50,z0&#123;znum&#125;))<br>            <span class="hljs-comment">%计算第六轴</span><br>            z2(znum) = &#123;z1&#123;znum&#125; - w4*w4&#x27;*z1&#123;znum&#125;&#125;<br>            theta4(znum) = atan2d(w4&#x27; * (<span class="hljs-built_in">cross</span>(z2&#123;znum&#125;,v40 )), <span class="hljs-built_in">dot</span>(z2&#123;znum&#125;,v40))<br>            <br>            <span class="hljs-comment">%乘以不在6轴上的一点，利用子问题1求解关节6</span><br>            T4=trans(s&#123;<span class="hljs-number">4</span>&#125;,theta4(znum))<br>            T5=trans(s&#123;<span class="hljs-number">5</span>&#125;,theta5(znum))<br>            T_1 = inv(T5)*inv(T4)*inv(T3)*inv(T2)*inv(T1)*X*inv(M)*[<span class="hljs-number">2021</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>;<span class="hljs-number">1</span>]<br>            q7 = T_1(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br>            p7=[<span class="hljs-number">2021</span>;<span class="hljs-number">0</span>;<span class="hljs-number">0</span>]<br>            u6=r-p7<br>            v6=r-q7<br>            u60 = u6 - w6*w6&#x27;*u6<br>            v60 = v6 - w6*w6&#x27;*v6<br>            theta6(znum) = atan2d(w6&#x27; * (<span class="hljs-built_in">cross</span>(u60,v60)), <span class="hljs-built_in">dot</span>(u60,v60))<br>            anglenum= anglenum+<span class="hljs-number">1</span>;<br>            thetalist(anglenum)=&#123;[theta1(p2num),theta2(p3num),theta3(p3num),theta4(znum),theta5(znum),theta6(znum)]&#125;;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:anglenum  <br>    theta(<span class="hljs-built_in">i</span>,:)=thetalist&#123;<span class="hljs-built_in">i</span>&#125;;   <br>    theta(<span class="hljs-built_in">i</span>,<span class="hljs-number">5</span>)=theta(<span class="hljs-built_in">i</span>,<span class="hljs-number">5</span>)+<span class="hljs-number">90</span>;<br><span class="hljs-keyword">end</span><br><br>theta<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">T</span>=<span class="hljs-title">trans</span><span class="hljs-params">(s,theta)</span></span><br>    se3mat = VecTose3(s);<br>    theta = theta /180 * <span class="hljs-built_in">pi</span>;<br>    se3mat = se3mat * theta;<br>    T = MatrixExp6(se3mat);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="数值解">6.2数值解</h4><h5 id="牛顿-拉夫森法">1.牛顿-拉夫森法</h5><p>利用泰勒级数在<spanclass="math inline">\(\theta^0\)</span>处展开，截取第一项</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122132378.png"alt="image-20220112213225300" /><figcaption aria-hidden="true">image-20220112213225300</figcaption></figure><p>保留第一阶，令<span class="math inline">\(g(\theta)=0\)</span>，得到$$，作为初值带入方程，重复求解得到</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122134082.png"alt="image-20220112213423014" /><figcaption aria-hidden="true">image-20220112213423014</figcaption></figure><p>通过不断迭代，直到满足阈值</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122134272.png"alt="image-20220112213458206" /><figcaption aria-hidden="true">image-20220112213458206</figcaption></figure><h5 id="逆运动学数值算法">2.逆运动学数值算法</h5><p>令<spanclass="math inline">\(x_d\)</span>为预期得末端坐标，牛顿-拉夫森法中得<spanclass="math inline">\(g(\theta)\)</span>可以定义为<spanclass="math inline">\(g(\theta)=x_d-f(\theta)\)</span>，目标是找到关节坐标<spanclass="math inline">\(x_d\)</span>，且保证 <span class="math display">\[g(\theta_d)=x_d-f(\theta_d)=0\]</span> <imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122140830.png"alt="image-20220112214033744" /></p><p>截取泰勒级数到第一项</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122141138.png"alt="image-20220112214102074" /><figcaption aria-hidden="true">image-20220112214102074</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122141482.png"alt="image-20220112214125409" /><figcaption aria-hidden="true">image-20220112214125409</figcaption></figure><p>若正向运动学是关节角的线性函数，即式的高阶项为0，这时新的估计值<spanclass="math inline">\(\theta^1=\theta^0+\Delta\theta\)</span>精确满足<spanclass="math inline">\(x_d=0\)</span>。相反，若正向运动学是关节角的非线性函数,就如通常情况,这时新的估计值<spanclass="math inline">\(\theta^1\)</span>比<spanclass="math inline">\(\theta^0\)</span>更接近真实值，迭代过程不断重复，并产生一系列的关节角值{<spanclass="math inline">\(\theta^0 \theta^1 \theta^2\dots\)</span>}最终在<spanclass="math inline">\(\theta_d\)</span>处收敛。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122146207.png"alt="image-20220112214659125" /><figcaption aria-hidden="true">image-20220112214659125</figcaption></figure><p>如果逆运动学存在多组解，迭代过程趋向于收敛到与初始值最接近的解，你可以想象到每组解都有其存在的区域，若初始估计值不在这些区域中（如初始值与真实值没有足够接近）,迭代过程可能不收敛。</p><p>实际上，由于计算效率等原因，公式经常不采用求逆<spanclass="math inline">\(J^{-1}(\theta^0)\)</span>的方式来求解，可以找到更高效的方法求解线性方程Ax＝b中的x。例如，对于可逆阵A，基于A的LU分解可以用更少的运算得到x。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201122150563.png"alt="image-20220112215009457" /><figcaption aria-hidden="true">image-20220112215009457</figcaption></figure><p>分为两大类</p><ul><li><p>方程解<span class="math inline">\(y^*\)</span>精确满足<spanclass="math inline">\(Jy^*=z\)</span></p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/12/202201131007311.png"alt="image-20220113100729209" /><figcaption aria-hidden="true">image-20220113100729209</figcaption></figure></li><li><p>设定<spanclass="math inline">\(\theta^{i+1}=\theta^i+J^+(\theta^i)e\)</span></p></li><li><p>增加<span class="math inline">\(i\)</span></p></li></ul><p>为修改上述算法，使之能应用在预期末端位形为SE（3）而不是坐标向量xd的情况。可将关节坐标雅可比替换成末端物体雅可比。</p><p>首先需计算相对物体坐标系得预期变形 <span class="math display">\[T_{bd}(\theta^i)=T_{sb}^{-1}(\theta^i)T_{sd}=T_{bs}(\theta^i)T_{sd}\]</span> 然后利用矩阵对数<span class="math inline">\(V_b\)</span>，即<span class="math display">\[[V_b]=logT_{bd}(\theta^i)\]</span> 由此给出逆运动学算法</p><p>(a)初始化：已知<spanclass="math inline">\(T_{sd}\)</span>，初始化估计值$ ^0$，设定i=0;</p><p>(b)设定<spanclass="math inline">\([V_b]=log(T_{sb}^{-1}(\theta^i)T_{sd})\)</span>，当<spanclass="math inline">\(||\omega_b||&gt;\varepsilon_{\omega}\)</span>或者<spanclass="math inline">\(|v_b||&gt;\varepsilon_{v}\)</span></p><ul><li>设定<spanclass="math inline">\(\theta^{i+1}=\theta^i+J^+(\theta^i)V_b\)</span></li><li>增加<span class="math inline">\(i\)</span></li></ul><p>基于空间坐标系也可导出另一种形式利用空间雅可比和空间速度旋量<spanclass="math inline">\(V_s=[Ad_{T_{sb}}]V_b\)</span></p><h4 id="逆向速度运动学">6.3逆向速度运动学</h4><h4 id="软件">6.4软件</h4><p>该函数主要是已知末端坐标系中描述的关节旋量B，末端初始位形M、预期的末端位形T，关节角的初始估计值$^0 <span class="math inline">\(、以及最小误差\)</span> _<spanclass="math inline">\(和\)</span>_v$，利用迭代牛顿-拉夫森算法来计算逆运动学，若在经过—定次数的迭代之后还无法收敛，算法失效</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">［theta11st,success］＝IKinBody（B1ist,M,<span class="hljs-built_in">T</span>,theta1ist,eomg,ev）<br></code></pre></td></tr></table></figure><p>该函数功能类似于lKinBody，只是关节旋量在空间坐标系下来描述，所有的误差也在空间坐标系内来表达。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">［theta11st,success］＝IKinSpace（B1ist,M,<span class="hljs-built_in">T</span>,theta1ist,eomg,ev）<br></code></pre></td></tr></table></figure><h2 id="改进d-h建模">2.改进D-H建模</h2><h3 id="d-h参数">（1）D-H参数</h3><p>机器人工具箱中中定义改进DH连杆时一定要注意DH[theta d aalpha]中<strong>前两个参数下表为i</strong>，即当前关节的DH值，后<strong>两个参数</strong>下表为i-1，及前一个关节的DH值参数值！</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/09/202201100011350.png"alt="image-20220110001103279" /><figcaption aria-hidden="true">image-20220110001103279</figcaption></figure><p>此时对比代码中的DH参数和图中画的坐标系，得到DH定义为</p><blockquote><p>theta(i)：绕Zi轴，从Xi-1旋转到Xi的角度</p><p>d(i)：沿Zi轴，从Xi-1移动到Xi的距离</p><p>a(i)：沿Xi轴，从Zi移动到Zi+1的距离</p><p>alpha(i)：绕Xi轴，从Zi旋转到Zi+1的角度</p></blockquote><table><thead><tr class="header"><th>杆件</th><th>theta</th><th>d</th><th>a</th><th>alpha</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr class="even"><td>1</td><td>0</td><td>815</td><td>350</td><td>-90</td></tr><tr class="odd"><td>2</td><td>-90</td><td>0</td><td>850</td><td>0</td></tr><tr class="even"><td>3</td><td>0</td><td>0</td><td>145</td><td>-90</td></tr><tr class="odd"><td>4</td><td>0</td><td>820</td><td>0</td><td>90</td></tr><tr class="even"><td>5</td><td>0</td><td>0</td><td>0</td><td>-90</td></tr><tr class="odd"><td>6</td><td>180</td><td>180</td><td>0</td><td>0</td></tr></tbody></table><p>所以在程序中定义DH参数：</p><table><thead><tr class="header"><th>杆件</th><th>theta</th><th>d</th><th>a</th><th>alpha</th></tr></thead><tbody><tr class="odd"><td>1</td><td>0</td><td>815</td><td>0</td><td>0</td></tr><tr class="even"><td>2</td><td>-90</td><td>0</td><td>350</td><td>-90</td></tr><tr class="odd"><td>3</td><td>0</td><td>0</td><td>850</td><td>0</td></tr><tr class="even"><td>4</td><td>0</td><td>820</td><td>145</td><td>-90</td></tr><tr class="odd"><td>5</td><td>0</td><td>0</td><td>0</td><td>90</td></tr><tr class="even"><td>6</td><td>180</td><td>180</td><td>0</td><td>-90</td></tr></tbody></table><p>上图所示为机器人处于位姿原点位置，在D-H模型中关节转角theta为[0,-90,0,0,0,180]，而实际的机器人处于原点位姿的关节转角theta'为[0,-90,90,0,0,0]，这是由于机器人关节零位和旋转方向定义与D-H模型不同造成的，实际机器人与D-H模型第一，四，六轴的旋转方向相反，第三、六轴分别差-90°和180°，需要对理论模型和实际模型的关节转角转换关系进行明确的定义：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">theta1</span>=-theta1&#x27;;<br><br><span class="hljs-attribute">theta2</span>=-theta2&#x27;;<br><br><span class="hljs-attribute">theta3</span>=theta3&#x27;-90;<br><br><span class="hljs-attribute">theta4</span>=-theta4&#x27;;<br><br><span class="hljs-attribute">theta5</span>=-theta5&#x27;<br><br><span class="hljs-attribute">theta6</span>=180-theta6&#x27;<br></code></pre></td></tr></table></figure><h3 id="建模程序">（2）建模程序</h3><p>使用python中的机器人工具箱进行D-H建模,程序命名为KR60.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> roboticstoolbox <span class="hljs-keyword">as</span> rtb<br><span class="hljs-keyword">from</span> spatialmath <span class="hljs-keyword">import</span> SE3<br><span class="hljs-keyword">from</span> roboticstoolbox <span class="hljs-keyword">import</span> DHRobot, RevoluteDH, RevoluteMDH<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KR60</span>(<span class="hljs-title class_ inherited__">DHRobot</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        deg = pi / <span class="hljs-number">180</span><br><br>        <span class="hljs-comment"># Updated values form ARTE git. Old values left as comments</span><br><br>        L1 = RevoluteMDH(a=<span class="hljs-number">0</span>,<br>                         d=<span class="hljs-number">0.815</span>,<br>                         alpha=<span class="hljs-number">0</span>,  <span class="hljs-comment"># alpha=pi / 2,</span><br>                         <span class="hljs-comment"># theta=0,</span><br>                         qlim=[-<span class="hljs-number">185</span> * deg, <span class="hljs-number">185</span> * deg]<br>                        )<br>        L2 = RevoluteMDH(a=<span class="hljs-number">0.35</span>,<br>                         d=<span class="hljs-number">0</span>,  <span class="hljs-comment"># d=0.135,</span><br>                         alpha=-pi/<span class="hljs-number">2</span>,  <span class="hljs-comment"># alpha=pi,</span><br>                         <span class="hljs-comment"># theta=0,</span><br>                         qlim=[-<span class="hljs-number">135</span> * deg, <span class="hljs-number">35</span> * deg]<br>                        )<br>        L3 = RevoluteMDH(a=<span class="hljs-number">0.85</span>,<br>                        d=<span class="hljs-number">0</span>,  <span class="hljs-comment"># d=0.135,</span><br>                        alpha=<span class="hljs-number">0</span>,  <span class="hljs-comment"># alpha=-pi / 2,</span><br>                        <span class="hljs-comment"># theta=-pi/2,</span><br>                        qlim=[-<span class="hljs-number">120</span> * deg, <span class="hljs-number">158</span> * deg]<br>                        )<br>        L4 = RevoluteMDH(a=<span class="hljs-number">0.145</span>,<br>                        d=<span class="hljs-number">0.82</span>,  <span class="hljs-comment"># d=0.62,</span><br>                        alpha=-pi/<span class="hljs-number">2</span>,  <span class="hljs-comment"># alpha=pi / 2,</span><br>                        <span class="hljs-comment"># theta=0,</span><br>                        qlim=[-<span class="hljs-number">350</span> * deg, <span class="hljs-number">350</span> * deg]<br>                        )<br>        L5 = RevoluteMDH(a=<span class="hljs-number">0.0</span>,<br>                        d=<span class="hljs-number">0.0</span>,<br>                        alpha=pi/<span class="hljs-number">2</span>,  <span class="hljs-comment"># alpha=-pi / 2,</span><br>                        <span class="hljs-comment"># theta=0,</span><br>                        qlim=[-<span class="hljs-number">119</span> * deg, <span class="hljs-number">119</span> * deg]<br>                        )<br>        L6 = RevoluteMDH(a=<span class="hljs-number">0</span>,<br>                        d=<span class="hljs-number">0.17</span>,<br>                        alpha=-pi/<span class="hljs-number">2</span>,<br>                        <span class="hljs-comment"># theta=-pi,</span><br>                        qlim=[-<span class="hljs-number">350</span> * deg, <span class="hljs-number">350</span> * deg]<br>                        )<br><br>        L = [L1, L2, L3, L4, L5, L6]<br><br>        <span class="hljs-comment"># Create SerialLink object</span><br>        <span class="hljs-built_in">super</span>().__init__(<br>            L,<br>            <span class="hljs-comment"># meshdir=&quot;KUKA/KR5_arc&quot;,</span><br>            name=<span class="hljs-string">&#x27;KR60&#x27;</span>,<br>            manufacturer=<span class="hljs-string">&#x27;KUKA&#x27;</span>)<br>            <span class="hljs-comment"># meshdir=&quot;meshes/KUKA/KR60_arc&quot;)</span><br><br>        self.addconfiguration(<span class="hljs-string">&quot;qz&quot;</span>, [<span class="hljs-number">0</span>, -pi/<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pi])<br>        self.addconfiguration(<br>          <span class="hljs-string">&quot;qk1&quot;</span>, [<span class="hljs-number">0</span>, -pi/<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>        self.addconfiguration(<br>          <span class="hljs-string">&quot;qk2&quot;</span>, [pi / <span class="hljs-number">4</span>, pi / <span class="hljs-number">3</span>, pi / <span class="hljs-number">6</span>, pi / <span class="hljs-number">3</span>, pi / <span class="hljs-number">4</span>, pi / <span class="hljs-number">6</span>])<br>        self.addconfiguration(<br>          <span class="hljs-string">&quot;qk3&quot;</span>, [pi / <span class="hljs-number">6</span>, pi / <span class="hljs-number">3</span>, pi / <span class="hljs-number">6</span>, pi / <span class="hljs-number">3</span>, pi / <span class="hljs-number">6</span>, pi / <span class="hljs-number">3</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:   <span class="hljs-comment"># pragma nocover</span><br>    robot = KR60()<br>    <span class="hljs-built_in">print</span>(robot)<br></code></pre></td></tr></table></figure><p>在主程序中调用建模程序，同时对实际角度进行相应的转换，转换为D-H模型中对应的关节角进行运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> roboticstoolbox <span class="hljs-keyword">as</span> rtb<br><span class="hljs-keyword">from</span> spatialmath <span class="hljs-keyword">import</span> SE3<br><span class="hljs-keyword">from</span> spatialmath.base <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> KR60<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">thetaTrans</span>(<span class="hljs-params">q</span>):<br>    q[<span class="hljs-number">0</span>] = -q[<span class="hljs-number">0</span>]<br>    q[<span class="hljs-number">1</span>] = q[<span class="hljs-number">1</span>]<br>    q[<span class="hljs-number">2</span>] = q[<span class="hljs-number">2</span>] - pi / <span class="hljs-number">2</span><br>    q[<span class="hljs-number">3</span>] = -q[<span class="hljs-number">3</span>]<br>    q[<span class="hljs-number">4</span>] = q[<span class="hljs-number">4</span>]<br>    q[<span class="hljs-number">5</span>] = pi - q[<span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> q<br><br>q = [-<span class="hljs-number">2.410000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">57.230000</span> / <span class="hljs-number">180</span> * pi, <span class="hljs-number">112.080000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">0.780000</span> / <span class="hljs-number">180</span> * pi, -<span class="hljs-number">54.890000</span> / <span class="hljs-number">180</span> * pi,<br>     <span class="hljs-number">1.440000</span> / <span class="hljs-number">180</span> * pi]<br>q = thetaTrans(q)<br><span class="hljs-built_in">print</span>(q)<br><br>robot = KR60.KR60()<br>T = robot.fkine(q)  <br><span class="hljs-built_in">print</span>(T)<br>T.printline()<br></code></pre></td></tr></table></figure><p>得到的结果为</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[0.04206243497306334, <span class="hljs-string">-0</span>.9988519309163547, 0.38536869884034797, 0.01361356816555577, <span class="hljs-string">-0</span>.9580112264196875, 3.1164599123610746]<br>   0.001189 <span class="hljs-string">-0</span>.03091   0.9995    1.569     <br>  <span class="hljs-string">-0</span>.01727   0.9994    0.03092   0.06416   <br>  <span class="hljs-string">-0</span>.9999   <span class="hljs-string">-0</span>.01729   0.0006545  0.9428    <br>   0         0         0         1         <br><br>t = 1.57, 0.0642, 0.943; rpy/zyx = <span class="hljs-string">-87</span>.8°, 89°, <span class="hljs-string">-86</span>.1°<br></code></pre></td></tr></table></figure><h3 id="spatialmath-python库">（3）<strong><ahref="https://github.com/petercorke/spatialmath-python">spatialmath-python</a></strong>库</h3><h4 id="函数说明">1.函数说明</h4><p>spatialmath-python库提供了旋转角度，旋转矩阵，四元素，变换矩阵之间的转换函数。</p><p>例如，我们可以创建一个刚体变换，它是围绕 x 轴旋转 30 度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> spatialmath.base <span class="hljs-keyword">import</span> *<br><span class="hljs-meta">&gt;&gt;&gt; </span>rotx(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;deg&#x27;</span>)<br>array([[ <span class="hljs-number">1.</span>   ,  <span class="hljs-number">0.</span>   ,  <span class="hljs-number">0.</span>   ],<br>       [ <span class="hljs-number">0.</span>   ,  <span class="hljs-number">0.866</span>, -<span class="hljs-number">0.5</span>  ],<br>       [ <span class="hljs-number">0.</span>   ,  <span class="hljs-number">0.5</span>  ,  <span class="hljs-number">0.866</span>]])<br></code></pre></td></tr></table></figure><p>这将导致一个NumPy（4x4）数组，该数组属于组（SE3）。我们还可以创建一个类实例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> spatialmath <span class="hljs-keyword">import</span> *</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">T = SE3.Rx(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;deg&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">type</span>(T)</span><br>&lt;class &#x27;spatialmath.pose3d.SE3&#x27;&gt;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(T)</span><br>   1         0         0         0         <br>   0         0.866    -0.5       0         <br>   0         0.5       0.866     0         <br>   0         0         0         1  <br></code></pre></td></tr></table></figure><p>它在内部表示为4*4 NumPy 数组。</p><p>虽然函数和类可以提供类似的功能，但该类具有以下优点：</p><ul><li>类型安全，不可能将3D旋转矩阵与2D刚体运动混合，即使两者都由3*3矩阵表示</li><li>运算符重载允许方便和可读的算法表达</li><li>表示的不仅仅是单个值，而是一系列值，这些值由运算符通过隐式广播值进行处理</li></ul><h4 id="spatial-math-类">2.Spatial math 类</h4><p>如上述所表示的SO3类R,可以计算出相应的欧拉角</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; R.eul()<br></code></pre></td></tr></table></figure><p>在机器人技术中，我们经常需要一个序列，一个轨迹，旋转矩阵或姿势。这些姿势类从类继承功能<code>list</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>R = SO3()   <span class="hljs-comment"># the identity</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>R.append(R1)<br><span class="hljs-meta">&gt;&gt;&gt; </span>R.append(R2)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(R)<br> <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>R[<span class="hljs-number">1</span>]<br>   <span class="hljs-number">1</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>          <br>   <span class="hljs-number">0</span>         <span class="hljs-number">0.955336</span> -<span class="hljs-number">0.29552</span>    <br>   <span class="hljs-number">0</span>         <span class="hljs-number">0.29552</span>   <span class="hljs-number">0.955336</span>             <br></code></pre></td></tr></table></figure><p>这可以在循环和列表理解中使用<code>for</code></p><p>构造它的另一种方法是（在上面定义的<code>R1 R2</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>R = SO3( [ SO3(), R1, R2 ] )       <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(R)<br> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>许多构造函数支持矢量化，例如 <code>.Rx</code>, <code>.Ry</code> and<code>.Rz</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>R = SO3.Rx( np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.2</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(R)<br> <span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p>它在一行中创建了旋转矩阵列表。</p><p>矢量化也适用于运算符，例如</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">A = R * SO3.Ry(<span class="hljs-number">0.5</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">len</span>(R)</span><br> 32<br></code></pre></td></tr></table></figure><p>将产生一个结果，其中每个元素都是左侧与右侧的每个元素的乘积，即。<code>R[i] * SO3.Ry(0.5)</code>.</p><p>同样地</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">A = SO3.Ry(<span class="hljs-number">0.5</span>) * R </span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">len</span>(R)</span><br> 32<br></code></pre></td></tr></table></figure><p>将产生一个结果，其中每个元素都是左侧的乘积，即右侧的每个元素。.<code>SO3.Ry(0.5) * R[i]</code></p><p>最后</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">A = R * R </span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">len</span>(R)</span><br> 32<br></code></pre></td></tr></table></figure><p>将产生一个结果，其中每个元素是左侧每个元素与右侧每个元素的乘积，即。.<code>R[i] * R[i]</code></p><p>这些类的基础表示是一个 numpy矩阵，但该类确保该矩阵的结构对于所表示的特定类有效：SO（2）、SE（2）、SO（3）、SE（3）。任何对类无效的操作都将返回矩阵而不是pose 类，例如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; SO3.Rx(<span class="hljs-number">0.3</span>) * <span class="hljs-number">2</span><br>array(<span class="hljs-string">[[ 2.        ,  0.        ,  0.        ],</span><br><span class="hljs-string">       [ 0.        ,  1.91067298, -0.59104041],</span><br><span class="hljs-string">       [ 0.        ,  0.59104041,  1.91067298]]</span>)<br><br>&gt;&gt;&gt; SO3.Rx(<span class="hljs-number">0.3</span>) - <span class="hljs-number">1</span><br>array(<span class="hljs-string">[[ 0.        , -1.        , -1.        ],</span><br><span class="hljs-string">       [-1.        , -0.04466351, -1.29552021],</span><br><span class="hljs-string">       [-1.        , -0.70447979, -0.04466351]]</span>)<br></code></pre></td></tr></table></figure><p>我们也可以打印和打印这些对象</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt;&gt; T = SE3(1,2,3) * SE3.Rx(30, &#x27;deg&#x27;)<br>&gt;&gt;&gt; T.print()<br>  <span class="hljs-number"> 1 </span>       <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 1 </span>         <br>  <span class="hljs-number"> 0 </span>        0.866025 -0.5      <span class="hljs-number"> 2 </span>         <br>  <span class="hljs-number"> 0 </span>        0.5       0.866025 <span class="hljs-number"> 3 </span>         <br>  <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 0 </span>       <span class="hljs-number"> 1 </span>         <br><br>&gt;&gt;&gt; T.printline()<br>t =        1,        2,        3; rpy/zyx =       30,        0,       <span class="hljs-number"> 0 </span>deg<br><br>&gt;&gt;&gt; T.plot()<br></code></pre></td></tr></table></figure><h1 id="二vrep与python">二、VREP与PYTHON</h1><h2 id="建立urdf模型">1.建立URDF模型</h2><p>准备工作：下载solidworks导出urdf文件的插件：http://wiki.ros.org/sw_urdf_exporter，下载直接安装即可。</p><ol type="1"><li><p>去库卡官网下载KR60-3的STL模型</p></li><li><p>按照面重合-轴线重合的方式，装配好机器人模型。</p></li><li><p>在装配体中编辑零件，提取关节基准轴，以第六轴为例，命名为axis_6</p></li></ol><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071702007.png"alt="https://img-blog.csdnimg.cn/20201128145226408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70" /><figcaptionaria-hidden="true">https://img-blog.csdnimg.cn/20201128145226408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70</figcaption></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071702019.png"alt="https://img-blog.csdnimg.cn/20201128142831325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70" /><figcaptionaria-hidden="true">https://img-blog.csdnimg.cn/20201128142831325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70</figcaption></figure><ol start="4" type="1"><li>对各关节建立起相应的轴线之后，退出零件编辑，返回装配体设置，对基座、关节以及刀具建立坐标系，注意所建立的坐标系不能在零件的内部，必须在装配体的树形目录下，坐标系的Z轴指向关节旋转方向。</li></ol><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071702024.png"alt="https://img-blog.csdnimg.cn/20201129062407480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70" /><figcaptionaria-hidden="true">https://img-blog.csdnimg.cn/20201129062407480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70</figcaption></figure><ol start="5" type="1"><li>点击工具-tool-export asURDF,轴和坐标系之前建立的关节轴线和坐标轴，零件选择相应的杆件，轴的类型都选择旋转副。</li></ol><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071702027.png"alt="https://img-blog.csdnimg.cn/20201129185009562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70" /><figcaptionaria-hidden="true">https://img-blog.csdnimg.cn/20201129185009562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1Y2hhb25vMQ==,size_16,color_FFFFFF,t_70</figcaption></figure><ol start="6" type="1"><li>导出URDF文件，在最后的配置文件中可以调整杆件的颜色</li></ol><h2 id="导入vrep">2.导入VREP</h2><ol type="1"><li>在Vrep中，Plugins-URDFexport导入模型文件，注意导入路径不能有中文，否则导入会失败。</li></ol><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071708425.png"alt="image-20220107170851338" /><figcaption aria-hidden="true">image-20220107170851338</figcaption></figure><ol start="2" type="1"><li>将基座设置为固定，调整相应的杆件关节极限,运动模式修改为Torque/forcemode。进一步修改杆件的动力学信息，使能电动机，将电动机的最大力矩调整为合适的大小，打开controlpositionenable，修改关节速度极限，这样就可以在脚本中修改关节数据，使机器人按我们设定的轨迹运动。</li></ol><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071702052.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="3" type="1"><li><p>添加运动脚本，ADD-Associated child scripts-no threadscripts。</p><p>API解释见：<ahref="https://coppeliarobotics.com/helpFiles/en/apiFunctions.htm">regularAPI reference (coppeliarobotics.com)</a></p><p>Lua脚本分为4部分，包含由系统适当调用的回调函数集合。除了初始化回调之外，所有其他回调都是可选的。默认主脚本通常分为4个回调函数：</p><p>初始化函数：sysCall_init（）。此回调函数不是可选的。它将在模拟开始时执行一次。代码负责准备模拟等。通过sim.getObjectHandle函数初始化各关节的句柄</p><p>驱动函数：sysCall_actuation()。此回调函数将在每次模拟过程中执行。代码负责处理模拟的所有驱动功能。有一个函数特别有趣：sim.HandleChildScript，它调用子脚本的系统调用回调函数。如果没有这些命令，子脚本将无法执行或无法执行其驱动功能，特定的模型功能或行为也无法按预期运行。</p><p>传感函数：sysCall_sensing()。此回调函数将在每次模拟过程中执行。代码负责以通用方式处理模拟的所有传感功能（接近传感器等）。同样也有sim.HandleChildScript，它调用子脚本的系统调用回调函数。</p><p>恢复函数：sysCall_cleanup()。此函数将在模拟结束前执行一次。该代码负责恢复对象的初始配置、清除传感器状态等。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sysCall_init</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">-- do some initialization here</span><br>    axis_1_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_1&#x27;</span>)<br>    axis_2_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_2&#x27;</span>)<br>    axis_3_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_3&#x27;</span>)<br>    axis_4_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_4&#x27;</span>)<br>    axis_5_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_5&#x27;</span>)<br>    axis_6_handle = sim.getObjectHandle(<span class="hljs-string">&#x27;axis_6&#x27;</span>)<br>    t = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-comment">--graph</span><br>    graph=sim.getObjectHandle(<span class="hljs-string">&#x27;Graph&#x27;</span>)<br>    JointPos=sim.getObjectHandle(<span class="hljs-string">&#x27;JointPos&#x27;</span>)<br>    <br>    objectPosX=sim.addGraphStream(graph,<span class="hljs-string">&#x27;object pos x&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">1</span>)<br>    objectPosY=sim.addGraphStream(graph,<span class="hljs-string">&#x27;object pos y&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">1</span>)<br>    objectPosZ=sim.addGraphStream(graph,<span class="hljs-string">&#x27;object pos Z&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">1</span>)<br>    <br>    objectJoint1=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint1&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;)<br>    objectJoint2=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint2&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0</span>&#125;)<br>    objectJoint3=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint3&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;)<br>    objectJoint4=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint4&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>&#125;)<br>    objectJoint5=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint5&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;)<br>    objectJoint6=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Joint6&#x27;</span>,<span class="hljs-string">&#x27;deg/s&#x27;</span>,<span class="hljs-number">0</span>,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;)<br>    <br>    objectTime=sim.addGraphStream(JointPos,<span class="hljs-string">&#x27;Time&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">1</span>)<br>    <br>    sim.addGraphCurve(graph,<span class="hljs-string">&#x27;object pos x/y/z&#x27;</span>,<span class="hljs-number">3</span>,&#123;objectPosX,objectPosY,objectPosZ&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<span class="hljs-string">&#x27;m by m&#x27;</span>)<br>    sim.addGraphCurve(JointPos,<span class="hljs-string">&#x27;Joint1&#x27;</span>,<span class="hljs-number">2</span>,&#123;objectJoint1,objectTime&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<span class="hljs-string">&#x27;m by m&#x27;</span>)<br>    <br>    <span class="hljs-comment">--base frame</span><br>    base_frame = sim.getObjectHandle(<span class="hljs-string">&#x27;baseframe&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sysCall_actuation</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">-- put your actuation code here</span><br>    <br>    t = t + <span class="hljs-number">0.01</span><br>    <span class="hljs-comment">--print(t)</span><br>    <br>    axis_1_angle = sim.getJointPosition(axis_1_handle)<br>    axis_2_angle = sim.getJointPosition(axis_2_handle)<br>    axis_3_angle = sim.getJointPosition(axis_3_handle)<br>    axis_4_angle = sim.getJointPosition(axis_4_handle)<br>    axis_5_angle = sim.getJointPosition(axis_5_handle)<br>    axis_6_angle = sim.getJointPosition(axis_6_handle)<br>   <br>    axis_1_targetAngle = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span> / <span class="hljs-number">3</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    axis_2_targetAngle = -<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    axis_3_targetAngle = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    axis_4_targetAngle = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>/<span class="hljs-number">4</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    axis_5_targetAngle = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>/<span class="hljs-number">6</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    axis_6_targetAngle = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>/<span class="hljs-number">5</span> * <span class="hljs-built_in">math</span>.<span class="hljs-built_in">sin</span>(t)<br>    <br>    <span class="hljs-comment">--print(180*sim.getJointPosition(axis_6_handle)/math.pi)</span><br>    <br>    <span class="hljs-comment">--print(180*sim.getJointPosition(axis_1_handle)/math.pi)</span><br>    <span class="hljs-comment">--print(axis_1_targetAngle)</span><br>    sim.setJointTargetPosition(axis_1_handle,axis_1_targetAngle)<br>    sim.setJointTargetPosition(axis_2_handle,axis_2_targetAngle)<br>    sim.setJointTargetPosition(axis_3_handle,axis_3_targetAngle)<br>    sim.setJointTargetPosition(axis_4_handle,axis_4_targetAngle)<br>    sim.setJointTargetPosition(axis_5_handle,axis_5_targetAngle)<br>    sim.setJointTargetPosition(axis_6_handle,axis_6_targetAngle)<br>    <span class="hljs-comment">--print(axis_1_angle)</span><br>    <span class="hljs-comment">--print(axis_2_angle)</span><br>    <span class="hljs-comment">--print(axis_2_targetAngle)</span><br>    <br>    <br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sysCall_sensing</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">-- put your sensing code here</span><br>    <span class="hljs-keyword">local</span> pos=sim.getObjectPosition(graph,<span class="hljs-number">-1</span>)<br>    <span class="hljs-comment">--print(pos)</span><br>    <br>    sim.setGraphStreamValue(graph,objectPosX,pos[<span class="hljs-number">1</span>])<br>    sim.setGraphStreamValue(graph,objectPosY,pos[<span class="hljs-number">2</span>])<br>    sim.setGraphStreamValue(graph,objectPosZ,pos[<span class="hljs-number">3</span>])<br>    <br>    sim.setGraphStreamValue(JointPos,objectJoint1,<span class="hljs-number">180</span>*sim.getJointPosition(axis_1_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    sim.setGraphStreamValue(JointPos,objectJoint2,<span class="hljs-number">180</span>*sim.getJointPosition(axis_2_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    sim.setGraphStreamValue(JointPos,objectJoint3,<span class="hljs-number">180</span>*sim.getJointPosition(axis_3_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    sim.setGraphStreamValue(JointPos,objectJoint4,<span class="hljs-number">180</span>*sim.getJointPosition(axis_4_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    sim.setGraphStreamValue(JointPos,objectJoint5,<span class="hljs-number">180</span>*sim.getJointPosition(axis_5_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    sim.setGraphStreamValue(JointPos,objectJoint6,<span class="hljs-number">180</span>*sim.getJointPosition(axis_6_handle)/<span class="hljs-built_in">math</span>.<span class="hljs-built_in">pi</span>)<br>    <br>    <span class="hljs-comment">--Joint1=&#123;&#125;</span><br>    <span class="hljs-comment">--table.insert(Joint1,axis_1_angle)</span><br>    <span class="hljs-comment">--sim.setGraphStreamValue(JointPos,objectJoint1,Joint1)</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sysCall_cleanup</span><span class="hljs-params">()</span></span><br>    <span class="hljs-comment">-- do some clean-up here</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- See the user manual or the available code snippets for additional callback functions and details</span><br><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><p>点击仿真进行按钮，机器人就按着脚本中关节设置的轨迹进行移动，同时在空间中绘制出末端的运行轨迹，在弹出的框中也可以看到末端在XY平面的轨迹。</p><p><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071709842.png" /></p></li></ol></li></ol><h2 id="联合仿真">3.联合仿真</h2><p>Vrep提供了三种远程api，远程API是应用程序与CoppeliaSim连接的几种方式之一。它允许CoppeliaSim和外部应用程序（即在不同进程或不同机器上运行的应用程序）之间的通信，是跨平台的，支持服务调用（即阻塞调用），还支持双向数据流。它有三种不同的版本/框架：</p><p><ahref="https://coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm">TheZeroMQ-based remoteAPI</a>：它轻量级且易于使用，提供了通过CoppeliaSim脚本也可用的所有API函数，目前支持Python客户端。</p><p><ahref="https://coppeliarobotics.com/helpFiles/en/legacyRemoteApiOverview.htm">Thelegacy remote API</a> (or simply <em>remoteAPI</em>)：它相对轻量级，并且比基于B0的远程API具有更少的依赖性。它提供了API函数的子集，并支持以下客户端：C/C++、Java、Python、Matlab、Octave和Lua。</p><p><ahref="https://coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">TheB0-based remoteAPI</a>：它基于BlueZero中间件及其与CoppeliaSim的接口插件。它提供了API函数的子集，可以很容易地扩展和支持以下客户端：C++、java、python、Matlab和Lua。</p><h3 id="vrep与matlab联合仿真">1.Vrep与matlab联合仿真</h3><h4 id="legacy-remote-api"><ahref="https://coppeliarobotics.com/helpFiles/en/legacyRemoteApiOverview.htm">Legacyremote API</a></h4><p>要在Matlab程序中使用远程API功能，需要以下3项：</p><ul><li><p>remoteApiProto.m</p></li><li><p>remApi.m</p></li><li><p>remoteApi.dll</p><ul><li><p>新建一个matlab项目文件夹</p></li><li><p>将C:Files。</p></li></ul><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071719638.png"alt="image-20220107171940476" /><figcaption aria-hidden="true">image-20220107171940476</figcaption></figure><ul><li>转到C:Files，调整类型只显示应用程序拓展，全选所有的DLL文件，拷贝到matlab文件夹。</li></ul><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071720241.png"alt="image-20220107172027085" /><figcaption aria-hidden="true">image-20220107172027085</figcaption></figure><ul><li>remoteapi.dll在C:Files，同样拷贝到项目文件夹</li></ul><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201071728609.png"alt="image-20220107172844548" /><figcaption aria-hidden="true">image-20220107172844548</figcaption></figure><ul><li>打开matlab，将项目文件夹包含到预定路径中，使程序在运行中能调用相应的函数和dll文件。</li></ul></li></ul><p>在Matlab的当前文件夹中包含上述文件后，调用sim=remApi（'remoteApi'）来构建对象并加载库。要在客户端（即您的应用程序）启用远程API，请调用sim.simxStart。请参阅simpleTest。以编程/remoteApiBindings/matlab目录中的m程序为例。本页列出并描述所有支持的Matlab远程API函数。CoppeliaSim远程API函数可以很容易地从它们的“simx”前缀中识别出来。确保您的Matlab使用与remoteApi库相同的位体系结构：64位Matlab和32位remoteApi库将无法工作，反之亦然！</p><p>关键的语句</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">V-REP端：<br>simExtRemoteApiStart(<span class="hljs-number">19999</span>)<br></code></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">MATLAB端：<br>vrep=remApi(<span class="hljs-string">&#x27;remoteApi&#x27;</span>); <span class="hljs-comment">% using the prototype file (remoteApiProto.m)</span><br>vrep.simxFinish(<span class="hljs-number">-1</span>); <span class="hljs-comment">% just in case, close all opened connections</span><br>clientID=vrep.simxStart(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">19999</span>,<span class="hljs-built_in">true</span>,<span class="hljs-built_in">true</span>,<span class="hljs-number">5000</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h4 id="b0-based-remote-api"><ahref="https://coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">B0-basedremote API</a></h4><h5 id="python">python</h5><ol type="1"><li><h6id="要在python脚本中使用基于b0的远程api功能您需要以下内容">要在Python脚本中使用基于B0的远程API功能，您需要以下内容：</h6></li></ol><ul><li>安装用于Python的MessagePack:<code>pip install msgpack</code></li><li><em>C:FilesRemoteApiBindingsRemoteApi.py</em></li><li>C:FilesRemoteApiBindings.py。</li><li>blueZero库（例如b0.dll），不要忘记blueZero库本身有依赖项（例如<em>libzmq</em>,<em>boost_chrono</em>, <em>boost_system</em>,<em>boost_thread</em>等）。</li></ul><ol start="2" type="1"><li><h6 id="创建anaconda虚拟环境">创建anaconda虚拟环境</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1、用conda创建Python虚拟环境（在conda prompt环境下完成）<br>conda create -n Vrep <span class="hljs-attribute">python</span>=3.7<br><br>2、激活虚拟环境（在conda prompt环境下完成）<br>activate Vrep<br><br>3、给虚拟环境安装外部包<br>conda install -n Vrep [package]<br>例如: conda install -n tensorflow pandas<br><br>4、查看已有的环境(当前已激活的环境会显示一个星号)<br>conda <span class="hljs-built_in">info</span> -e<br><br>5、删除一个已有的虚拟环境<br>conda <span class="hljs-built_in">remove</span> --name your_env_name --all<br><br>6、查看pip的安装目录<br>pip list<br><br>7、删除已经安装的模块<br>pip uninstall **<br>(例如：pip uninstall numpy)<br></code></pre></td></tr></table></figure><p>创建anaconda的虚拟环境后，会生成E:，在Pycharm中选择创建的虚拟环境。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201072028121.png"alt="image-20220107202802960" /><figcaption aria-hidden="true">image-20220107202802960</figcaption></figure><ol start="3" type="1"><li><p>和matlab操作一样，打开C:Files，调整类型只显示应用程序拓展，全选所有的DLL文件，拷贝到anaconda创建的虚拟环境的文件夹中。b0RemoteApi.py，b0.py拷贝到项目文件夹中，在pycharm控制台中使用，<code>conda install msgpack</code>下载msgpack包</p></li><li><p>打开Vrep端的服务器，直接在model browser中打开tools文件夹，将B0Remote API Server拖动到场景中，就打开了Vrep端的服务器</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201072033467.png"alt="image-20220107203322062" /><figcaption aria-hidden="true">image-20220107203322062</figcaption></figure></li><li><p>打开python端的服务器</p></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> b0RemoteApi<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">with</span> b0RemoteApi.RemoteApiClient(<span class="hljs-string">&#x27;b0RemoteApi_pythonClient&#x27;</span>,<span class="hljs-string">&#x27;b0RemoteApi&#x27;</span>) <span class="hljs-keyword">as</span> client:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getJointPos</span>(<span class="hljs-params">num</span>):<br>        jointname = <span class="hljs-string">&quot;axis_&quot;</span> + <span class="hljs-built_in">str</span>(num)<br>        [<span class="hljs-built_in">bool</span>, jointhandle] = client.simxGetObjectHandle(jointname, client.simxServiceCall())<br>        [<span class="hljs-built_in">bool</span>, joint] = client.simxGetJointPosition(jointhandle, client.simxServiceCall())<br>        <span class="hljs-built_in">print</span>(joint)<br>        <span class="hljs-keyword">return</span> joint<br>    client.simxStartSimulation(client.simxServiceCall()) <span class="hljs-comment">#开始仿真</span><br>    startTime = time.time()<br>    getJointPos(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> time.time() &lt; startTime + <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">continue</span><br>    client.simxStopSimulation(client.simxServiceCall()) <span class="hljs-comment">#停止仿真</span><br></code></pre></td></tr></table></figure><h5 id="基于b0的远程api操作方法">基于B0的远程API操作方法</h5><p>大多数基于B0的远程API函数需要一个附加参数：用于执行函数调用的主题或通信通道。</p><p>主题可以是以下5个函数之一的返回值：<strong>simxServiceCall：</strong>本主题允许在阻塞模式下执行功能，即命令将传输到服务器（即CoppeLisim），在那里执行，并向客户端返回响应。仅当<strong>作为一次性操作</strong>从服务器获取命令响应时（例如，simxGetObjectHandle通常使用服务调用来执行）才使用此主题。<strong>simxDefaultPublisher</strong>：本主题允许在非阻塞模式下执行函数，即函数被发送到服务器（即CoppeliaSim），控制权立即返回到客户端（即客户端不会等待服务器的回复）。<strong>仅在向服务器发送命令时使用此主题，您不希望/不需要服务器响应</strong>（例如，simxSetJointPosition通常使用默认发布服务器执行）。<strong>simxDefaultSubscriber</strong>：本主题通知服务器<strong>持续执行该函数，并持续将响应流式传输到客户端</strong>。客户端将在回调函数中接收响应。仅当您希望从服务器端连续执行的同一命令接收响应时，才使用此主题。（例如，simxGetJointForce通常使用默认订阅服务器执行）。定义的回调函数通过simxSpinOnce函数调用（当输入缓冲区中有响应可用时）。<strong>simxCreatePublisher</strong>：这与simxDefaultPublisher非常相似，不同之处在于创建了一个<strong>专用的发布者主题</strong>，即创建了一个专用的发布频道。将特定功能/命令分配给专用发布服务器非常有用，特别是在数据量大的情况下（例如，simxSetVisionSensorImage通常使用专用发布服务器执行）。<strong>simxCreateSubscriber</strong>：这与simxDefaultSubscriber非常相似，不同之处在于创建了专用订户主题，即创建了<strong>专用订户频道</strong>。将特定功能/命令分配给专用订阅者可能很有用，特别是在数据量大的情况下（例如，simxGetVisionSensorImage通常使用专用订阅者来执行）。默认情况下，基于B0的远程API客户端和服务器（即CoppeliaSim）将异步运行。但是，为了实现同步操作，可以让客户端单独触发每个模拟步骤。以下是同步模式的Python示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> b0RemoteApi<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">with</span> b0RemoteApi.RemoteApiClient(<span class="hljs-string">&#x27;b0RemoteApi_pythonClient&#x27;</span>,<span class="hljs-string">&#x27;b0RemoteApi&#x27;</span>) <span class="hljs-keyword">as</span> client:    <br>    doNextStep=<span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">simulationStepStarted</span>(<span class="hljs-params">msg</span>):<br>        simTime=msg[<span class="hljs-number">1</span>][<span class="hljs-string">b&#x27;simulationTime&#x27;</span>];<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Simulation step started. Simulation time: &#x27;</span>,simTime)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">simulationStepDone</span>(<span class="hljs-params">msg</span>):<br>        simTime=msg[<span class="hljs-number">1</span>][<span class="hljs-string">b&#x27;simulationTime&#x27;</span>];<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Simulation step done. Simulation time: &#x27;</span>,simTime);<br>        <span class="hljs-keyword">global</span> doNextStep<br>        doNextStep=<span class="hljs-literal">True</span><br>        <br>    client.simxSynchronous(<span class="hljs-literal">True</span>)<br>    client.simxGetSimulationStepStarted(client.simxDefaultSubscriber(simulationStepStarted));<br>    client.simxGetSimulationStepDone(client.simxDefaultSubscriber(simulationStepDone));<br>    client.simxStartSimulation(client.simxDefaultPublisher())<br>    <br>    startTime=time.time()<br>    <span class="hljs-keyword">while</span> time.time()&lt;startTime+<span class="hljs-number">5</span>: <br>        <span class="hljs-keyword">if</span> doNextStep:<br>            doNextStep=<span class="hljs-literal">False</span><br>            client.simxSynchronousTrigger()<br>        client.simxSpinOnce()<br>    client.simxStopSimulation(client.simxDefaultPublisher())<br></code></pre></td></tr></table></figure><h1 id="三仿真">三、仿真</h1><h1 id="四python小知识">四、python小知识</h1><h2 id="创建anaconda虚拟环境-1">1.创建anaconda虚拟环境</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1、用conda创建Python虚拟环境（在conda prompt环境下完成）<br>conda create -n Vrep <span class="hljs-attribute">python</span>=3.7<br><br>2、激活虚拟环境（在conda prompt环境下完成）<br>activate Vrep<br><br>3、给虚拟环境安装外部包<br>conda install -n Vrep [package]<br>例如: conda install -n tensorflow pandas<br><br>4、查看已有的环境(当前已激活的环境会显示一个星号)<br>conda <span class="hljs-built_in">info</span> -e<br><br>5、删除一个已有的虚拟环境<br>conda <span class="hljs-built_in">remove</span> --name your_env_name --all<br><br>6、查看pip的安装目录<br>pip list<br><br>7、删除已经安装的模块<br>pip uninstall **<br>(例如：pip uninstall numpy)<br></code></pre></td></tr></table></figure><p>创建anaconda的虚拟环境后，会生成E:，在Pycharm中选择创建的虚拟环境。</p><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/07/202201072028121.png"alt="image-20220107202802960" /><figcaption aria-hidden="true">image-20220107202802960</figcaption></figure><h2 id="pip换镜像源">2.pip换镜像源</h2><p>在 python 里经常要安装各种这样的包，安装各种包时最常用的就是 pip，pip默认从官网下载文件，官网位于国外，下载速度时快时慢，还经常断线，国内的体验并不太好。</p><p>解决办法是把 pip源换成国内的，最常用的并且可信赖的源包括清华大学源、豆瓣源、阿里源：</p><blockquote><p>pypi 清华大学源：<ahref="https://link.zhihu.com/?target=https%3A//pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a>pypi 豆瓣源 ：<ahref="https://link.zhihu.com/?target=http%3A//pypi.douban.com/simple/">http://pypi.douban.com/simple/</a>pypi 腾讯源：<ahref="https://link.zhihu.com/?target=http%3A//mirrors.cloud.tencent.com/pypi/simple">http://mirrors.cloud.tencent.com/pypi/simple</a>pypi 阿里源：<ahref="https://link.zhihu.com/?target=https%3A//mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi</a></p></blockquote><p>pip 源具体修改方式是，我们以安装 python的robotics-toolbox-python模块为例，通常的方式是直接在命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install robotics-toolbox-python<br></code></pre></td></tr></table></figure><p>这样会从国外官网下载robotics-toolbox-python模块并安装。</p><p>若要把 pip源换成国内的，只需要把上面的代码改成下图这样（下图以清华大学源为例）：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install robotics-toolbox-python -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><figure><imgsrc="http://pic.leiting2020.top:5050/images/2022/01/09/202201091353451.png"alt="image-20220109135351365" /><figcaption aria-hidden="true">image-20220109135351365</figcaption></figure><p>这样我们就从清华大学源成功安装了机器人工具箱，速度会比过pip默认的国外源快很多。</p><p>上述做法是临时改成国内源，如果不想每次用 pip 都加上<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>，那么可以把国内源设为默认，做法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清华源</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br><span class="hljs-comment"># 阿里源</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<br><span class="hljs-comment"># 腾讯源</span><br>pip config <span class="hljs-built_in">set</span> global.index-url http://mirrors.cloud.tencent.com/pypi/simple<br><span class="hljs-comment"># 豆瓣源</span><br>pip config <span class="hljs-built_in">set</span> global.index-url http://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
